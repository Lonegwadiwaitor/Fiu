--[====[Generated by CreateTests.lua v2]====]
return function()
	return [====[Function 0 (??):
    3: print("testing bitwise operations")
GETIMPORT R0 1 [print]
LOADK R1 K2 ['testing bitwise operations']
CALL R0 1 0
REMARK builtin assert/1
REMARK builtin bit32.band/0
    5: assert(bit32.band() == bit32.bnot(0))
FASTCALL 29 L0
GETIMPORT R2 5 [bit32.band]
CALL R2 0 1
REMARK builtin bit32.bnot/1
L0: LOADN R4 0
FASTCALL1 30 R4 L1
GETIMPORT R3 7 [bit32.bnot]
CALL R3 1 1
L1: JUMPIFEQ R2 R3 L2
LOADB R1 0 +1
L2: LOADB R1 1
L3: FASTCALL1 1 R1 L4
GETIMPORT R0 9 [assert]
CALL R0 1 0
REMARK builtin assert/1
REMARK builtin bit32.btest/0
    6: assert(bit32.btest() == true)
L4: FASTCALL 33 L5
GETIMPORT R2 11 [bit32.btest]
CALL R2 0 1
L5: JUMPXEQKB R2 1 L6
LOADB R1 0 +1
L6: LOADB R1 1
L7: FASTCALL1 1 R1 L8
GETIMPORT R0 9 [assert]
CALL R0 1 0
REMARK builtin assert/1
REMARK builtin bit32.bor/0
    7: assert(bit32.bor() == 0)
L8: FASTCALL 31 L9
GETIMPORT R2 13 [bit32.bor]
CALL R2 0 1
L9: JUMPXEQKN R2 K14 L10 [0]
LOADB R1 0 +1
L10: LOADB R1 1
L11: FASTCALL1 1 R1 L12
GETIMPORT R0 9 [assert]
CALL R0 1 0
REMARK builtin assert/1
REMARK builtin bit32.bxor/0
    8: assert(bit32.bxor() == 0)
L12: FASTCALL 32 L13
GETIMPORT R2 16 [bit32.bxor]
CALL R2 0 1
L13: JUMPXEQKN R2 K14 L14 [0]
LOADB R1 0 +1
L14: LOADB R1 1
L15: FASTCALL1 1 R1 L16
GETIMPORT R0 9 [assert]
CALL R0 1 0
REMARK builtin assert/1
REMARK builtin bit32.band/0
   10: assert(bit32.band() == bit32.band(0xffffffff))
L16: FASTCALL 29 L17
GETIMPORT R2 5 [bit32.band]
CALL R2 0 1
REMARK builtin bit32.band/1
L17: LOADK R4 K17 [4294967295]
FASTCALL1 29 R4 L18
GETIMPORT R3 5 [bit32.band]
CALL R3 1 1
L18: JUMPIFEQ R2 R3 L19
LOADB R1 0 +1
L19: LOADB R1 1
L20: FASTCALL1 1 R1 L21
GETIMPORT R0 9 [assert]
CALL R0 1 0
REMARK builtin assert/1
REMARK builtin bit32.band/2
   11: assert(bit32.band(1,2) == 0)
L21: LOADN R3 1
FASTCALL2K 29 R3 K18 L22 [2]
LOADK R4 K18 [2]
GETIMPORT R2 5 [bit32.band]
CALL R2 2 1
L22: JUMPXEQKN R2 K14 L23 [0]
LOADB R1 0 +1
L23: LOADB R1 1
L24: FASTCALL1 1 R1 L25
GETIMPORT R0 9 [assert]
CALL R0 1 0
REMARK builtin assert/1
REMARK builtin bit32.band/1
   15: assert(bit32.band(-1) == 0xffffffff)
L25: LOADN R3 -1
FASTCALL1 29 R3 L26
GETIMPORT R2 5 [bit32.band]
CALL R2 1 1
L26: JUMPXEQKN R2 K17 L27 [4294967295]
LOADB R1 0 +1
L27: LOADB R1 1
L28: FASTCALL1 1 R1 L29
GETIMPORT R0 9 [assert]
CALL R0 1 0
REMARK builtin assert/1
REMARK builtin bit32.band/1
   16: assert(bit32.band(2^33 - 1) == 0xffffffff)
L29: LOADK R3 K19 [8589934591]
FASTCALL1 29 R3 L30
GETIMPORT R2 5 [bit32.band]
CALL R2 1 1
L30: JUMPXEQKN R2 K17 L31 [4294967295]
LOADB R1 0 +1
L31: LOADB R1 1
L32: FASTCALL1 1 R1 L33
GETIMPORT R0 9 [assert]
CALL R0 1 0
REMARK builtin assert/1
REMARK builtin bit32.band/1
   17: assert(bit32.band(-2^33 - 1) == 0xffffffff)
L33: LOADK R3 K20 [-8589934593]
FASTCALL1 29 R3 L34
GETIMPORT R2 5 [bit32.band]
CALL R2 1 1
L34: JUMPXEQKN R2 K17 L35 [4294967295]
LOADB R1 0 +1
L35: LOADB R1 1
L36: FASTCALL1 1 R1 L37
GETIMPORT R0 9 [assert]
CALL R0 1 0
REMARK builtin assert/1
REMARK builtin bit32.band/1
   18: assert(bit32.band(2^33 + 1) == 1)
L37: LOADK R3 K21 [8589934593]
FASTCALL1 29 R3 L38
GETIMPORT R2 5 [bit32.band]
CALL R2 1 1
L38: JUMPXEQKN R2 K22 L39 [1]
LOADB R1 0 +1
L39: LOADB R1 1
L40: FASTCALL1 1 R1 L41
GETIMPORT R0 9 [assert]
CALL R0 1 0
REMARK builtin assert/1
REMARK builtin bit32.band/1
   19: assert(bit32.band(-2^33 + 1) == 1)
L41: LOADK R3 K23 [-8589934591]
FASTCALL1 29 R3 L42
GETIMPORT R2 5 [bit32.band]
CALL R2 1 1
L42: JUMPXEQKN R2 K22 L43 [1]
LOADB R1 0 +1
L43: LOADB R1 1
L44: FASTCALL1 1 R1 L45
GETIMPORT R0 9 [assert]
CALL R0 1 0
REMARK builtin assert/1
REMARK builtin bit32.band/1
   20: assert(bit32.band(-2^40) == 0)
L45: LOADK R3 K24 [-1099511627776]
FASTCALL1 29 R3 L46
GETIMPORT R2 5 [bit32.band]
CALL R2 1 1
L46: JUMPXEQKN R2 K14 L47 [0]
LOADB R1 0 +1
L47: LOADB R1 1
L48: FASTCALL1 1 R1 L49
GETIMPORT R0 9 [assert]
CALL R0 1 0
REMARK builtin assert/1
REMARK builtin bit32.band/1
   21: assert(bit32.band(2^40) == 0)
L49: LOADK R3 K25 [1099511627776]
FASTCALL1 29 R3 L50
GETIMPORT R2 5 [bit32.band]
CALL R2 1 1
L50: JUMPXEQKN R2 K14 L51 [0]
LOADB R1 0 +1
L51: LOADB R1 1
L52: FASTCALL1 1 R1 L53
GETIMPORT R0 9 [assert]
CALL R0 1 0
REMARK builtin assert/1
REMARK builtin bit32.band/1
   22: assert(bit32.band(-2^40 - 2) == 0xfffffffe)
L53: LOADK R3 K26 [-1099511627778]
FASTCALL1 29 R3 L54
GETIMPORT R2 5 [bit32.band]
CALL R2 1 1
L54: JUMPXEQKN R2 K27 L55 [4294967294]
LOADB R1 0 +1
L55: LOADB R1 1
L56: FASTCALL1 1 R1 L57
GETIMPORT R0 9 [assert]
CALL R0 1 0
REMARK builtin assert/1
REMARK builtin bit32.band/1
   23: assert(bit32.band(2^40 - 4) == 0xfffffffc)
L57: LOADK R3 K28 [1099511627772]
FASTCALL1 29 R3 L58
GETIMPORT R2 5 [bit32.band]
CALL R2 1 1
L58: JUMPXEQKN R2 K29 L59 [4294967292]
LOADB R1 0 +1
L59: LOADB R1 1
L60: FASTCALL1 1 R1 L61
GETIMPORT R0 9 [assert]
CALL R0 1 0
REMARK builtin assert/1
REMARK builtin bit32.lrotate/2
   25: assert(bit32.lrotate(0, -1) == 0)
L61: LOADN R3 0
FASTCALL2K 35 R3 K30 L62 [-1]
LOADK R4 K30 [-1]
GETIMPORT R2 32 [bit32.lrotate]
CALL R2 2 1
L62: JUMPXEQKN R2 K14 L63 [0]
LOADB R1 0 +1
L63: LOADB R1 1
L64: FASTCALL1 1 R1 L65
GETIMPORT R0 9 [assert]
CALL R0 1 0
REMARK builtin assert/1
REMARK builtin bit32.lrotate/2
   26: assert(bit32.lrotate(0, 7) == 0)
L65: LOADN R3 0
FASTCALL2K 35 R3 K33 L66 [7]
LOADK R4 K33 [7]
GETIMPORT R2 32 [bit32.lrotate]
CALL R2 2 1
L66: JUMPXEQKN R2 K14 L67 [0]
LOADB R1 0 +1
L67: LOADB R1 1
L68: FASTCALL1 1 R1 L69
GETIMPORT R0 9 [assert]
CALL R0 1 0
REMARK builtin assert/1
REMARK builtin bit32.lrotate/2
   27: assert(bit32.lrotate(0x12345678, 4) == 0x23456781)
L69: LOADK R3 K34 [305419896]
FASTCALL2K 35 R3 K35 L70 [4]
LOADK R4 K35 [4]
GETIMPORT R2 32 [bit32.lrotate]
CALL R2 2 1
L70: JUMPXEQKN R2 K36 L71 [591751041]
LOADB R1 0 +1
L71: LOADB R1 1
L72: FASTCALL1 1 R1 L73
GETIMPORT R0 9 [assert]
CALL R0 1 0
REMARK builtin assert/1
REMARK builtin bit32.rrotate/2
   28: assert(bit32.rrotate(0x12345678, -4) == 0x23456781)
L73: LOADK R3 K34 [305419896]
FASTCALL2K 38 R3 K37 L74 [-4]
LOADK R4 K37 [-4]
GETIMPORT R2 39 [bit32.rrotate]
CALL R2 2 1
L74: JUMPXEQKN R2 K36 L75 [591751041]
LOADB R1 0 +1
L75: LOADB R1 1
L76: FASTCALL1 1 R1 L77
GETIMPORT R0 9 [assert]
CALL R0 1 0
REMARK builtin assert/1
REMARK builtin bit32.lrotate/2
   29: assert(bit32.lrotate(0x12345678, -8) == 0x78123456)
L77: LOADK R3 K34 [305419896]
FASTCALL2K 35 R3 K40 L78 [-8]
LOADK R4 K40 [-8]
GETIMPORT R2 32 [bit32.lrotate]
CALL R2 2 1
L78: JUMPXEQKN R2 K41 L79 [2014458966]
LOADB R1 0 +1
L79: LOADB R1 1
L80: FASTCALL1 1 R1 L81
GETIMPORT R0 9 [assert]
CALL R0 1 0
REMARK builtin assert/1
REMARK builtin bit32.rrotate/2
   30: assert(bit32.rrotate(0x12345678, 8) == 0x78123456)
L81: LOADK R3 K34 [305419896]
FASTCALL2K 38 R3 K42 L82 [8]
LOADK R4 K42 [8]
GETIMPORT R2 39 [bit32.rrotate]
CALL R2 2 1
L82: JUMPXEQKN R2 K41 L83 [2014458966]
LOADB R1 0 +1
L83: LOADB R1 1
L84: FASTCALL1 1 R1 L85
GETIMPORT R0 9 [assert]
CALL R0 1 0
REMARK builtin assert/1
REMARK builtin bit32.lrotate/2
   31: assert(bit32.lrotate(0xaaaaaaaa, 2) == 0xaaaaaaaa)
L85: LOADK R3 K43 [2863311530]
FASTCALL2K 35 R3 K18 L86 [2]
LOADK R4 K18 [2]
GETIMPORT R2 32 [bit32.lrotate]
CALL R2 2 1
L86: JUMPXEQKN R2 K43 L87 [2863311530]
LOADB R1 0 +1
L87: LOADB R1 1
L88: FASTCALL1 1 R1 L89
GETIMPORT R0 9 [assert]
CALL R0 1 0
REMARK builtin assert/1
REMARK builtin bit32.lrotate/2
   32: assert(bit32.lrotate(0xaaaaaaaa, -2) == 0xaaaaaaaa)
L89: LOADK R3 K43 [2863311530]
FASTCALL2K 35 R3 K44 L90 [-2]
LOADK R4 K44 [-2]
GETIMPORT R2 32 [bit32.lrotate]
CALL R2 2 1
L90: JUMPXEQKN R2 K43 L91 [2863311530]
LOADB R1 0 +1
L91: LOADB R1 1
L92: FASTCALL1 1 R1 L93
GETIMPORT R0 9 [assert]
CALL R0 1 0
   33: for i = -50, 50 do
L93: LOADN R2 -50
LOADN R0 50
LOADN R1 1
FORNPREP R0 L100
REMARK builtin assert/1
REMARK builtin bit32.lrotate/2
   34:   assert(bit32.lrotate(0x89abcdef, i) == bit32.lrotate(0x89abcdef, i%32))
L94: LOADK R6 K45 [2309737967]
FASTCALL2 35 R6 R2 L95
MOVE R7 R2
GETIMPORT R5 32 [bit32.lrotate]
CALL R5 2 1
REMARK builtin bit32.lrotate/2
L95: LOADK R7 K45 [2309737967]
MODK R8 R2 K46 [32]
FASTCALL2 35 R7 R8 L96
GETIMPORT R6 32 [bit32.lrotate]
CALL R6 2 1
L96: JUMPIFEQ R5 R6 L97
LOADB R4 0 +1
L97: LOADB R4 1
L98: FASTCALL1 1 R4 L99
GETIMPORT R3 9 [assert]
CALL R3 1 0
   33: for i = -50, 50 do
L99: FORNLOOP R0 L94
REMARK builtin assert/1
REMARK builtin bit32.lshift/2
   37: assert(bit32.lshift(0x12345678, 4) == 0x23456780)
L100: LOADK R3 K34 [305419896]
FASTCALL2K 36 R3 K35 L101 [4]
LOADK R4 K35 [4]
GETIMPORT R2 48 [bit32.lshift]
CALL R2 2 1
L101: JUMPXEQKN R2 K49 L102 [591751040]
LOADB R1 0 +1
L102: LOADB R1 1
L103: FASTCALL1 1 R1 L104
GETIMPORT R0 9 [assert]
CALL R0 1 0
REMARK builtin assert/1
REMARK builtin bit32.lshift/2
   38: assert(bit32.lshift(0x12345678, 8) == 0x34567800)
L104: LOADK R3 K34 [305419896]
FASTCALL2K 36 R3 K42 L105 [8]
LOADK R4 K42 [8]
GETIMPORT R2 48 [bit32.lshift]
CALL R2 2 1
L105: JUMPXEQKN R2 K50 L106 [878082048]
LOADB R1 0 +1
L106: LOADB R1 1
L107: FASTCALL1 1 R1 L108
GETIMPORT R0 9 [assert]
CALL R0 1 0
REMARK builtin assert/1
REMARK builtin bit32.lshift/2
   39: assert(bit32.lshift(0x12345678, -4) == 0x01234567)
L108: LOADK R3 K34 [305419896]
FASTCALL2K 36 R3 K37 L109 [-4]
LOADK R4 K37 [-4]
GETIMPORT R2 48 [bit32.lshift]
CALL R2 2 1
L109: JUMPXEQKN R2 K51 L110 [19088743]
LOADB R1 0 +1
L110: LOADB R1 1
L111: FASTCALL1 1 R1 L112
GETIMPORT R0 9 [assert]
CALL R0 1 0
REMARK builtin assert/1
REMARK builtin bit32.lshift/2
   40: assert(bit32.lshift(0x12345678, -8) == 0x00123456)
L112: LOADK R3 K34 [305419896]
FASTCALL2K 36 R3 K40 L113 [-8]
LOADK R4 K40 [-8]
GETIMPORT R2 48 [bit32.lshift]
CALL R2 2 1
L113: JUMPXEQKN R2 K52 L114 [1193046]
LOADB R1 0 +1
L114: LOADB R1 1
L115: FASTCALL1 1 R1 L116
GETIMPORT R0 9 [assert]
CALL R0 1 0
REMARK builtin assert/1
REMARK builtin bit32.lshift/2
   41: assert(bit32.lshift(0x12345678, 32) == 0)
L116: LOADK R3 K34 [305419896]
FASTCALL2K 36 R3 K46 L117 [32]
LOADK R4 K46 [32]
GETIMPORT R2 48 [bit32.lshift]
CALL R2 2 1
L117: JUMPXEQKN R2 K14 L118 [0]
LOADB R1 0 +1
L118: LOADB R1 1
L119: FASTCALL1 1 R1 L120
GETIMPORT R0 9 [assert]
CALL R0 1 0
REMARK builtin assert/1
REMARK builtin bit32.lshift/2
   42: assert(bit32.lshift(0x12345678, -32) == 0)
L120: LOADK R3 K34 [305419896]
FASTCALL2K 36 R3 K53 L121 [-32]
LOADK R4 K53 [-32]
GETIMPORT R2 48 [bit32.lshift]
CALL R2 2 1
L121: JUMPXEQKN R2 K14 L122 [0]
LOADB R1 0 +1
L122: LOADB R1 1
L123: FASTCALL1 1 R1 L124
GETIMPORT R0 9 [assert]
CALL R0 1 0
REMARK builtin assert/1
REMARK builtin bit32.rshift/2
   43: assert(bit32.rshift(0x12345678, 4) == 0x01234567)
L124: LOADK R3 K34 [305419896]
FASTCALL2K 39 R3 K35 L125 [4]
LOADK R4 K35 [4]
GETIMPORT R2 55 [bit32.rshift]
CALL R2 2 1
L125: JUMPXEQKN R2 K51 L126 [19088743]
LOADB R1 0 +1
L126: LOADB R1 1
L127: FASTCALL1 1 R1 L128
GETIMPORT R0 9 [assert]
CALL R0 1 0
REMARK builtin assert/1
REMARK builtin bit32.rshift/2
   44: assert(bit32.rshift(0x12345678, 8) == 0x00123456)
L128: LOADK R3 K34 [305419896]
FASTCALL2K 39 R3 K42 L129 [8]
LOADK R4 K42 [8]
GETIMPORT R2 55 [bit32.rshift]
CALL R2 2 1
L129: JUMPXEQKN R2 K52 L130 [1193046]
LOADB R1 0 +1
L130: LOADB R1 1
L131: FASTCALL1 1 R1 L132
GETIMPORT R0 9 [assert]
CALL R0 1 0
REMARK builtin assert/1
REMARK builtin bit32.rshift/2
   45: assert(bit32.rshift(0x12345678, 32) == 0)
L132: LOADK R3 K34 [305419896]
FASTCALL2K 39 R3 K46 L133 [32]
LOADK R4 K46 [32]
GETIMPORT R2 55 [bit32.rshift]
CALL R2 2 1
L133: JUMPXEQKN R2 K14 L134 [0]
LOADB R1 0 +1
L134: LOADB R1 1
L135: FASTCALL1 1 R1 L136
GETIMPORT R0 9 [assert]
CALL R0 1 0
REMARK builtin assert/1
REMARK builtin bit32.rshift/2
   46: assert(bit32.rshift(0x12345678, -32) == 0)
L136: LOADK R3 K34 [305419896]
FASTCALL2K 39 R3 K53 L137 [-32]
LOADK R4 K53 [-32]
GETIMPORT R2 55 [bit32.rshift]
CALL R2 2 1
L137: JUMPXEQKN R2 K14 L138 [0]
LOADB R1 0 +1
L138: LOADB R1 1
L139: FASTCALL1 1 R1 L140
GETIMPORT R0 9 [assert]
CALL R0 1 0
REMARK builtin assert/1
REMARK builtin bit32.arshift/2
   47: assert(bit32.arshift(0x12345678, 0) == 0x12345678)
L140: LOADK R3 K34 [305419896]
FASTCALL2K 28 R3 K14 L141 [0]
LOADK R4 K14 [0]
GETIMPORT R2 57 [bit32.arshift]
CALL R2 2 1
L141: JUMPXEQKN R2 K34 L142 [305419896]
LOADB R1 0 +1
L142: LOADB R1 1
L143: FASTCALL1 1 R1 L144
GETIMPORT R0 9 [assert]
CALL R0 1 0
REMARK builtin assert/1
REMARK builtin bit32.arshift/2
   48: assert(bit32.arshift(0x12345678, 1) == 0x12345678 / 2)
L144: LOADK R3 K34 [305419896]
FASTCALL2K 28 R3 K22 L145 [1]
LOADK R4 K22 [1]
GETIMPORT R2 57 [bit32.arshift]
CALL R2 2 1
L145: JUMPXEQKN R2 K58 L146 [152709948]
LOADB R1 0 +1
L146: LOADB R1 1
L147: FASTCALL1 1 R1 L148
GETIMPORT R0 9 [assert]
CALL R0 1 0
REMARK builtin assert/1
REMARK builtin bit32.arshift/2
   49: assert(bit32.arshift(0x12345678, -1) == 0x12345678 * 2)
L148: LOADK R3 K34 [305419896]
FASTCALL2K 28 R3 K30 L149 [-1]
LOADK R4 K30 [-1]
GETIMPORT R2 57 [bit32.arshift]
CALL R2 2 1
L149: JUMPXEQKN R2 K59 L150 [610839792]
LOADB R1 0 +1
L150: LOADB R1 1
L151: FASTCALL1 1 R1 L152
GETIMPORT R0 9 [assert]
CALL R0 1 0
REMARK builtin assert/1
REMARK builtin bit32.arshift/2
   50: assert(bit32.arshift(-1, 1) == 0xffffffff)
L152: LOADN R3 -1
FASTCALL2K 28 R3 K22 L153 [1]
LOADK R4 K22 [1]
GETIMPORT R2 57 [bit32.arshift]
CALL R2 2 1
L153: JUMPXEQKN R2 K17 L154 [4294967295]
LOADB R1 0 +1
L154: LOADB R1 1
L155: FASTCALL1 1 R1 L156
GETIMPORT R0 9 [assert]
CALL R0 1 0
REMARK builtin assert/1
REMARK builtin bit32.arshift/2
   51: assert(bit32.arshift(-1, 24) == 0xffffffff)
L156: LOADN R3 -1
FASTCALL2K 28 R3 K60 L157 [24]
LOADK R4 K60 [24]
GETIMPORT R2 57 [bit32.arshift]
CALL R2 2 1
L157: JUMPXEQKN R2 K17 L158 [4294967295]
LOADB R1 0 +1
L158: LOADB R1 1
L159: FASTCALL1 1 R1 L160
GETIMPORT R0 9 [assert]
CALL R0 1 0
REMARK builtin assert/1
REMARK builtin bit32.arshift/2
   52: assert(bit32.arshift(-1, 32) == 0xffffffff)
L160: LOADN R3 -1
FASTCALL2K 28 R3 K46 L161 [32]
LOADK R4 K46 [32]
GETIMPORT R2 57 [bit32.arshift]
CALL R2 2 1
L161: JUMPXEQKN R2 K17 L162 [4294967295]
LOADB R1 0 +1
L162: LOADB R1 1
L163: FASTCALL1 1 R1 L164
GETIMPORT R0 9 [assert]
CALL R0 1 0
REMARK builtin assert/1
REMARK builtin bit32.arshift/2
   53: assert(bit32.arshift(-1, -1) == (-1 * 2) % 2^32)
L164: LOADN R3 -1
FASTCALL2K 28 R3 K30 L165 [-1]
LOADK R4 K30 [-1]
GETIMPORT R2 57 [bit32.arshift]
CALL R2 2 1
L165: JUMPXEQKN R2 K27 L166 [4294967294]
LOADB R1 0 +1
L166: LOADB R1 1
L167: FASTCALL1 1 R1 L168
GETIMPORT R0 9 [assert]
CALL R0 1 0
   55: print("+")
L168: GETIMPORT R0 1 [print]
LOADK R1 K61 ['+']
CALL R0 1 0
REMARK allocation: table array 10
   57: local c = {0, 1, 2, 3, 10, 0x80000000, 0xaaaaaaaa, 0x55555555,
NEWTABLE R0 0 10
LOADN R1 0
LOADN R2 1
LOADN R3 2
LOADN R4 3
LOADN R5 10
LOADK R6 K62 [2147483648]
LOADK R7 K43 [2863311530]
LOADK R8 K63 [1431655765]
   58:            0xffffffff, 0x7fffffff}
LOADK R9 K17 [4294967295]
LOADK R10 K64 [2147483647]
SETLIST R0 R1 10 [1]
   60: for _, b in pairs(c) do
GETIMPORT R1 66 [pairs]
MOVE R2 R0
CALL R1 1 3
FORGPREP_NEXT R1 L274
REMARK builtin assert/1
REMARK builtin bit32.band/1
   61:   assert(bit32.band(b) == b)
L169: FASTCALL1 29 R5 L170
MOVE R9 R5
GETIMPORT R8 5 [bit32.band]
CALL R8 1 1
L170: JUMPIFEQ R8 R5 L171
LOADB R7 0 +1
L171: LOADB R7 1
L172: FASTCALL1 1 R7 L173
GETIMPORT R6 9 [assert]
CALL R6 1 0
REMARK builtin assert/1
REMARK builtin bit32.band/2
   62:   assert(bit32.band(b, b) == b)
L173: FASTCALL2 29 R5 R5 L174
MOVE R9 R5
MOVE R10 R5
GETIMPORT R8 5 [bit32.band]
CALL R8 2 1
L174: JUMPIFEQ R8 R5 L175
LOADB R7 0 +1
L175: LOADB R7 1
L176: FASTCALL1 1 R7 L177
GETIMPORT R6 9 [assert]
CALL R6 1 0
REMARK builtin assert/1
REMARK builtin bit32.btest/2
   63:   assert(bit32.btest(b, b) == (b ~= 0))
L177: FASTCALL2 33 R5 R5 L178
MOVE R9 R5
MOVE R10 R5
GETIMPORT R8 11 [bit32.btest]
CALL R8 2 1
L178: JUMPXEQKN R5 K14 L179 NOT [0]
LOADB R9 0 +1
L179: LOADB R9 1
L180: JUMPIFEQ R8 R9 L181
LOADB R7 0 +1
L181: LOADB R7 1
L182: FASTCALL1 1 R7 L183
GETIMPORT R6 9 [assert]
CALL R6 1 0
REMARK builtin assert/1
REMARK builtin bit32.band/3
   64:   assert(bit32.band(b, b, b) == b)
L183: MOVE R9 R5
MOVE R10 R5
MOVE R11 R5
FASTCALL 29 L184
GETIMPORT R8 5 [bit32.band]
CALL R8 3 1
L184: JUMPIFEQ R8 R5 L185
LOADB R7 0 +1
L185: LOADB R7 1
L186: FASTCALL1 1 R7 L187
GETIMPORT R6 9 [assert]
CALL R6 1 0
REMARK builtin assert/1
REMARK builtin bit32.btest/3
   65:   assert(bit32.btest(b, b, b) == (b ~= 0))
L187: MOVE R9 R5
MOVE R10 R5
MOVE R11 R5
FASTCALL 33 L188
GETIMPORT R8 11 [bit32.btest]
CALL R8 3 1
L188: JUMPXEQKN R5 K14 L189 NOT [0]
LOADB R9 0 +1
L189: LOADB R9 1
L190: JUMPIFEQ R8 R9 L191
LOADB R7 0 +1
L191: LOADB R7 1
L192: FASTCALL1 1 R7 L193
GETIMPORT R6 9 [assert]
CALL R6 1 0
REMARK builtin assert/1
REMARK builtin bit32.band/2+
   66:   assert(bit32.band(b, bit32.bnot(b)) == 0)
L193: MOVE R9 R5
REMARK builtin bit32.bnot/1
FASTCALL1 30 R5 L194
MOVE R11 R5
GETIMPORT R10 7 [bit32.bnot]
CALL R10 1 -1
L194: FASTCALL 29 L195
GETIMPORT R8 5 [bit32.band]
CALL R8 -1 1
L195: JUMPXEQKN R8 K14 L196 [0]
LOADB R7 0 +1
L196: LOADB R7 1
L197: FASTCALL1 1 R7 L198
GETIMPORT R6 9 [assert]
CALL R6 1 0
REMARK builtin assert/1
REMARK builtin bit32.bor/2+
   67:   assert(bit32.bor(b, bit32.bnot(b)) == bit32.bnot(0))
L198: MOVE R9 R5
REMARK builtin bit32.bnot/1
FASTCALL1 30 R5 L199
MOVE R11 R5
GETIMPORT R10 7 [bit32.bnot]
CALL R10 1 -1
L199: FASTCALL 31 L200
GETIMPORT R8 13 [bit32.bor]
CALL R8 -1 1
REMARK builtin bit32.bnot/1
L200: LOADN R10 0
FASTCALL1 30 R10 L201
GETIMPORT R9 7 [bit32.bnot]
CALL R9 1 1
L201: JUMPIFEQ R8 R9 L202
LOADB R7 0 +1
L202: LOADB R7 1
L203: FASTCALL1 1 R7 L204
GETIMPORT R6 9 [assert]
CALL R6 1 0
REMARK builtin assert/1
REMARK builtin bit32.bor/1
   68:   assert(bit32.bor(b) == b)
L204: FASTCALL1 31 R5 L205
MOVE R9 R5
GETIMPORT R8 13 [bit32.bor]
CALL R8 1 1
L205: JUMPIFEQ R8 R5 L206
LOADB R7 0 +1
L206: LOADB R7 1
L207: FASTCALL1 1 R7 L208
GETIMPORT R6 9 [assert]
CALL R6 1 0
REMARK builtin assert/1
REMARK builtin bit32.bor/2
   69:   assert(bit32.bor(b, b) == b)
L208: FASTCALL2 31 R5 R5 L209
MOVE R9 R5
MOVE R10 R5
GETIMPORT R8 13 [bit32.bor]
CALL R8 2 1
L209: JUMPIFEQ R8 R5 L210
LOADB R7 0 +1
L210: LOADB R7 1
L211: FASTCALL1 1 R7 L212
GETIMPORT R6 9 [assert]
CALL R6 1 0
REMARK builtin assert/1
REMARK builtin bit32.bor/3
   70:   assert(bit32.bor(b, b, b) == b)
L212: MOVE R9 R5
MOVE R10 R5
MOVE R11 R5
FASTCALL 31 L213
GETIMPORT R8 13 [bit32.bor]
CALL R8 3 1
L213: JUMPIFEQ R8 R5 L214
LOADB R7 0 +1
L214: LOADB R7 1
L215: FASTCALL1 1 R7 L216
GETIMPORT R6 9 [assert]
CALL R6 1 0
REMARK builtin assert/1
REMARK builtin bit32.bxor/1
   71:   assert(bit32.bxor(b) == b)
L216: FASTCALL1 32 R5 L217
MOVE R9 R5
GETIMPORT R8 16 [bit32.bxor]
CALL R8 1 1
L217: JUMPIFEQ R8 R5 L218
LOADB R7 0 +1
L218: LOADB R7 1
L219: FASTCALL1 1 R7 L220
GETIMPORT R6 9 [assert]
CALL R6 1 0
REMARK builtin assert/1
REMARK builtin bit32.bxor/2
   72:   assert(bit32.bxor(b, b) == 0)
L220: FASTCALL2 32 R5 R5 L221
MOVE R9 R5
MOVE R10 R5
GETIMPORT R8 16 [bit32.bxor]
CALL R8 2 1
L221: JUMPXEQKN R8 K14 L222 [0]
LOADB R7 0 +1
L222: LOADB R7 1
L223: FASTCALL1 1 R7 L224
GETIMPORT R6 9 [assert]
CALL R6 1 0
REMARK builtin assert/1
REMARK builtin bit32.bxor/2
   73:   assert(bit32.bxor(b, 0) == b)
L224: FASTCALL2K 32 R5 K14 L225 [0]
MOVE R9 R5
LOADK R10 K14 [0]
GETIMPORT R8 16 [bit32.bxor]
CALL R8 2 1
L225: JUMPIFEQ R8 R5 L226
LOADB R7 0 +1
L226: LOADB R7 1
L227: FASTCALL1 1 R7 L228
GETIMPORT R6 9 [assert]
CALL R6 1 0
REMARK builtin assert/1
REMARK builtin bit32.bxor/3
   74:   assert(bit32.bxor(b, b, b) == b)
L228: MOVE R9 R5
MOVE R10 R5
MOVE R11 R5
FASTCALL 32 L229
GETIMPORT R8 16 [bit32.bxor]
CALL R8 3 1
L229: JUMPIFEQ R8 R5 L230
LOADB R7 0 +1
L230: LOADB R7 1
L231: FASTCALL1 1 R7 L232
GETIMPORT R6 9 [assert]
CALL R6 1 0
REMARK builtin assert/1
REMARK builtin bit32.bnot/1
   75:   assert(bit32.bnot(b) ~= b)
L232: FASTCALL1 30 R5 L233
MOVE R9 R5
GETIMPORT R8 7 [bit32.bnot]
CALL R8 1 1
L233: JUMPIFNOTEQ R8 R5 L234
LOADB R7 0 +1
L234: LOADB R7 1
L235: FASTCALL1 1 R7 L236
GETIMPORT R6 9 [assert]
CALL R6 1 0
REMARK builtin assert/1
REMARK builtin bit32.bnot/1+
REMARK builtin bit32.bnot/1
   76:   assert(bit32.bnot(bit32.bnot(b)) == b)
L236: FASTCALL1 30 R5 L237
MOVE R10 R5
GETIMPORT R9 7 [bit32.bnot]
CALL R9 1 -1
L237: FASTCALL 30 L238
GETIMPORT R8 7 [bit32.bnot]
CALL R8 -1 1
L238: JUMPIFEQ R8 R5 L239
LOADB R7 0 +1
L239: LOADB R7 1
L240: FASTCALL1 1 R7 L241
GETIMPORT R6 9 [assert]
CALL R6 1 0
REMARK builtin assert/1
REMARK builtin bit32.bnot/1
   77:   assert(bit32.bnot(b) == 2^32 - 1 - b)
L241: FASTCALL1 30 R5 L242
MOVE R9 R5
GETIMPORT R8 7 [bit32.bnot]
CALL R8 1 1
L242: SUBRK R9 K17 [4294967295] R5
JUMPIFEQ R8 R9 L243
LOADB R7 0 +1
L243: LOADB R7 1
L244: FASTCALL1 1 R7 L245
GETIMPORT R6 9 [assert]
CALL R6 1 0
REMARK builtin assert/1
REMARK builtin bit32.lrotate/2
   78:   assert(bit32.lrotate(b, 32) == b)
L245: FASTCALL2K 35 R5 K46 L246 [32]
MOVE R9 R5
LOADK R10 K46 [32]
GETIMPORT R8 32 [bit32.lrotate]
CALL R8 2 1
L246: JUMPIFEQ R8 R5 L247
LOADB R7 0 +1
L247: LOADB R7 1
L248: FASTCALL1 1 R7 L249
GETIMPORT R6 9 [assert]
CALL R6 1 0
REMARK builtin assert/1
REMARK builtin bit32.rrotate/2
   79:   assert(bit32.rrotate(b, 32) == b)
L249: FASTCALL2K 38 R5 K46 L250 [32]
MOVE R9 R5
LOADK R10 K46 [32]
GETIMPORT R8 39 [bit32.rrotate]
CALL R8 2 1
L250: JUMPIFEQ R8 R5 L251
LOADB R7 0 +1
L251: LOADB R7 1
L252: FASTCALL1 1 R7 L253
GETIMPORT R6 9 [assert]
CALL R6 1 0
REMARK builtin assert/1
REMARK builtin bit32.lshift/2
REMARK builtin bit32.lshift/2
   80:   assert(bit32.lshift(bit32.lshift(b, -4), 4) == bit32.band(b, bit32.bnot(0xf)))
L253: FASTCALL2K 36 R5 K37 L254 [-4]
MOVE R10 R5
LOADK R11 K37 [-4]
GETIMPORT R9 48 [bit32.lshift]
CALL R9 2 1
L254: FASTCALL2K 36 R9 K35 L255 [4]
LOADK R10 K35 [4]
GETIMPORT R8 48 [bit32.lshift]
CALL R8 2 1
REMARK builtin bit32.band/2+
L255: MOVE R10 R5
REMARK builtin bit32.bnot/1
LOADN R12 15
FASTCALL1 30 R12 L256
GETIMPORT R11 7 [bit32.bnot]
CALL R11 1 -1
L256: FASTCALL 29 L257
GETIMPORT R9 5 [bit32.band]
CALL R9 -1 1
L257: JUMPIFEQ R8 R9 L258
LOADB R7 0 +1
L258: LOADB R7 1
L259: FASTCALL1 1 R7 L260
GETIMPORT R6 9 [assert]
CALL R6 1 0
REMARK builtin assert/1
REMARK builtin bit32.rshift/2
REMARK builtin bit32.rshift/2
   81:   assert(bit32.rshift(bit32.rshift(b, 4), -4) == bit32.band(b, bit32.bnot(0xf)))
L260: FASTCALL2K 39 R5 K35 L261 [4]
MOVE R10 R5
LOADK R11 K35 [4]
GETIMPORT R9 55 [bit32.rshift]
CALL R9 2 1
L261: FASTCALL2K 39 R9 K37 L262 [-4]
LOADK R10 K37 [-4]
GETIMPORT R8 55 [bit32.rshift]
CALL R8 2 1
REMARK builtin bit32.band/2+
L262: MOVE R10 R5
REMARK builtin bit32.bnot/1
LOADN R12 15
FASTCALL1 30 R12 L263
GETIMPORT R11 7 [bit32.bnot]
CALL R11 1 -1
L263: FASTCALL 29 L264
GETIMPORT R9 5 [bit32.band]
CALL R9 -1 1
L264: JUMPIFEQ R8 R9 L265
LOADB R7 0 +1
L265: LOADB R7 1
L266: FASTCALL1 1 R7 L267
GETIMPORT R6 9 [assert]
CALL R6 1 0
   82:   for i = -40, 40 do
L267: LOADN R8 -40
LOADN R6 40
LOADN R7 1
FORNPREP R6 L274
REMARK builtin assert/1
REMARK builtin bit32.lshift/2
   83:     assert(bit32.lshift(b, i) == math.floor((b * 2^i) % 2^32))
L268: FASTCALL2 36 R5 R8 L269
MOVE R12 R5
MOVE R13 R8
GETIMPORT R11 48 [bit32.lshift]
CALL R11 2 1
REMARK builtin math.floor/1
L269: LOADN R16 2
POW R15 R16 R8
MUL R14 R5 R15
MODK R13 R14 K67 [4294967296]
FASTCALL1 12 R13 L270
GETIMPORT R12 70 [math.floor]
CALL R12 1 1
L270: JUMPIFEQ R11 R12 L271
LOADB R10 0 +1
L271: LOADB R10 1
L272: FASTCALL1 1 R10 L273
GETIMPORT R9 9 [assert]
CALL R9 1 0
   82:   for i = -40, 40 do
L273: FORNLOOP R6 L268
   60: for _, b in pairs(c) do
L274: FORGLOOP R1 L169 2
REMARK builtin assert/1
   87: assert(not pcall(bit32.band, {}))
GETIMPORT R3 72 [pcall]
GETIMPORT R4 5 [bit32.band]
REMARK allocation: table hash 0
NEWTABLE R5 0 0
CALL R3 2 1
NOT R2 R3
FASTCALL1 1 R2 L275
GETIMPORT R1 9 [assert]
CALL R1 1 0
REMARK builtin assert/1
   88: assert(not pcall(bit32.bnot, "a"))
L275: GETIMPORT R3 72 [pcall]
GETIMPORT R4 7 [bit32.bnot]
LOADK R5 K73 ['a']
CALL R3 2 1
NOT R2 R3
FASTCALL1 1 R2 L276
GETIMPORT R1 9 [assert]
CALL R1 1 0
REMARK builtin assert/1
   89: assert(not pcall(bit32.lshift, 45))
L276: GETIMPORT R3 72 [pcall]
GETIMPORT R4 48 [bit32.lshift]
LOADN R5 45
CALL R3 2 1
NOT R2 R3
FASTCALL1 1 R2 L277
GETIMPORT R1 9 [assert]
CALL R1 1 0
REMARK builtin assert/1
   90: assert(not pcall(bit32.lshift, 45, print))
L277: GETIMPORT R3 72 [pcall]
GETIMPORT R4 48 [bit32.lshift]
LOADN R5 45
GETIMPORT R6 1 [print]
CALL R3 3 1
NOT R2 R3
FASTCALL1 1 R2 L278
GETIMPORT R1 9 [assert]
CALL R1 1 0
REMARK builtin assert/1
   91: assert(not pcall(bit32.rshift, 45, print))
L278: GETIMPORT R3 72 [pcall]
GETIMPORT R4 55 [bit32.rshift]
LOADN R5 45
GETIMPORT R6 1 [print]
CALL R3 3 1
NOT R2 R3
FASTCALL1 1 R2 L279
GETIMPORT R1 9 [assert]
CALL R1 1 0
   93: print("+")
L279: GETIMPORT R1 1 [print]
LOADK R2 K61 ['+']
CALL R1 1 0
REMARK builtin assert/1
REMARK builtin bit32.extract/3
   98: assert(bit32.extract(0x12345678, 0, 4) == 8)
LOADK R4 K34 [305419896]
FASTCALL2K 59 R4 K74 L280 [96]
LOADK R5 K14 [0]
LOADK R6 K35 [4]
GETIMPORT R3 76 [bit32.extract]
CALL R3 3 1
L280: JUMPXEQKN R3 K42 L281 [8]
LOADB R2 0 +1
L281: LOADB R2 1
L282: FASTCALL1 1 R2 L283
GETIMPORT R1 9 [assert]
CALL R1 1 0
REMARK builtin assert/1
REMARK builtin bit32.extract/3
   99: assert(bit32.extract(0x12345678, 4, 4) == 7)
L283: LOADK R4 K34 [305419896]
FASTCALL2K 59 R4 K77 L284 [100]
LOADK R5 K35 [4]
LOADK R6 K35 [4]
GETIMPORT R3 76 [bit32.extract]
CALL R3 3 1
L284: JUMPXEQKN R3 K33 L285 [7]
LOADB R2 0 +1
L285: LOADB R2 1
L286: FASTCALL1 1 R2 L287
GETIMPORT R1 9 [assert]
CALL R1 1 0
REMARK builtin assert/1
REMARK builtin bit32.extract/3
  100: assert(bit32.extract(0xa0001111, 28, 4) == 0xa)
L287: LOADK R4 K79 [2684358929]
FASTCALL2K 59 R4 K78 L288 [124]
LOADK R5 K80 [28]
LOADK R6 K35 [4]
GETIMPORT R3 76 [bit32.extract]
CALL R3 3 1
L288: JUMPXEQKN R3 K81 L289 [10]
LOADB R2 0 +1
L289: LOADB R2 1
L290: FASTCALL1 1 R2 L291
GETIMPORT R1 9 [assert]
CALL R1 1 0
REMARK builtin assert/1
REMARK builtin bit32.extract/3
  101: assert(bit32.extract(0xa0001111, 31, 1) == 1)
L291: LOADK R4 K79 [2684358929]
FASTCALL2K 59 R4 K82 L292 [31]
LOADK R5 K82 [31]
LOADK R6 K22 [1]
GETIMPORT R3 76 [bit32.extract]
CALL R3 3 1
L292: JUMPXEQKN R3 K22 L293 [1]
LOADB R2 0 +1
L293: LOADB R2 1
L294: FASTCALL1 1 R2 L295
GETIMPORT R1 9 [assert]
CALL R1 1 0
REMARK builtin assert/1
REMARK builtin bit32.extract/3
  102: assert(bit32.extract(0x50000111, 31, 1) == 0)
L295: LOADK R4 K83 [1342177553]
FASTCALL2K 59 R4 K82 L296 [31]
LOADK R5 K82 [31]
LOADK R6 K22 [1]
GETIMPORT R3 76 [bit32.extract]
CALL R3 3 1
L296: JUMPXEQKN R3 K14 L297 [0]
LOADB R2 0 +1
L297: LOADB R2 1
L298: FASTCALL1 1 R2 L299
GETIMPORT R1 9 [assert]
CALL R1 1 0
REMARK builtin assert/1
REMARK builtin bit32.extract/3
  103: assert(bit32.extract(0xf2345679, 0, 32) == 0xf2345679)
L299: LOADK R4 K85 [4063516281]
FASTCALL2K 59 R4 K84 L300 [992]
LOADK R5 K14 [0]
LOADK R6 K46 [32]
GETIMPORT R3 76 [bit32.extract]
CALL R3 3 1
L300: JUMPXEQKN R3 K85 L301 [4063516281]
LOADB R2 0 +1
L301: LOADB R2 1
L302: FASTCALL1 1 R2 L303
GETIMPORT R1 9 [assert]
CALL R1 1 0
REMARK builtin assert/1
REMARK builtin bit32.extract/2
  104: assert(bit32.extract(0xa0001111, 16) == 0)
L303: LOADK R4 K79 [2684358929]
FASTCALL2K 34 R4 K86 L304 [16]
LOADK R5 K86 [16]
GETIMPORT R3 76 [bit32.extract]
CALL R3 2 1
L304: JUMPXEQKN R3 K14 L305 [0]
LOADB R2 0 +1
L305: LOADB R2 1
L306: FASTCALL1 1 R2 L307
GETIMPORT R1 9 [assert]
CALL R1 1 0
REMARK builtin assert/1
REMARK builtin bit32.extract/2
  105: assert(bit32.extract(0xa0001111, 31) == 1)
L307: LOADK R4 K79 [2684358929]
FASTCALL2K 34 R4 K82 L308 [31]
LOADK R5 K82 [31]
GETIMPORT R3 76 [bit32.extract]
CALL R3 2 1
L308: JUMPXEQKN R3 K22 L309 [1]
LOADB R2 0 +1
L309: LOADB R2 1
L310: FASTCALL1 1 R2 L311
GETIMPORT R1 9 [assert]
CALL R1 1 0
REMARK builtin assert/1
REMARK builtin bit32.extract/3
  106: assert(bit32.extract(42, 1, 3) == 5)
L311: LOADN R4 42
FASTCALL2K 59 R4 K87 L312 [65]
LOADK R5 K22 [1]
LOADK R6 K88 [3]
GETIMPORT R3 76 [bit32.extract]
CALL R3 3 1
L312: JUMPXEQKN R3 K89 L313 [5]
LOADB R2 0 +1
L313: LOADB R2 1
L314: FASTCALL1 1 R2 L315
GETIMPORT R1 9 [assert]
CALL R1 1 0
  108: local pos pos = 1
L315: LOADNIL R1
LOADN R1 1
REMARK builtin assert/1
REMARK builtin bit32.extract/3
  109: assert(bit32.extract(42, pos, 3) == 5) -- test bit32.extract builtin instead of bit32.extractk
LOADN R5 42
MOVE R6 R1
LOADN R7 3
FASTCALL 34 L316
GETIMPORT R4 76 [bit32.extract]
CALL R4 3 1
L316: JUMPXEQKN R4 K89 L317 [5]
LOADB R3 0 +1
L317: LOADB R3 1
L318: FASTCALL1 1 R3 L319
GETIMPORT R2 9 [assert]
CALL R2 1 0
REMARK builtin assert/1
  111: assert(not pcall(bit32.extract, 0, -1))
L319: GETIMPORT R4 72 [pcall]
GETIMPORT R5 76 [bit32.extract]
LOADN R6 0
LOADN R7 -1
CALL R4 3 1
NOT R3 R4
FASTCALL1 1 R3 L320
GETIMPORT R2 9 [assert]
CALL R2 1 0
REMARK builtin assert/1
  112: assert(not pcall(bit32.extract, 0, 32))
L320: GETIMPORT R4 72 [pcall]
GETIMPORT R5 76 [bit32.extract]
LOADN R6 0
LOADN R7 32
CALL R4 3 1
NOT R3 R4
FASTCALL1 1 R3 L321
GETIMPORT R2 9 [assert]
CALL R2 1 0
REMARK builtin assert/1
  113: assert(not pcall(bit32.extract, 0, 0, 33))
L321: GETIMPORT R4 72 [pcall]
GETIMPORT R5 76 [bit32.extract]
LOADN R6 0
LOADN R7 0
LOADN R8 33
CALL R4 4 1
NOT R3 R4
FASTCALL1 1 R3 L322
GETIMPORT R2 9 [assert]
CALL R2 1 0
REMARK builtin assert/1
  114: assert(not pcall(bit32.extract, 0, 31, 2))
L322: GETIMPORT R4 72 [pcall]
GETIMPORT R5 76 [bit32.extract]
LOADN R6 0
LOADN R7 31
LOADN R8 2
CALL R4 4 1
NOT R3 R4
FASTCALL1 1 R3 L323
GETIMPORT R2 9 [assert]
CALL R2 1 0
REMARK builtin assert/1
REMARK builtin bit32.replace/4
  116: assert(bit32.replace(0x12345678, 5, 28, 4) == 0x52345678)
L323: LOADK R5 K34 [305419896]
LOADN R6 5
LOADN R7 28
LOADN R8 4
FASTCALL 37 L324
GETIMPORT R4 91 [bit32.replace]
CALL R4 4 1
L324: JUMPXEQKN R4 K92 L325 [1379161720]
LOADB R3 0 +1
L325: LOADB R3 1
L326: FASTCALL1 1 R3 L327
GETIMPORT R2 9 [assert]
CALL R2 1 0
REMARK builtin assert/1
REMARK builtin bit32.replace/4
  117: assert(bit32.replace(0x12345678, 0x87654321, 0, 32) == 0x87654321)
L327: LOADK R5 K34 [305419896]
LOADK R6 K93 [2271560481]
LOADN R7 0
LOADN R8 32
FASTCALL 37 L328
GETIMPORT R4 91 [bit32.replace]
CALL R4 4 1
L328: JUMPXEQKN R4 K93 L329 [2271560481]
LOADB R3 0 +1
L329: LOADB R3 1
L330: FASTCALL1 1 R3 L331
GETIMPORT R2 9 [assert]
CALL R2 1 0
REMARK builtin assert/1
REMARK builtin bit32.replace/3
  118: assert(bit32.replace(0, 1, 2) == 2^2)
L331: LOADN R5 0
LOADN R6 1
LOADN R7 2
FASTCALL 37 L332
GETIMPORT R4 91 [bit32.replace]
CALL R4 3 1
L332: JUMPXEQKN R4 K35 L333 [4]
LOADB R3 0 +1
L333: LOADB R3 1
L334: FASTCALL1 1 R3 L335
GETIMPORT R2 9 [assert]
CALL R2 1 0
REMARK builtin assert/1
REMARK builtin bit32.replace/3
  119: assert(bit32.replace(0, -1, 4) == 2^4)
L335: LOADN R5 0
LOADN R6 -1
LOADN R7 4
FASTCALL 37 L336
GETIMPORT R4 91 [bit32.replace]
CALL R4 3 1
L336: JUMPXEQKN R4 K86 L337 [16]
LOADB R3 0 +1
L337: LOADB R3 1
L338: FASTCALL1 1 R3 L339
GETIMPORT R2 9 [assert]
CALL R2 1 0
REMARK builtin assert/1
REMARK builtin bit32.replace/3
  120: assert(bit32.replace(-1, 0, 31) == 2^31 - 1)
L339: LOADN R5 -1
LOADN R6 0
LOADN R7 31
FASTCALL 37 L340
GETIMPORT R4 91 [bit32.replace]
CALL R4 3 1
L340: JUMPXEQKN R4 K64 L341 [2147483647]
LOADB R3 0 +1
L341: LOADB R3 1
L342: FASTCALL1 1 R3 L343
GETIMPORT R2 9 [assert]
CALL R2 1 0
REMARK builtin assert/1
REMARK builtin bit32.replace/4
  121: assert(bit32.replace(-1, 0, 1, 2) == 2^32 - 7)
L343: LOADN R5 -1
LOADN R6 0
LOADN R7 1
LOADN R8 2
FASTCALL 37 L344
GETIMPORT R4 91 [bit32.replace]
CALL R4 4 1
L344: JUMPXEQKN R4 K94 L345 [4294967289]
LOADB R3 0 +1
L345: LOADB R3 1
L346: FASTCALL1 1 R3 L347
GETIMPORT R2 9 [assert]
CALL R2 1 0
REMARK builtin assert/1
REMARK builtin bit32.countlz/1
  124: assert(bit32.countlz(0) == 32)
L347: LOADN R5 0
FASTCALL1 55 R5 L348
GETIMPORT R4 96 [bit32.countlz]
CALL R4 1 1
L348: JUMPXEQKN R4 K46 L349 [32]
LOADB R3 0 +1
L349: LOADB R3 1
L350: FASTCALL1 1 R3 L351
GETIMPORT R2 9 [assert]
CALL R2 1 0
REMARK builtin assert/1
REMARK builtin bit32.countlz/1
  125: assert(bit32.countlz(42) == 26)
L351: LOADN R5 42
FASTCALL1 55 R5 L352
GETIMPORT R4 96 [bit32.countlz]
CALL R4 1 1
L352: JUMPXEQKN R4 K97 L353 [26]
LOADB R3 0 +1
L353: LOADB R3 1
L354: FASTCALL1 1 R3 L355
GETIMPORT R2 9 [assert]
CALL R2 1 0
REMARK builtin assert/1
REMARK builtin bit32.countlz/1
  126: assert(bit32.countlz(0xffffffff) == 0)
L355: LOADK R5 K17 [4294967295]
FASTCALL1 55 R5 L356
GETIMPORT R4 96 [bit32.countlz]
CALL R4 1 1
L356: JUMPXEQKN R4 K14 L357 [0]
LOADB R3 0 +1
L357: LOADB R3 1
L358: FASTCALL1 1 R3 L359
GETIMPORT R2 9 [assert]
CALL R2 1 0
REMARK builtin assert/1
REMARK builtin bit32.countlz/1
  127: assert(bit32.countlz(0x80000000) == 0)
L359: LOADK R5 K62 [2147483648]
FASTCALL1 55 R5 L360
GETIMPORT R4 96 [bit32.countlz]
CALL R4 1 1
L360: JUMPXEQKN R4 K14 L361 [0]
LOADB R3 0 +1
L361: LOADB R3 1
L362: FASTCALL1 1 R3 L363
GETIMPORT R2 9 [assert]
CALL R2 1 0
REMARK builtin assert/1
REMARK builtin bit32.countlz/1
  128: assert(bit32.countlz(0x7fffffff) == 1)
L363: LOADK R5 K64 [2147483647]
FASTCALL1 55 R5 L364
GETIMPORT R4 96 [bit32.countlz]
CALL R4 1 1
L364: JUMPXEQKN R4 K22 L365 [1]
LOADB R3 0 +1
L365: LOADB R3 1
L366: FASTCALL1 1 R3 L367
GETIMPORT R2 9 [assert]
CALL R2 1 0
REMARK builtin assert/1
REMARK builtin bit32.countrz/1
  130: assert(bit32.countrz(0) == 32)
L367: LOADN R5 0
FASTCALL1 56 R5 L368
GETIMPORT R4 99 [bit32.countrz]
CALL R4 1 1
L368: JUMPXEQKN R4 K46 L369 [32]
LOADB R3 0 +1
L369: LOADB R3 1
L370: FASTCALL1 1 R3 L371
GETIMPORT R2 9 [assert]
CALL R2 1 0
REMARK builtin assert/1
REMARK builtin bit32.countrz/1
  131: assert(bit32.countrz(1) == 0)
L371: LOADN R5 1
FASTCALL1 56 R5 L372
GETIMPORT R4 99 [bit32.countrz]
CALL R4 1 1
L372: JUMPXEQKN R4 K14 L373 [0]
LOADB R3 0 +1
L373: LOADB R3 1
L374: FASTCALL1 1 R3 L375
GETIMPORT R2 9 [assert]
CALL R2 1 0
REMARK builtin assert/1
REMARK builtin bit32.countrz/1
  132: assert(bit32.countrz(42) == 1)
L375: LOADN R5 42
FASTCALL1 56 R5 L376
GETIMPORT R4 99 [bit32.countrz]
CALL R4 1 1
L376: JUMPXEQKN R4 K22 L377 [1]
LOADB R3 0 +1
L377: LOADB R3 1
L378: FASTCALL1 1 R3 L379
GETIMPORT R2 9 [assert]
CALL R2 1 0
REMARK builtin assert/1
REMARK builtin bit32.countrz/1
  133: assert(bit32.countrz(0x80000000) == 31)
L379: LOADK R5 K62 [2147483648]
FASTCALL1 56 R5 L380
GETIMPORT R4 99 [bit32.countrz]
CALL R4 1 1
L380: JUMPXEQKN R4 K82 L381 [31]
LOADB R3 0 +1
L381: LOADB R3 1
L382: FASTCALL1 1 R3 L383
GETIMPORT R2 9 [assert]
CALL R2 1 0
REMARK builtin assert/1
REMARK builtin bit32.countrz/1
  134: assert(bit32.countrz(0x40000000) == 30)
L383: LOADK R5 K100 [1073741824]
FASTCALL1 56 R5 L384
GETIMPORT R4 99 [bit32.countrz]
CALL R4 1 1
L384: JUMPXEQKN R4 K101 L385 [30]
LOADB R3 0 +1
L385: LOADB R3 1
L386: FASTCALL1 1 R3 L387
GETIMPORT R2 9 [assert]
CALL R2 1 0
REMARK builtin assert/1
REMARK builtin bit32.countrz/1
  135: assert(bit32.countrz(0x7fffffff) == 0)
L387: LOADK R5 K64 [2147483647]
FASTCALL1 56 R5 L388
GETIMPORT R4 99 [bit32.countrz]
CALL R4 1 1
L388: JUMPXEQKN R4 K14 L389 [0]
LOADB R3 0 +1
L389: LOADB R3 1
L390: FASTCALL1 1 R3 L391
GETIMPORT R2 9 [assert]
CALL R2 1 0
REMARK builtin assert/1
REMARK builtin bit32.replace/4
  143: assert(bit32.replace(-1, 0, 1, "2") == 2^32 - 7)
L391: LOADN R5 -1
LOADN R6 0
LOADN R7 1
LOADK R8 K102 ['2']
FASTCALL 37 L392
GETIMPORT R4 91 [bit32.replace]
CALL R4 4 1
L392: JUMPXEQKN R4 K94 L393 [4294967289]
LOADB R3 0 +1
L393: LOADB R3 1
L394: FASTCALL1 1 R3 L395
GETIMPORT R2 9 [assert]
CALL R2 1 0
REMARK builtin assert/1
REMARK builtin bit32.lrotate/2
  147: assert(bit32.lrotate("0x12345678", 4) == 0x23456781)
L395: LOADK R5 K103 ['0x12345678']
FASTCALL2K 35 R5 K35 L396 [4]
LOADK R6 K35 [4]
GETIMPORT R4 32 [bit32.lrotate]
CALL R4 2 1
L396: JUMPXEQKN R4 K36 L397 [591751041]
LOADB R3 0 +1
L397: LOADB R3 1
L398: FASTCALL1 1 R3 L399
GETIMPORT R2 9 [assert]
CALL R2 1 0
REMARK builtin assert/1
REMARK builtin bit32.rrotate/2
  148: assert(bit32.rrotate("0x12345678", -4) == 0x23456781)
L399: LOADK R5 K103 ['0x12345678']
FASTCALL2K 38 R5 K37 L400 [-4]
LOADK R6 K37 [-4]
GETIMPORT R4 39 [bit32.rrotate]
CALL R4 2 1
L400: JUMPXEQKN R4 K36 L401 [591751041]
LOADB R3 0 +1
L401: LOADB R3 1
L402: FASTCALL1 1 R3 L403
GETIMPORT R2 9 [assert]
CALL R2 1 0
REMARK builtin assert/1
REMARK builtin bit32.arshift/2
  149: assert(bit32.arshift("0x12345678", 1) == 0x12345678 / 2)
L403: LOADK R5 K103 ['0x12345678']
FASTCALL2K 28 R5 K22 L404 [1]
LOADK R6 K22 [1]
GETIMPORT R4 57 [bit32.arshift]
CALL R4 2 1
L404: JUMPXEQKN R4 K58 L405 [152709948]
LOADB R3 0 +1
L405: LOADB R3 1
L406: FASTCALL1 1 R3 L407
GETIMPORT R2 9 [assert]
CALL R2 1 0
REMARK builtin assert/1
REMARK builtin bit32.arshift/2
  150: assert(bit32.arshift("-1", 32) == 0xffffffff)
L407: LOADK R5 K104 ['-1']
FASTCALL2K 28 R5 K46 L408 [32]
LOADK R6 K46 [32]
GETIMPORT R4 57 [bit32.arshift]
CALL R4 2 1
L408: JUMPXEQKN R4 K17 L409 [4294967295]
LOADB R3 0 +1
L409: LOADB R3 1
L410: FASTCALL1 1 R3 L411
GETIMPORT R2 9 [assert]
CALL R2 1 0
REMARK builtin assert/1
REMARK builtin bit32.arshift/2
  151: assert(bit32.arshift("-1", 1) == 0xffffffff)
L411: LOADK R5 K104 ['-1']
FASTCALL2K 28 R5 K22 L412 [1]
LOADK R6 K22 [1]
GETIMPORT R4 57 [bit32.arshift]
CALL R4 2 1
L412: JUMPXEQKN R4 K17 L413 [4294967295]
LOADB R3 0 +1
L413: LOADB R3 1
L414: FASTCALL1 1 R3 L415
GETIMPORT R2 9 [assert]
CALL R2 1 0
REMARK builtin assert/1
REMARK builtin bit32.bnot/1
  152: assert(bit32.bnot("1") == 0xfffffffe)
L415: LOADK R5 K105 ['1']
FASTCALL1 30 R5 L416
GETIMPORT R4 7 [bit32.bnot]
CALL R4 1 1
L416: JUMPXEQKN R4 K27 L417 [4294967294]
LOADB R3 0 +1
L417: LOADB R3 1
L418: FASTCALL1 1 R3 L419
GETIMPORT R2 9 [assert]
CALL R2 1 0
REMARK builtin assert/1
REMARK builtin bit32.band/2
  153: assert(bit32.band("1", 3) == 1)
L419: LOADK R5 K105 ['1']
FASTCALL2K 29 R5 K88 L420 [3]
LOADK R6 K88 [3]
GETIMPORT R4 5 [bit32.band]
CALL R4 2 1
L420: JUMPXEQKN R4 K22 L421 [1]
LOADB R3 0 +1
L421: LOADB R3 1
L422: FASTCALL1 1 R3 L423
GETIMPORT R2 9 [assert]
CALL R2 1 0
REMARK builtin assert/1
REMARK builtin bit32.band/2
  154: assert(bit32.band(1, "3") == 1)
L423: LOADN R5 1
FASTCALL2K 29 R5 K106 L424 ['3']
LOADK R6 K106 ['3']
GETIMPORT R4 5 [bit32.band]
CALL R4 2 1
L424: JUMPXEQKN R4 K22 L425 [1]
LOADB R3 0 +1
L425: LOADB R3 1
L426: FASTCALL1 1 R3 L427
GETIMPORT R2 9 [assert]
CALL R2 1 0
REMARK builtin assert/1
REMARK builtin bit32.band/3
  155: assert(bit32.band(1, 3, "5") == 1)
L427: LOADN R5 1
LOADN R6 3
LOADK R7 K107 ['5']
FASTCALL 29 L428
GETIMPORT R4 5 [bit32.band]
CALL R4 3 1
L428: JUMPXEQKN R4 K22 L429 [1]
LOADB R3 0 +1
L429: LOADB R3 1
L430: FASTCALL1 1 R3 L431
GETIMPORT R2 9 [assert]
CALL R2 1 0
REMARK builtin assert/1
REMARK builtin bit32.bor/2
  156: assert(bit32.bor("1", 2) == 3)
L431: LOADK R5 K105 ['1']
FASTCALL2K 31 R5 K18 L432 [2]
LOADK R6 K18 [2]
GETIMPORT R4 13 [bit32.bor]
CALL R4 2 1
L432: JUMPXEQKN R4 K88 L433 [3]
LOADB R3 0 +1
L433: LOADB R3 1
L434: FASTCALL1 1 R3 L435
GETIMPORT R2 9 [assert]
CALL R2 1 0
REMARK builtin assert/1
REMARK builtin bit32.bor/2
  157: assert(bit32.bor(1, "2") == 3)
L435: LOADN R5 1
FASTCALL2K 31 R5 K102 L436 ['2']
LOADK R6 K102 ['2']
GETIMPORT R4 13 [bit32.bor]
CALL R4 2 1
L436: JUMPXEQKN R4 K88 L437 [3]
LOADB R3 0 +1
L437: LOADB R3 1
L438: FASTCALL1 1 R3 L439
GETIMPORT R2 9 [assert]
CALL R2 1 0
REMARK builtin assert/1
REMARK builtin bit32.bor/3
  158: assert(bit32.bor(1, 3, "5") == 7)
L439: LOADN R5 1
LOADN R6 3
LOADK R7 K107 ['5']
FASTCALL 31 L440
GETIMPORT R4 13 [bit32.bor]
CALL R4 3 1
L440: JUMPXEQKN R4 K33 L441 [7]
LOADB R3 0 +1
L441: LOADB R3 1
L442: FASTCALL1 1 R3 L443
GETIMPORT R2 9 [assert]
CALL R2 1 0
REMARK builtin assert/1
REMARK builtin bit32.bxor/2
  159: assert(bit32.bxor("1", 3) == 2)
L443: LOADK R5 K105 ['1']
FASTCALL2K 32 R5 K88 L444 [3]
LOADK R6 K88 [3]
GETIMPORT R4 16 [bit32.bxor]
CALL R4 2 1
L444: JUMPXEQKN R4 K18 L445 [2]
LOADB R3 0 +1
L445: LOADB R3 1
L446: FASTCALL1 1 R3 L447
GETIMPORT R2 9 [assert]
CALL R2 1 0
REMARK builtin assert/1
REMARK builtin bit32.bxor/2
  160: assert(bit32.bxor(1, "3") == 2)
L447: LOADN R5 1
FASTCALL2K 32 R5 K106 L448 ['3']
LOADK R6 K106 ['3']
GETIMPORT R4 16 [bit32.bxor]
CALL R4 2 1
L448: JUMPXEQKN R4 K18 L449 [2]
LOADB R3 0 +1
L449: LOADB R3 1
L450: FASTCALL1 1 R3 L451
GETIMPORT R2 9 [assert]
CALL R2 1 0
REMARK builtin assert/1
REMARK builtin bit32.bxor/3
  161: assert(bit32.bxor(1, 3, "5") == 7)
L451: LOADN R5 1
LOADN R6 3
LOADK R7 K107 ['5']
FASTCALL 32 L452
GETIMPORT R4 16 [bit32.bxor]
CALL R4 3 1
L452: JUMPXEQKN R4 K33 L453 [7]
LOADB R3 0 +1
L453: LOADB R3 1
L454: FASTCALL1 1 R3 L455
GETIMPORT R2 9 [assert]
CALL R2 1 0
REMARK builtin assert/1
REMARK builtin bit32.btest/2
  162: assert(bit32.btest(1, "3") == true)
L455: LOADN R5 1
FASTCALL2K 33 R5 K106 L456 ['3']
LOADK R6 K106 ['3']
GETIMPORT R4 11 [bit32.btest]
CALL R4 2 1
L456: JUMPXEQKB R4 1 L457
LOADB R3 0 +1
L457: LOADB R3 1
L458: FASTCALL1 1 R3 L459
GETIMPORT R2 9 [assert]
CALL R2 1 0
REMARK builtin assert/1
REMARK builtin bit32.btest/2
  163: assert(bit32.btest("1", 3) == true)
L459: LOADK R5 K105 ['1']
FASTCALL2K 33 R5 K88 L460 [3]
LOADK R6 K88 [3]
GETIMPORT R4 11 [bit32.btest]
CALL R4 2 1
L460: JUMPXEQKB R4 1 L461
LOADB R3 0 +1
L461: LOADB R3 1
L462: FASTCALL1 1 R3 L463
GETIMPORT R2 9 [assert]
CALL R2 1 0
REMARK builtin assert/1
REMARK builtin bit32.countlz/1
  164: assert(bit32.countlz("42") == 26)
L463: LOADK R5 K108 ['42']
FASTCALL1 55 R5 L464
GETIMPORT R4 96 [bit32.countlz]
CALL R4 1 1
L464: JUMPXEQKN R4 K97 L465 [26]
LOADB R3 0 +1
L465: LOADB R3 1
L466: FASTCALL1 1 R3 L467
GETIMPORT R2 9 [assert]
CALL R2 1 0
REMARK builtin assert/1
REMARK builtin bit32.countrz/1
  165: assert(bit32.countrz("42") == 1)
L467: LOADK R5 K108 ['42']
FASTCALL1 56 R5 L468
GETIMPORT R4 99 [bit32.countrz]
CALL R4 1 1
L468: JUMPXEQKN R4 K22 L469 [1]
LOADB R3 0 +1
L469: LOADB R3 1
L470: FASTCALL1 1 R3 L471
GETIMPORT R2 9 [assert]
CALL R2 1 0
REMARK builtin assert/1
REMARK builtin bit32.extract/3
  166: assert(bit32.extract("42", 1, 3) == 5)
L471: LOADK R5 K108 ['42']
FASTCALL2K 59 R5 K87 L472 [65]
LOADK R6 K22 [1]
LOADK R7 K88 [3]
GETIMPORT R4 76 [bit32.extract]
CALL R4 3 1
L472: JUMPXEQKN R4 K89 L473 [5]
LOADB R3 0 +1
L473: LOADB R3 1
L474: FASTCALL1 1 R3 L475
GETIMPORT R2 9 [assert]
CALL R2 1 0
  168: print('OK')
L475: GETIMPORT R2 1 [print]
LOADK R3 K109 ['OK']
CALL R2 1 0
  169: 
RETURN R0 0

]====]
end