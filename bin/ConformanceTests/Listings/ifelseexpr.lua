--[====[Generated by CreateTests.lua v2]====]
return function()
	return [====[Function 0 (True):
    6:   return true
LOADB R0 1
RETURN R0 1

Function 1 (False):
   10:   return false
LOADB R0 0
RETURN R0 1

Function 2 (EvalElseifChain):
   14:   return if condition1 then 10 elseif condition2 then 20 elseif condition3 then 30 else 40
JUMPIFNOT R0 L0
LOADN R3 10
RETURN R3 1
L0: JUMPIFNOT R1 L1
LOADN R3 20
RETURN R3 1
L1: JUMPIFNOT R2 L2
LOADN R3 30
RETURN R3 1
L2: LOADN R3 40
RETURN R3 1

Function 3 (EvalElse_IfChain):
   18:   return if condition1 then 10 else if condition2 then 20 else if condition3 then 30 else 40
JUMPIFNOT R0 L0
LOADN R3 10
RETURN R3 1
L0: JUMPIFNOT R1 L1
LOADN R3 20
RETURN R3 1
L1: JUMPIFNOT R2 L2
LOADN R3 30
RETURN R3 1
L2: LOADN R3 40
RETURN R3 1

Function 4 (AddToCounter):
   25:       counter += count
GETUPVAL R1 0
ADD R1 R1 R0
SETUPVAL R1 0
   26:       return counter
GETUPVAL R1 0
RETURN R1 1

Function 5 (CheckForConditionalEvaluation):
   22:     local counter = 0
LOADN R1 0
REMARK allocation: closure with 1 upvalues
   24:     local function AddToCounter(count)
NEWCLOSURE R2 P0
CAPTURE REF R1
   29:     local result = if condition then AddToCounter(7) else AddToCounter(17)
JUMPIFNOT R0 L0
MOVE R3 R2
LOADN R4 7
CALL R3 1 1
JUMP L1
L0: MOVE R3 R2
LOADN R4 17
CALL R3 1 1
   30:     if condition then
L1: JUMPIFNOT R0 L5
REMARK builtin assert/1
   31:       assert(result == 7)
JUMPXEQKN R3 K0 L2 [7]
LOADB R5 0 +1
L2: LOADB R5 1
L3: FASTCALL1 1 R5 L4
GETIMPORT R4 2 [assert]
CALL R4 1 0
L4: JUMP L8
REMARK builtin assert/1
   33:       assert(result == 17)
L5: JUMPXEQKN R3 K3 L6 [17]
LOADB R5 0 +1
L6: LOADB R5 1
L7: FASTCALL1 1 R5 L8
GETIMPORT R4 2 [assert]
CALL R4 1 0
REMARK builtin assert/1
   36:     assert(counter == result)
L8: JUMPIFEQ R1 R3 L9
LOADB R5 0 +1
L9: LOADB R5 1
L10: FASTCALL1 1 R5 L11
GETIMPORT R4 2 [assert]
CALL R4 1 0
   37: end
L11: CLOSEUPVALS R1
RETURN R0 0

Function 6 (??):
    3: print("testing if-else expressions")
GETIMPORT R0 1 [print]
LOADK R1 K2 ['testing if-else expressions']
CALL R0 1 0
    5: function True()
DUPCLOSURE R0 K3 ['True']
SETGLOBAL R0 K4 ['True']
    9: function False()
DUPCLOSURE R0 K5 ['False']
SETGLOBAL R0 K6 ['False']
   13: function EvalElseifChain(condition1, condition2, condition3)
DUPCLOSURE R0 K7 ['EvalElseifChain']
SETGLOBAL R0 K8 ['EvalElseifChain']
   17: function EvalElse_IfChain(condition1, condition2, condition3)
DUPCLOSURE R0 K9 ['EvalElse_IfChain']
SETGLOBAL R0 K10 ['EvalElse_IfChain']
   21: function CheckForConditionalEvaluation(condition)
DUPCLOSURE R0 K11 ['CheckForConditionalEvaluation']
SETGLOBAL R0 K12 ['CheckForConditionalEvaluation']
REMARK builtin assert/1
   40: assert(if true then true else false)
LOADB R1 1
FASTCALL1 1 R1 L0
GETIMPORT R0 14 [assert]
CALL R0 1 0
REMARK builtin assert/1
   41: assert(if false then false else true)
L0: LOADB R1 1
FASTCALL1 1 R1 L1
GETIMPORT R0 14 [assert]
CALL R0 1 0
REMARK builtin assert/1
   42: assert(if nil then false else true)
L1: LOADB R1 1
FASTCALL1 1 R1 L2
GETIMPORT R0 14 [assert]
CALL R0 1 0
REMARK builtin assert/1
   43: assert((7 + if true then 10 else 20) == 17)
L2: LOADB R1 1
FASTCALL1 1 R1 L3
GETIMPORT R0 14 [assert]
CALL R0 1 0
REMARK builtin assert/1
   46: assert(if True() then true else false)
L3: GETGLOBAL R2 K4 ['True']
CALL R2 0 1
JUMPIFNOT R2 L4
LOADB R1 1
JUMP L5
L4: LOADB R1 0
L5: FASTCALL1 1 R1 L6
GETIMPORT R0 14 [assert]
CALL R0 1 0
REMARK builtin assert/1
   47: assert(if False() then false else true)
L6: GETGLOBAL R2 K6 ['False']
CALL R2 0 1
JUMPIFNOT R2 L7
LOADB R1 0
JUMP L8
L7: LOADB R1 1
L8: FASTCALL1 1 R1 L9
GETIMPORT R0 14 [assert]
CALL R0 1 0
REMARK builtin assert/1
   50: assert(EvalElseifChain(false, false, false) == 40)
L9: GETGLOBAL R2 K8 ['EvalElseifChain']
LOADB R3 0
LOADB R4 0
LOADB R5 0
CALL R2 3 1
JUMPXEQKN R2 K15 L10 [40]
LOADB R1 0 +1
L10: LOADB R1 1
L11: FASTCALL1 1 R1 L12
GETIMPORT R0 14 [assert]
CALL R0 1 0
REMARK builtin assert/1
   51: assert(EvalElseifChain(false, false, true) == 30)
L12: GETGLOBAL R2 K8 ['EvalElseifChain']
LOADB R3 0
LOADB R4 0
LOADB R5 1
CALL R2 3 1
JUMPXEQKN R2 K16 L13 [30]
LOADB R1 0 +1
L13: LOADB R1 1
L14: FASTCALL1 1 R1 L15
GETIMPORT R0 14 [assert]
CALL R0 1 0
REMARK builtin assert/1
   52: assert(EvalElseifChain(false, true, false) == 20)
L15: GETGLOBAL R2 K8 ['EvalElseifChain']
LOADB R3 0
LOADB R4 1
LOADB R5 0
CALL R2 3 1
JUMPXEQKN R2 K17 L16 [20]
LOADB R1 0 +1
L16: LOADB R1 1
L17: FASTCALL1 1 R1 L18
GETIMPORT R0 14 [assert]
CALL R0 1 0
REMARK builtin assert/1
   53: assert(EvalElseifChain(false, true, true) == 20)
L18: GETGLOBAL R2 K8 ['EvalElseifChain']
LOADB R3 0
LOADB R4 1
LOADB R5 1
CALL R2 3 1
JUMPXEQKN R2 K17 L19 [20]
LOADB R1 0 +1
L19: LOADB R1 1
L20: FASTCALL1 1 R1 L21
GETIMPORT R0 14 [assert]
CALL R0 1 0
REMARK builtin assert/1
   54: assert(EvalElseifChain(true, false, false) == 10)
L21: GETGLOBAL R2 K8 ['EvalElseifChain']
LOADB R3 1
LOADB R4 0
LOADB R5 0
CALL R2 3 1
JUMPXEQKN R2 K18 L22 [10]
LOADB R1 0 +1
L22: LOADB R1 1
L23: FASTCALL1 1 R1 L24
GETIMPORT R0 14 [assert]
CALL R0 1 0
REMARK builtin assert/1
   55: assert(EvalElseifChain(true, false, true) == 10)
L24: GETGLOBAL R2 K8 ['EvalElseifChain']
LOADB R3 1
LOADB R4 0
LOADB R5 1
CALL R2 3 1
JUMPXEQKN R2 K18 L25 [10]
LOADB R1 0 +1
L25: LOADB R1 1
L26: FASTCALL1 1 R1 L27
GETIMPORT R0 14 [assert]
CALL R0 1 0
REMARK builtin assert/1
   56: assert(EvalElseifChain(true, true, false) == 10)
L27: GETGLOBAL R2 K8 ['EvalElseifChain']
LOADB R3 1
LOADB R4 1
LOADB R5 0
CALL R2 3 1
JUMPXEQKN R2 K18 L28 [10]
LOADB R1 0 +1
L28: LOADB R1 1
L29: FASTCALL1 1 R1 L30
GETIMPORT R0 14 [assert]
CALL R0 1 0
REMARK builtin assert/1
   57: assert(EvalElseifChain(true, true, true) == 10)
L30: GETGLOBAL R2 K8 ['EvalElseifChain']
LOADB R3 1
LOADB R4 1
LOADB R5 1
CALL R2 3 1
JUMPXEQKN R2 K18 L31 [10]
LOADB R1 0 +1
L31: LOADB R1 1
L32: FASTCALL1 1 R1 L33
GETIMPORT R0 14 [assert]
CALL R0 1 0
REMARK builtin assert/1
   60: assert(EvalElse_IfChain(false, false, false) == 40)
L33: GETGLOBAL R2 K10 ['EvalElse_IfChain']
LOADB R3 0
LOADB R4 0
LOADB R5 0
CALL R2 3 1
JUMPXEQKN R2 K15 L34 [40]
LOADB R1 0 +1
L34: LOADB R1 1
L35: FASTCALL1 1 R1 L36
GETIMPORT R0 14 [assert]
CALL R0 1 0
REMARK builtin assert/1
   61: assert(EvalElse_IfChain(false, false, true) == 30)
L36: GETGLOBAL R2 K10 ['EvalElse_IfChain']
LOADB R3 0
LOADB R4 0
LOADB R5 1
CALL R2 3 1
JUMPXEQKN R2 K16 L37 [30]
LOADB R1 0 +1
L37: LOADB R1 1
L38: FASTCALL1 1 R1 L39
GETIMPORT R0 14 [assert]
CALL R0 1 0
REMARK builtin assert/1
   62: assert(EvalElse_IfChain(false, true, false) == 20)
L39: GETGLOBAL R2 K10 ['EvalElse_IfChain']
LOADB R3 0
LOADB R4 1
LOADB R5 0
CALL R2 3 1
JUMPXEQKN R2 K17 L40 [20]
LOADB R1 0 +1
L40: LOADB R1 1
L41: FASTCALL1 1 R1 L42
GETIMPORT R0 14 [assert]
CALL R0 1 0
REMARK builtin assert/1
   63: assert(EvalElse_IfChain(false, true, true) == 20)
L42: GETGLOBAL R2 K10 ['EvalElse_IfChain']
LOADB R3 0
LOADB R4 1
LOADB R5 1
CALL R2 3 1
JUMPXEQKN R2 K17 L43 [20]
LOADB R1 0 +1
L43: LOADB R1 1
L44: FASTCALL1 1 R1 L45
GETIMPORT R0 14 [assert]
CALL R0 1 0
REMARK builtin assert/1
   64: assert(EvalElse_IfChain(true, false, false) == 10)
L45: GETGLOBAL R2 K10 ['EvalElse_IfChain']
LOADB R3 1
LOADB R4 0
LOADB R5 0
CALL R2 3 1
JUMPXEQKN R2 K18 L46 [10]
LOADB R1 0 +1
L46: LOADB R1 1
L47: FASTCALL1 1 R1 L48
GETIMPORT R0 14 [assert]
CALL R0 1 0
REMARK builtin assert/1
   65: assert(EvalElse_IfChain(true, false, true) == 10)
L48: GETGLOBAL R2 K10 ['EvalElse_IfChain']
LOADB R3 1
LOADB R4 0
LOADB R5 1
CALL R2 3 1
JUMPXEQKN R2 K18 L49 [10]
LOADB R1 0 +1
L49: LOADB R1 1
L50: FASTCALL1 1 R1 L51
GETIMPORT R0 14 [assert]
CALL R0 1 0
REMARK builtin assert/1
   66: assert(EvalElse_IfChain(true, true, false) == 10)
L51: GETGLOBAL R2 K10 ['EvalElse_IfChain']
LOADB R3 1
LOADB R4 1
LOADB R5 0
CALL R2 3 1
JUMPXEQKN R2 K18 L52 [10]
LOADB R1 0 +1
L52: LOADB R1 1
L53: FASTCALL1 1 R1 L54
GETIMPORT R0 14 [assert]
CALL R0 1 0
REMARK builtin assert/1
   67: assert(EvalElse_IfChain(true, true, true) == 10)
L54: GETGLOBAL R2 K10 ['EvalElse_IfChain']
LOADB R3 1
LOADB R4 1
LOADB R5 1
CALL R2 3 1
JUMPXEQKN R2 K18 L55 [10]
LOADB R1 0 +1
L55: LOADB R1 1
L56: FASTCALL1 1 R1 L57
GETIMPORT R0 14 [assert]
CALL R0 1 0
REMARK builtin assert/1
   70: assert((if (if True() then false else true) then 10 else 20) == 20)
L57: GETGLOBAL R4 K4 ['True']
CALL R4 0 1
JUMPIFNOT R4 L58
LOADB R3 0
JUMP L59
L58: LOADB R3 1
L59: JUMPIFNOT R3 L60
LOADN R2 10
JUMP L61
L60: LOADN R2 20
L61: JUMPXEQKN R2 K17 L62 [20]
LOADB R1 0 +1
L62: LOADB R1 1
L63: FASTCALL1 1 R1 L64
GETIMPORT R0 14 [assert]
CALL R0 1 0
REMARK builtin assert/1
   71: assert((if if True() then false else true then 10 else 20) == 20)
L64: GETGLOBAL R4 K4 ['True']
CALL R4 0 1
JUMPIFNOT R4 L65
LOADB R3 0
JUMP L66
L65: LOADB R3 1
L66: JUMPIFNOT R3 L67
LOADN R2 10
JUMP L68
L67: LOADN R2 20
L68: JUMPXEQKN R2 K17 L69 [20]
LOADB R1 0 +1
L69: LOADB R1 1
L70: FASTCALL1 1 R1 L71
GETIMPORT R0 14 [assert]
CALL R0 1 0
   77: CheckForConditionalEvaluation(true)
L71: GETGLOBAL R0 K12 ['CheckForConditionalEvaluation']
LOADB R1 1
CALL R0 1 0
   78: CheckForConditionalEvaluation(false)
GETGLOBAL R0 K12 ['CheckForConditionalEvaluation']
LOADB R1 0
CALL R0 1 0
   80: print('OK')
GETIMPORT R0 1 [print]
LOADK R1 K19 ['OK']
CALL R0 1 0
   81: 
RETURN R0 0

]====]
end