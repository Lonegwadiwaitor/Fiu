--[====[Generated by CreateTests.lua v2]====]
return function()
	return [====[Function 0 (assert):
    8:     asserted += 1 
GETUPVAL R0 0
ADDK R0 R0 K0 [1]
SETUPVAL R0 0
    9:     print("Assert called: ", asserted)
GETIMPORT R0 2 [print]
LOADK R1 K3 ['Assert called: ']
GETUPVAL R2 0
CALL R0 2 0
REMARK builtin assert/1+
   10:     return old_assert(...)
GETVARARGS R1 -1
FASTCALL 1 L0
GETUPVAL R0 1
CALL R0 -1 -1
L0: RETURN R0 -1

Function 1 (checkerr):
   14:   local stat, err = pcall(f, ...)
GETIMPORT R2 1 [pcall]
MOVE R3 R1
GETVARARGS R4 -1
CALL R2 -1 2
   15:   assert(not stat and string.find(err, msg, 1, true))
GETUPVAL R4 0
NOT R5 R2
JUMPIFNOT R5 L0
GETIMPORT R5 4 [string.find]
MOVE R6 R3
MOVE R7 R0
LOADN R8 1
LOADB R9 1
CALL R5 4 1
L0: CALL R4 1 0
   16: end
RETURN R0 0

Function 2 (checkDateTable):
   30:   local D = os.date("!*t", t)
GETIMPORT R1 2 [os.date]
LOADK R2 K3 ['!*t']
MOVE R3 R0
CALL R1 2 1
   31:   assert(os.time(D) == t)
GETUPVAL R2 0
GETIMPORT R4 5 [os.time]
MOVE R5 R1
CALL R4 1 1
JUMPIFEQ R4 R0 L0
LOADB R3 0 +1
L0: LOADB R3 1
L1: CALL R2 1 0
   32:   local DC = os.date("!%Y %m %d %H %M %S %w %j"):split(" ")
GETIMPORT R2 2 [os.date]
LOADK R3 K6 ['!%Y %m %d %H %M %S %w %j']
CALL R2 1 1
LOADK R4 K7 [' ']
NAMECALL R2 R2 K8 ['split']
CALL R2 2 1
   33:   assert(D.year == tonumber(DC[1]))
GETUPVAL R3 0
GETTABLEKS R5 R1 K9 ['year']
REMARK builtin tonumber/1
GETTABLEN R7 R2 1
FASTCALL1 62 R7 L2
GETIMPORT R6 11 [tonumber]
CALL R6 1 1
L2: JUMPIFEQ R5 R6 L3
LOADB R4 0 +1
L3: LOADB R4 1
L4: CALL R3 1 0
   34:   assert(D.month == tonumber(DC[2]))
GETUPVAL R3 0
GETTABLEKS R5 R1 K12 ['month']
REMARK builtin tonumber/1
GETTABLEN R7 R2 2
FASTCALL1 62 R7 L5
GETIMPORT R6 11 [tonumber]
CALL R6 1 1
L5: JUMPIFEQ R5 R6 L6
LOADB R4 0 +1
L6: LOADB R4 1
L7: CALL R3 1 0
   35:   assert(D.day == tonumber(DC[3]))
GETUPVAL R3 0
GETTABLEKS R5 R1 K13 ['day']
REMARK builtin tonumber/1
GETTABLEN R7 R2 3
FASTCALL1 62 R7 L8
GETIMPORT R6 11 [tonumber]
CALL R6 1 1
L8: JUMPIFEQ R5 R6 L9
LOADB R4 0 +1
L9: LOADB R4 1
L10: CALL R3 1 0
   36:   assert(D.hour == tonumber(DC[4]))
GETUPVAL R3 0
GETTABLEKS R5 R1 K14 ['hour']
REMARK builtin tonumber/1
GETTABLEN R7 R2 4
FASTCALL1 62 R7 L11
GETIMPORT R6 11 [tonumber]
CALL R6 1 1
L11: JUMPIFEQ R5 R6 L12
LOADB R4 0 +1
L12: LOADB R4 1
L13: CALL R3 1 0
   37:   assert(D.min == tonumber(DC[5]))
GETUPVAL R3 0
GETTABLEKS R5 R1 K15 ['min']
REMARK builtin tonumber/1
GETTABLEN R7 R2 5
FASTCALL1 62 R7 L14
GETIMPORT R6 11 [tonumber]
CALL R6 1 1
L14: JUMPIFEQ R5 R6 L15
LOADB R4 0 +1
L15: LOADB R4 1
L16: CALL R3 1 0
   38:   assert(D.sec == tonumber(DC[6]))
GETUPVAL R3 0
GETTABLEKS R5 R1 K16 ['sec']
REMARK builtin tonumber/1
GETTABLEN R7 R2 6
FASTCALL1 62 R7 L17
GETIMPORT R6 11 [tonumber]
CALL R6 1 1
L17: JUMPIFEQ R5 R6 L18
LOADB R4 0 +1
L18: LOADB R4 1
L19: CALL R3 1 0
   39:   assert(D.wday == tonumber(DC[7]) + 1)
GETUPVAL R3 0
GETTABLEKS R5 R1 K17 ['wday']
REMARK builtin tonumber/1
GETTABLEN R8 R2 7
FASTCALL1 62 R8 L20
GETIMPORT R7 11 [tonumber]
CALL R7 1 1
L20: ADDK R6 R7 K18 [1]
JUMPIFEQ R5 R6 L21
LOADB R4 0 +1
L21: LOADB R4 1
L22: CALL R3 1 0
   40:   assert(D.yday == tonumber(DC[8]))
GETUPVAL R3 0
GETTABLEKS R5 R1 K19 ['yday']
REMARK builtin tonumber/1
GETTABLEN R7 R2 8
FASTCALL1 62 R7 L23
GETIMPORT R6 11 [tonumber]
CALL R6 1 1
L23: JUMPIFEQ R5 R6 L24
LOADB R4 0 +1
L24: LOADB R4 1
L25: CALL R3 1 0
   41: end
RETURN R0 0

Function 3 (??):
    3: print "testing datetime library"
GETIMPORT R0 1 [print]
LOADK R1 K2 ['testing datetime library']
CALL R0 1 0
    5: local asserted = 4
LOADN R0 4
    6: local old_assert = assert 
GETIMPORT R1 4 [assert]
REMARK allocation: closure with 2 upvalues
    7: local function assert(...)
NEWCLOSURE R2 P0
CAPTURE REF R0
CAPTURE VAL R1
   13: local function checkerr (msg, f, ...)
DUPCLOSURE R3 K5 ['checkerr']
CAPTURE VAL R2
   18: assert(os.date("") == "")
MOVE R4 R2
GETIMPORT R6 8 [os.date]
LOADK R7 K9 ['']
CALL R6 1 1
JUMPXEQKS R6 K9 L0 ['']
LOADB R5 0 +1
L0: LOADB R5 1
L1: CALL R4 1 0
   19: assert(os.date("!") == "")
MOVE R4 R2
GETIMPORT R6 8 [os.date]
LOADK R7 K10 ['!']
CALL R6 1 1
JUMPXEQKS R6 K9 L2 ['']
LOADB R5 0 +1
L2: LOADB R5 1
L3: CALL R4 1 0
   20: local x = string.rep("a", 10000)
GETIMPORT R4 13 [string.rep]
LOADK R5 K14 ['a']
LOADN R6 10000
CALL R4 2 1
   21: assert(os.date(x) == x)
MOVE R5 R2
GETIMPORT R7 8 [os.date]
MOVE R8 R4
CALL R7 1 1
JUMPIFEQ R7 R4 L4
LOADB R6 0 +1
L4: LOADB R6 1
L5: CALL R5 1 0
   22: local t = os.time()
GETIMPORT R5 16 [os.time]
CALL R5 0 1
   23: D = os.date("*t", t)
GETIMPORT R6 8 [os.date]
LOADK R7 K17 ['*t']
MOVE R8 R5
CALL R6 2 1
SETGLOBAL R6 K18 ['D']
   24: assert(os.date(string.rep("%d", 1000), t) ==
MOVE R6 R2
GETIMPORT R8 8 [os.date]
GETIMPORT R9 13 [string.rep]
LOADK R10 K19 ['%d']
LOADN R11 1000
CALL R9 2 1
MOVE R10 R5
CALL R8 2 1
   25:        string.rep(os.date("%d", t), 1000))
GETIMPORT R9 13 [string.rep]
GETIMPORT R10 8 [os.date]
LOADK R11 K19 ['%d']
MOVE R12 R5
CALL R10 2 1
LOADN R11 1000
CALL R9 2 1
JUMPIFEQ R8 R9 L6
LOADB R7 0 +1
L6: LOADB R7 1
   24: assert(os.date(string.rep("%d", 1000), t) ==
L7: CALL R6 1 0
   26: assert(os.date(string.rep("%", 200)) == string.rep("%", 100))
MOVE R6 R2
GETIMPORT R8 8 [os.date]
GETIMPORT R9 13 [string.rep]
LOADK R10 K20 ['%']
LOADN R11 200
CALL R9 2 -1
CALL R8 -1 1
GETIMPORT R9 13 [string.rep]
LOADK R10 K20 ['%']
LOADN R11 100
CALL R9 2 1
JUMPIFEQ R8 R9 L8
LOADB R7 0 +1
L8: LOADB R7 1
L9: CALL R6 1 0
   27: assert(os.date("", -1) == nil)
MOVE R6 R2
GETIMPORT R8 8 [os.date]
LOADK R9 K9 ['']
LOADN R10 -1
CALL R8 2 1
JUMPXEQKNIL R8 L10
LOADB R7 0 +1
L10: LOADB R7 1
L11: CALL R6 1 0
   29: local function checkDateTable (t)
DUPCLOSURE R6 K21 ['checkDateTable']
CAPTURE VAL R2
   43: checkDateTable(os.time())
MOVE R7 R6
GETIMPORT R8 16 [os.time]
CALL R8 0 -1
CALL R7 -1 0
   45: checkerr("invalid conversion specifier", os.date, "%9")
MOVE R7 R3
LOADK R8 K22 ['invalid conversion specifier']
GETIMPORT R9 8 [os.date]
LOADK R10 K23 ['%9']
CALL R7 3 0
   46: checkerr("invalid conversion specifier", os.date, "%O")
MOVE R7 R3
LOADK R8 K22 ['invalid conversion specifier']
GETIMPORT R9 8 [os.date]
LOADK R10 K24 ['%O']
CALL R7 3 0
   47: checkerr("invalid conversion specifier", os.date, "%E")
MOVE R7 R3
LOADK R8 K22 ['invalid conversion specifier']
GETIMPORT R9 8 [os.date]
LOADK R10 K25 ['%E']
CALL R7 3 0
   48: checkerr("invalid conversion specifier", os.date, "%Ea")
MOVE R7 R3
LOADK R8 K22 ['invalid conversion specifier']
GETIMPORT R9 8 [os.date]
LOADK R10 K26 ['%Ea']
CALL R7 3 0
   50: checkerr("missing", os.time, {hour = 12})   -- missing date
MOVE R7 R3
LOADK R8 K27 ['missing']
GETIMPORT R9 16 [os.time]
REMARK allocation: table template 1
DUPTABLE R10 29
LOADN R11 12
SETTABLEKS R11 R10 K28 ['hour']
CALL R7 3 0
   53:   local D = os.date("*t")
GETIMPORT R7 8 [os.date]
LOADK R8 K17 ['*t']
CALL R7 1 1
   54:   local t = os.time(D)
GETIMPORT R8 16 [os.time]
MOVE R9 R7
CALL R8 1 1
   55:   if D.isdst == nil then
GETTABLEKS R9 R7 K30 ['isdst']
JUMPXEQKNIL R9 L12 NOT
   56:     print("no daylight saving information")
GETIMPORT R9 1 [print]
LOADK R10 K31 ['no daylight saving information']
CALL R9 1 0
JUMP L16
   58:     assert(type(D.isdst) == 'boolean')
L12: MOVE R9 R2
REMARK builtin type/1
GETTABLEKS R12 R7 K30 ['isdst']
FASTCALL1 40 R12 L13
GETIMPORT R11 33 [type]
CALL R11 1 1
L13: JUMPXEQKS R11 K34 L14 ['boolean']
LOADB R10 0 +1
L14: LOADB R10 1
L15: CALL R9 1 0
   60:   D.isdst = nil
L16: LOADNIL R9
SETTABLEKS R9 R7 K30 ['isdst']
   61:   local t1 = os.time(D)
GETIMPORT R9 16 [os.time]
MOVE R10 R7
CALL R9 1 1
   62:   assert(t == t1)   -- if isdst is absent uses correct default
MOVE R10 R2
JUMPIFEQ R8 R9 L17
LOADB R11 0 +1
L17: LOADB R11 1
L18: CALL R10 1 0
   65: local D = os.date("*t")
GETIMPORT R7 8 [os.date]
LOADK R8 K17 ['*t']
CALL R7 1 1
   66: t = os.time(D)
GETIMPORT R8 16 [os.time]
MOVE R9 R7
CALL R8 1 1
MOVE R5 R8
   67: D.year = D.year-1;
GETTABLEKS R9 R7 K36 ['year']
SUBK R8 R9 K35 [1]
SETTABLEKS R8 R7 K36 ['year']
   68: local t1 = os.time(D)
GETIMPORT R8 16 [os.time]
MOVE R9 R7
CALL R8 1 1
   70: assert(math.abs(os.difftime(t,t1)/(24*3600) - 365) < 2)
MOVE R9 R2
REMARK builtin math.abs/1
GETIMPORT R14 40 [os.difftime]
MOVE R15 R5
MOVE R16 R8
CALL R14 2 1
DIVK R13 R14 K38 [86400]
SUBK R12 R13 K37 [365]
FASTCALL1 2 R12 L19
GETIMPORT R11 43 [math.abs]
CALL R11 1 1
L19: LOADN R12 2
JUMPIFLT R11 R12 L20
LOADB R10 0 +1
L20: LOADB R10 1
L21: CALL R9 1 0
   73: t = os.time()
GETIMPORT R9 16 [os.time]
CALL R9 0 1
MOVE R5 R9
   74: t1 = os.time(os.date("!*t"))
GETIMPORT R9 16 [os.time]
GETIMPORT R10 8 [os.date]
LOADK R11 K44 ['!*t']
CALL R10 1 -1
CALL R9 -1 1
MOVE R8 R9
   75: local diff = os.difftime(t1,t)
GETIMPORT R9 40 [os.difftime]
MOVE R10 R8
MOVE R11 R5
CALL R9 2 1
   76: print(diff, 0 <= diff and diff <= 1)
GETIMPORT R10 1 [print]
MOVE R11 R9
LOADB R12 0
LOADN R13 0
JUMPIFNOTLE R13 R9 L23
LOADN R13 1
JUMPIFLE R9 R13 L22
LOADB R12 0 +1
L22: LOADB R12 1
L23: CALL R10 2 0
   77: assert(0 <= diff and diff <= 1)
MOVE R10 R2
LOADB R11 0
LOADN R12 0
JUMPIFNOTLE R12 R9 L25
LOADN R12 1
JUMPIFLE R9 R12 L24
LOADB R11 0 +1
L24: LOADB R11 1
L25: CALL R10 1 0
   78: print'hello'
GETIMPORT R10 1 [print]
LOADK R11 K45 ['hello']
CALL R10 1 0
   79: diff = os.difftime(t,t1)
GETIMPORT R10 40 [os.difftime]
MOVE R11 R5
MOVE R12 R8
CALL R10 2 1
MOVE R9 R10
   80: print'hi'
GETIMPORT R10 1 [print]
LOADK R11 K46 ['hi']
CALL R10 1 0
   81: assert(-1 <= diff and diff <= 0)
MOVE R10 R2
LOADB R11 0
LOADN R12 -1
JUMPIFNOTLE R12 R9 L27
LOADN R12 0
JUMPIFLE R9 R12 L26
LOADB R11 0 +1
L26: LOADB R11 1
L27: CALL R10 1 0
   83: local t1 = os.time{year=2000, month=10, day=1, hour=23, min=12}
GETIMPORT R10 16 [os.time]
REMARK allocation: table template 5
DUPTABLE R11 50
LOADN R12 2000
SETTABLEKS R12 R11 K36 ['year']
LOADN R12 10
SETTABLEKS R12 R11 K47 ['month']
LOADN R12 1
SETTABLEKS R12 R11 K48 ['day']
LOADN R12 23
SETTABLEKS R12 R11 K28 ['hour']
LOADN R12 12
SETTABLEKS R12 R11 K49 ['min']
CALL R10 1 1
   84: local t2 = os.time{year=2000, month=10, day=1, hour=23, min=10, sec=19}
GETIMPORT R11 16 [os.time]
REMARK allocation: table template 6
DUPTABLE R12 52
LOADN R13 2000
SETTABLEKS R13 R12 K36 ['year']
LOADN R13 10
SETTABLEKS R13 R12 K47 ['month']
LOADN R13 1
SETTABLEKS R13 R12 K48 ['day']
LOADN R13 23
SETTABLEKS R13 R12 K28 ['hour']
LOADN R13 10
SETTABLEKS R13 R12 K49 ['min']
LOADN R13 19
SETTABLEKS R13 R12 K51 ['sec']
CALL R11 1 1
   85: assert(os.difftime(t1,t2) == 60*2-19)
MOVE R12 R2
GETIMPORT R14 40 [os.difftime]
MOVE R15 R10
MOVE R16 R11
CALL R14 2 1
JUMPXEQKN R14 K53 L28 [101]
LOADB R13 0 +1
L28: LOADB R13 1
L29: CALL R12 1 0
   87: assert(os.time({ year = 1970, day = 1, month = 1, hour = 0}) == 0)
MOVE R12 R2
GETIMPORT R14 16 [os.time]
REMARK allocation: table template 4
DUPTABLE R15 54
LOADN R16 1970
SETTABLEKS R16 R15 K36 ['year']
LOADN R16 1
SETTABLEKS R16 R15 K48 ['day']
LOADN R16 1
SETTABLEKS R16 R15 K47 ['month']
LOADN R16 0
SETTABLEKS R16 R15 K28 ['hour']
CALL R14 1 1
JUMPXEQKN R14 K55 L30 [0]
LOADB R13 0 +1
L30: LOADB R13 1
L31: CALL R12 1 0
   89: print 'OK'
GETIMPORT R12 1 [print]
LOADK R13 K56 ['OK']
CALL R12 1 0
   90: 
CLOSEUPVALS R0
RETURN R0 0

]====]
end