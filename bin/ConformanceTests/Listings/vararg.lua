--[====[Generated by CreateTests.lua v2]====]
return function()
	return [====[Function 0 (f):
REMARK allocation: table hash 1
   11:   local arg = { n=select('#',...), ... }
NEWTABLE R1 1 0
REMARK builtin select/2+
LOADK R4 K0 ['#']
FASTCALL1 57 R4 L0
GETIMPORT R3 2 [select]
GETVARARGS R5 -1
CALL R3 -1 1
L0: SETTABLEKS R3 R1 K3 ['n']
GETVARARGS R2 -1
SETLIST R1 R2 -1 [1]
   12:   if a then
JUMPIFNOT R0 L4
REMARK builtin assert/1
   13:     assert(#arg == #a)
LENGTH R4 R1
LENGTH R5 R0
JUMPIFEQ R4 R5 L1
LOADB R3 0 +1
L1: LOADB R3 1
L2: FASTCALL1 1 R3 L3
GETIMPORT R2 5 [assert]
CALL R2 1 0
L3: JUMP L7
REMARK builtin assert/1
   15:     assert(#arg == 0)
L4: LENGTH R4 R1
JUMPXEQKN R4 K6 L5 [0]
LOADB R3 0 +1
L5: LOADB R3 1
L6: FASTCALL1 1 R3 L7
GETIMPORT R2 5 [assert]
CALL R2 1 0
   17:   for i=1,#arg do assert(a[i]==arg[i]) end
L7: LOADN R4 1
LENGTH R2 R1
LOADN R3 1
FORNPREP R2 L12
REMARK builtin assert/1
L8: GETTABLE R7 R0 R4
GETTABLE R8 R1 R4
JUMPIFEQ R7 R8 L9
LOADB R6 0 +1
L9: LOADB R6 1
L10: FASTCALL1 1 R6 L11
GETIMPORT R5 5 [assert]
CALL R5 1 0
L11: FORNLOOP R2 L8
   18:   return arg.n
L12: GETTABLEKS R2 R1 K3 ['n']
RETURN R2 1

Function 1 (c12):
REMARK allocation: table array 0
   22:   local x = {...}; x.n = table.getn(x)
NEWTABLE R0 0 0
GETVARARGS R1 -1
SETLIST R0 R1 -1 [1]
GETIMPORT R1 2 [table.getn]
MOVE R2 R0
CALL R1 1 1
SETTABLEKS R1 R0 K3 ['n']
   23:   local res = (x.n==2 and x[1] == 1 and x[2] == 2)
LOADB R1 0
GETTABLEKS R2 R0 K3 ['n']
JUMPXEQKN R2 K4 L1 NOT [2]
LOADB R1 0
GETTABLEN R2 R0 1
JUMPXEQKN R2 K5 L1 NOT [1]
GETTABLEN R2 R0 2
JUMPXEQKN R2 K4 L0 [2]
LOADB R1 0 +1
L0: LOADB R1 1
   24:   if res then res = 55 end
L1: JUMPIFNOT R1 L2
LOADN R1 55
   25:   return res, 2
L2: MOVE R2 R1
LOADN R3 2
RETURN R2 2

Function 2 (vararg):
REMARK allocation: table hash 1
   28: function vararg (...) return { n=select('#',...), ... } end
NEWTABLE R0 1 0
REMARK builtin select/2+
LOADK R3 K0 ['#']
FASTCALL1 57 R3 L0
GETIMPORT R2 2 [select]
GETVARARGS R4 -1
CALL R2 -1 1
L0: SETTABLEKS R2 R0 K3 ['n']
GETVARARGS R1 -1
SETLIST R0 R1 -1 [1]
RETURN R0 1

Function 3 (??):
   30: local call = function (f, args) return f(unpack(args, 1, args.n)) end
MOVE R2 R0
REMARK builtin table.unpack/3
MOVE R4 R1
LOADN R5 1
GETTABLEKS R6 R1 K0 ['n']
FASTCALL 53 L0
GETUPVAL R3 0
CALL R3 3 -1
L0: CALL R2 -1 -1
RETURN R2 -1

Function 4 (f):
REMARK allocation: table hash 1
   55:   local arg = { n=select('#',...), ... }
NEWTABLE R1 1 0
REMARK builtin select/2+
LOADK R4 K0 ['#']
FASTCALL1 57 R4 L0
GETIMPORT R3 2 [select]
GETVARARGS R5 -1
CALL R3 -1 1
L0: SETTABLEKS R3 R1 K3 ['n']
GETVARARGS R2 -1
SETLIST R1 R2 -1 [1]
   56:   return self[arg[1]]+arg.n
GETTABLEN R4 R1 1
GETTABLE R3 R0 R4
GETTABLEKS R4 R1 K3 ['n']
ADD R2 R3 R4
RETURN R2 1

Function 5 (f):
REMARK allocation: table array 0
   66:   local more = {...}
NEWTABLE R4 0 0
GETVARARGS R5 -1
SETLIST R4 R5 -1 [1]
REMARK builtin assert/1
   67:   assert(a == 1.3 and more[1] == 5.3 and
LOADB R6 0
JUMPXEQKN R0 K0 L0 NOT [1.3]
LOADB R6 0
GETTABLEN R7 R4 1
JUMPXEQKN R7 K1 L0 NOT [5.2999999999999998]
LOADB R6 0
   68:          more[lim-4] == lim+0.3 and not more[lim-3])
GETGLOBAL R9 K3 ['lim']
SUBK R8 R9 K2 [4]
GETTABLE R7 R4 R8
GETGLOBAL R9 K3 ['lim']
ADDK R8 R9 K4 [0.29999999999999999]
JUMPIFNOTEQ R7 R8 L0
GETGLOBAL R9 K3 ['lim']
SUBK R8 R9 K5 [3]
GETTABLE R7 R4 R8
NOT R6 R7
L0: FASTCALL1 1 R6 L1
   67:   assert(a == 1.3 and more[1] == 5.3 and
GETIMPORT R5 7 [assert]
CALL R5 1 0
   69: end
L1: RETURN R0 0

Function 6 (g):
REMARK builtin assert/1
   72:   assert(a == 1.3 and b == 2.3 and c == 3.3)
LOADB R4 0
JUMPXEQKN R0 K0 L1 NOT [1.3]
LOADB R4 0
JUMPXEQKN R1 K1 L1 NOT [2.2999999999999998]
JUMPXEQKN R2 K2 L0 [3.2999999999999998]
LOADB R4 0 +1
L0: LOADB R4 1
L1: FASTCALL1 1 R4 L2
GETIMPORT R3 4 [assert]
CALL R3 1 0
   73: end
L2: RETURN R0 0

Function 7 (oneless):
   88: function oneless (a, ...) return ... end
GETVARARGS R1 -1
RETURN R1 -1

Function 8 (f):
   91:   local b
LOADNIL R2
REMARK builtin assert/1
   92:   assert(arg == nil)
GETIMPORT R5 1 [arg]
JUMPXEQKNIL R5 L0
LOADB R4 0 +1
L0: LOADB R4 1
L1: FASTCALL1 1 R4 L2
GETIMPORT R3 3 [assert]
CALL R3 1 0
   93:   if n == 0 then
L2: JUMPXEQKN R0 K4 L3 NOT [0]
   94:     local b, c, d = ...
GETVARARGS R3 3
   95:     return a, b, c, d, oneless(oneless(oneless(...)))
MOVE R6 R1
MOVE R7 R3
MOVE R8 R4
MOVE R9 R5
GETGLOBAL R10 K5 ['oneless']
GETGLOBAL R11 K5 ['oneless']
GETGLOBAL R12 K5 ['oneless']
GETVARARGS R13 -1
CALL R12 -1 -1
CALL R11 -1 -1
CALL R10 -1 -1
RETURN R6 -1
   97:     n, b, a = n-1, ..., a
L3: SUBK R0 R0 K6 [1]
GETVARARGS R2 1
REMARK builtin assert/1
   98:     assert(b == ...)
GETVARARGS R5 1
JUMPIFEQ R2 R5 L4
LOADB R4 0 +1
L4: LOADB R4 1
L5: FASTCALL1 1 R4 L6
GETIMPORT R3 3 [assert]
CALL R3 1 0
   99:     return f(n, a, ...)
L6: GETGLOBAL R3 K7 ['f']
MOVE R4 R0
MOVE R5 R1
GETVARARGS R6 -1
CALL R3 -1 -1
RETURN R3 -1

Function 9 (selectone):
REMARK builtin select/2+
  123:     local e = select(n, ...)
FASTCALL1 57 R0 L0
GETIMPORT R1 1 [select]
MOVE R2 R0
GETVARARGS R3 -1
CALL R1 -1 1
  124:     return e
L0: RETURN R1 1

Function 10 (selectmany):
  128:     return table.concat({select(n, ...)}, ',')
GETIMPORT R1 2 [table.concat]
REMARK allocation: table array 1
NEWTABLE R2 0 1
REMARK builtin select/2+
GETIMPORT R3 4 [select]
MOVE R4 R0
GETVARARGS R5 -1
CALL R3 -1 -1
SETLIST R2 R3 -1 [1]
LOADK R3 K5 [',']
CALL R1 2 -1
RETURN R1 -1

Function 11 (??):
    3: print('testing vararg')
GETIMPORT R0 1 [print]
LOADK R1 K2 ['testing vararg']
CALL R0 1 0
    5: local unpack = table.unpack
GETIMPORT R0 5 [table.unpack]
    7: local _G = getfenv(0)
GETIMPORT R1 7 [getfenv]
LOADN R2 0
CALL R1 1 1
    8: _G.arg = nil
LOADNIL R2
SETTABLEKS R2 R1 K8 ['arg']
   10: function f(a, ...)
DUPCLOSURE R2 K9 ['f']
SETGLOBAL R2 K10 ['f']
   21: function c12 (...)
DUPCLOSURE R2 K11 ['c12']
SETGLOBAL R2 K12 ['c12']
   28: function vararg (...) return { n=select('#',...), ... } end
DUPCLOSURE R2 K13 ['vararg']
SETGLOBAL R2 K14 ['vararg']
   30: local call = function (f, args) return f(unpack(args, 1, args.n)) end
DUPCLOSURE R2 K15 []
CAPTURE VAL R0
REMARK builtin assert/1
   32: assert(f() == 0)
GETGLOBAL R5 K10 ['f']
CALL R5 0 1
JUMPXEQKN R5 K16 L0 [0]
LOADB R4 0 +1
L0: LOADB R4 1
L1: FASTCALL1 1 R4 L2
GETIMPORT R3 18 [assert]
CALL R3 1 0
REMARK builtin assert/1
   33: assert(f({1,2,3}, 1, 2, 3) == 3)
L2: GETGLOBAL R5 K10 ['f']
REMARK allocation: table array 3
NEWTABLE R6 0 3
LOADN R7 1
LOADN R8 2
LOADN R9 3
SETLIST R6 R7 3 [1]
LOADN R7 1
LOADN R8 2
LOADN R9 3
CALL R5 4 1
JUMPXEQKN R5 K19 L3 [3]
LOADB R4 0 +1
L3: LOADB R4 1
L4: FASTCALL1 1 R4 L5
GETIMPORT R3 18 [assert]
CALL R3 1 0
REMARK builtin assert/1
   34: assert(f({"alo", nil, 45, f, nil}, "alo", nil, 45, f, nil) == 5)
L5: GETGLOBAL R5 K10 ['f']
REMARK allocation: table array 5
NEWTABLE R6 0 5
LOADK R7 K20 ['alo']
LOADNIL R8
LOADN R9 45
GETGLOBAL R10 K10 ['f']
LOADNIL R11
SETLIST R6 R7 5 [1]
LOADK R7 K20 ['alo']
LOADNIL R8
LOADN R9 45
GETGLOBAL R10 K10 ['f']
LOADNIL R11
CALL R5 6 1
JUMPXEQKN R5 K21 L6 [5]
LOADB R4 0 +1
L6: LOADB R4 1
L7: FASTCALL1 1 R4 L8
GETIMPORT R3 18 [assert]
CALL R3 1 0
REMARK builtin assert/1
   36: assert(c12(1,2)==55)
L8: GETGLOBAL R5 K12 ['c12']
LOADN R6 1
LOADN R7 2
CALL R5 2 1
JUMPXEQKN R5 K22 L9 [55]
LOADB R4 0 +1
L9: LOADB R4 1
L10: FASTCALL1 1 R4 L11
GETIMPORT R3 18 [assert]
CALL R3 1 0
REMARK builtin assert/1+
   37: a,b = assert(call(c12, {1,2}))
L11: MOVE R4 R2
GETGLOBAL R5 K12 ['c12']
REMARK allocation: table array 2
NEWTABLE R6 0 2
LOADN R7 1
LOADN R8 2
SETLIST R6 R7 2 [1]
CALL R4 2 -1
FASTCALL 1 L12
GETIMPORT R3 18 [assert]
CALL R3 -1 2
L12: SETGLOBAL R3 K23 ['a']
SETGLOBAL R4 K24 ['b']
REMARK builtin assert/1
   38: assert(a == 55 and b == 2)
LOADB R4 0
GETGLOBAL R5 K23 ['a']
JUMPXEQKN R5 K22 L14 NOT [55]
GETGLOBAL R5 K24 ['b']
JUMPXEQKN R5 K25 L13 [2]
LOADB R4 0 +1
L13: LOADB R4 1
L14: FASTCALL1 1 R4 L15
GETIMPORT R3 18 [assert]
CALL R3 1 0
   39: a = call(c12, {1,2;n=2})
L15: MOVE R3 R2
GETGLOBAL R4 K12 ['c12']
REMARK allocation: table hash 1 array 2
NEWTABLE R5 1 2
LOADN R6 1
LOADN R7 2
SETLIST R5 R6 2 [1]
LOADN R8 2
SETTABLEKS R8 R5 K26 ['n']
CALL R3 2 1
SETGLOBAL R3 K23 ['a']
REMARK builtin assert/1
   40: assert(a == 55 and b == 2)
LOADB R4 0
GETGLOBAL R5 K23 ['a']
JUMPXEQKN R5 K22 L17 NOT [55]
GETGLOBAL R5 K24 ['b']
JUMPXEQKN R5 K25 L16 [2]
LOADB R4 0 +1
L16: LOADB R4 1
L17: FASTCALL1 1 R4 L18
GETIMPORT R3 18 [assert]
CALL R3 1 0
   41: a = call(c12, {1,2;n=1})
L18: MOVE R3 R2
GETGLOBAL R4 K12 ['c12']
REMARK allocation: table hash 1 array 2
NEWTABLE R5 1 2
LOADN R6 1
LOADN R7 2
SETLIST R5 R6 2 [1]
LOADN R8 1
SETTABLEKS R8 R5 K26 ['n']
CALL R3 2 1
SETGLOBAL R3 K23 ['a']
REMARK builtin assert/1
   42: assert(not a)
GETGLOBAL R5 K23 ['a']
NOT R4 R5
FASTCALL1 1 R4 L19
GETIMPORT R3 18 [assert]
CALL R3 1 0
REMARK builtin assert/1
   43: assert(c12(1,2,3) == false)
L19: GETGLOBAL R5 K12 ['c12']
LOADN R6 1
LOADN R7 2
LOADN R8 3
CALL R5 3 1
JUMPXEQKB R5 0 L20
LOADB R4 0 +1
L20: LOADB R4 1
L21: FASTCALL1 1 R4 L22
GETIMPORT R3 18 [assert]
CALL R3 1 0
REMARK allocation: table template 3
   44: local G = {foo=1,bar=2,foobar=3}
L22: DUPTABLE R3 30
LOADN R4 1
SETTABLEKS R4 R3 K27 ['foo']
LOADN R4 2
SETTABLEKS R4 R3 K28 ['bar']
LOADN R4 3
SETTABLEKS R4 R3 K29 ['foobar']
   45: local a = vararg(call(next, {G,nil;n=2}))
GETGLOBAL R4 K14 ['vararg']
MOVE R5 R2
GETIMPORT R6 32 [next]
REMARK allocation: table hash 1 array 2
NEWTABLE R7 1 2
MOVE R8 R3
LOADNIL R9
SETLIST R7 R8 2 [1]
LOADN R10 2
SETTABLEKS R10 R7 K26 ['n']
CALL R5 2 -1
CALL R4 -1 1
   46: local b,c = next(G)
GETIMPORT R5 32 [next]
MOVE R6 R3
CALL R5 1 2
REMARK builtin assert/1
   47: assert(a[1] == b and a[2] == c and a.n == 2)
LOADB R8 0
GETTABLEN R9 R4 1
JUMPIFNOTEQ R9 R5 L24
LOADB R8 0
GETTABLEN R9 R4 2
JUMPIFNOTEQ R9 R6 L24
GETTABLEKS R9 R4 K26 ['n']
JUMPXEQKN R9 K25 L23 [2]
LOADB R8 0 +1
L23: LOADB R8 1
L24: FASTCALL1 1 R8 L25
GETIMPORT R7 18 [assert]
CALL R7 1 0
   48: a = vararg(call(call, {c12, {1,2}}))
L25: GETGLOBAL R7 K14 ['vararg']
MOVE R8 R2
MOVE R9 R2
REMARK allocation: table array 2
NEWTABLE R10 0 2
GETGLOBAL R11 K12 ['c12']
REMARK allocation: table array 2
NEWTABLE R12 0 2
LOADN R13 1
LOADN R14 2
SETLIST R12 R13 2 [1]
SETLIST R10 R11 2 [1]
CALL R8 2 -1
CALL R7 -1 1
MOVE R4 R7
REMARK builtin assert/1
   49: assert(a.n == 2 and a[1] == 55 and a[2] == 2)
LOADB R8 0
GETTABLEKS R9 R4 K26 ['n']
JUMPXEQKN R9 K25 L27 NOT [2]
LOADB R8 0
GETTABLEN R9 R4 1
JUMPXEQKN R9 K22 L27 NOT [55]
GETTABLEN R9 R4 2
JUMPXEQKN R9 K25 L26 [2]
LOADB R8 0 +1
L26: LOADB R8 1
L27: FASTCALL1 1 R8 L28
GETIMPORT R7 18 [assert]
CALL R7 1 0
   50: a = call(print, {'+'})
L28: MOVE R7 R2
GETIMPORT R8 1 [print]
REMARK allocation: table array 1
NEWTABLE R9 0 1
LOADK R10 K33 ['+']
SETLIST R9 R10 1 [1]
CALL R7 2 1
MOVE R4 R7
REMARK builtin assert/1
   51: assert(a == nil)
JUMPXEQKNIL R4 L29
LOADB R8 0 +1
L29: LOADB R8 1
L30: FASTCALL1 1 R8 L31
GETIMPORT R7 18 [assert]
CALL R7 1 0
REMARK allocation: table array 2
   53: local t = {1, 10}
L31: NEWTABLE R7 0 2
LOADN R8 1
LOADN R9 10
SETLIST R7 R8 2 [1]
   54: function t:f (...)
DUPCLOSURE R8 K34 ['f']
SETTABLEKS R8 R7 K10 ['f']
REMARK builtin assert/1
   58: assert(t:f(1,4) == 3 and t:f(2) == 11)
LOADB R9 0
LOADN R12 1
LOADN R13 4
NAMECALL R10 R7 K10 ['f']
CALL R10 3 1
JUMPXEQKN R10 K19 L33 NOT [3]
LOADN R12 2
NAMECALL R10 R7 K10 ['f']
CALL R10 2 1
JUMPXEQKN R10 K35 L32 [11]
LOADB R9 0 +1
L32: LOADB R9 1
L33: FASTCALL1 1 R9 L34
GETIMPORT R8 18 [assert]
CALL R8 1 0
   59: print('+')
L34: GETIMPORT R8 1 [print]
LOADK R9 K33 ['+']
CALL R8 1 0
   61: lim = 20
LOADN R8 20
SETGLOBAL R8 K36 ['lim']
   62: local i, a = 1, {}
LOADN R8 1
REMARK allocation: table hash 0
NEWTABLE R9 0 0
   63: while i <= lim do a[i] = i+0.3; i=i+1 end
L35: GETGLOBAL R10 K36 ['lim']
JUMPIFNOTLE R8 R10 L36
ADDK R10 R8 K37 [0.29999999999999999]
SETTABLE R10 R9 R8
ADDK R8 R8 K38 [1]
JUMPBACK L35
   65: function f(a, b, c, d, ...)
L36: DUPCLOSURE R10 K39 ['f']
SETGLOBAL R10 K10 ['f']
   71: function g(a,b,c)
DUPCLOSURE R10 K40 ['g']
SETGLOBAL R10 K41 ['g']
   75: call(f, a)
MOVE R10 R2
GETGLOBAL R11 K10 ['f']
MOVE R12 R9
CALL R10 2 0
   76: call(g, a)
MOVE R10 R2
GETGLOBAL R11 K41 ['g']
MOVE R12 R9
CALL R10 2 0
REMARK allocation: table hash 0
   78: a = {}
NEWTABLE R9 0 0
   79: i = 1
LOADN R8 1
   80: while i <= lim do a[i] = i; i=i+1 end
L37: GETGLOBAL R10 K36 ['lim']
JUMPIFNOTLE R8 R10 L38
SETTABLE R8 R9 R8
ADDK R8 R8 K38 [1]
JUMPBACK L37
REMARK builtin assert/1
   81: assert(call(math.max, a) == lim)
L38: MOVE R12 R2
GETIMPORT R13 44 [math.max]
MOVE R14 R9
CALL R12 2 1
GETGLOBAL R13 K36 ['lim']
JUMPIFEQ R12 R13 L39
LOADB R11 0 +1
L39: LOADB R11 1
L40: FASTCALL1 1 R11 L41
GETIMPORT R10 18 [assert]
CALL R10 1 0
   83: print("+")
L41: GETIMPORT R10 1 [print]
LOADK R11 K33 ['+']
CALL R10 1 0
   88: function oneless (a, ...) return ... end
DUPCLOSURE R10 K45 ['oneless']
SETGLOBAL R10 K46 ['oneless']
   90: function f (n, a, ...)
DUPCLOSURE R10 K47 ['f']
SETGLOBAL R10 K10 ['f']
REMARK builtin assert/1+
  103: a,b,c,d,e = assert(f(10,5,4,3,2,1))
GETGLOBAL R11 K10 ['f']
LOADN R12 10
LOADN R13 5
LOADN R14 4
LOADN R15 3
LOADN R16 2
LOADN R17 1
CALL R11 6 -1
FASTCALL 1 L42
GETIMPORT R10 18 [assert]
CALL R10 -1 5
L42: SETGLOBAL R13 K48 ['d']
SETGLOBAL R14 K49 ['e']
MOVE R9 R10
MOVE R5 R11
MOVE R6 R12
REMARK builtin assert/1
  104: assert(a==5 and b==4 and c==3 and d==2 and e==1)
LOADB R11 0
JUMPXEQKN R9 K21 L44 NOT [5]
LOADB R11 0
JUMPXEQKN R5 K50 L44 NOT [4]
LOADB R11 0
JUMPXEQKN R6 K19 L44 NOT [3]
LOADB R11 0
GETGLOBAL R12 K48 ['d']
JUMPXEQKN R12 K25 L44 NOT [2]
GETGLOBAL R12 K49 ['e']
JUMPXEQKN R12 K38 L43 [1]
LOADB R11 0 +1
L43: LOADB R11 1
L44: FASTCALL1 1 R11 L45
GETIMPORT R10 18 [assert]
CALL R10 1 0
  106: a,b,c,d,e = f(4)
L45: GETGLOBAL R10 K10 ['f']
LOADN R11 4
CALL R10 1 5
SETGLOBAL R13 K48 ['d']
SETGLOBAL R14 K49 ['e']
MOVE R9 R10
MOVE R5 R11
MOVE R6 R12
REMARK builtin assert/1
  107: assert(a==nil and b==nil and c==nil and d==nil and e==nil)
LOADB R11 0
JUMPXEQKNIL R9 L47 NOT
LOADB R11 0
JUMPXEQKNIL R5 L47 NOT
LOADB R11 0
JUMPXEQKNIL R6 L47 NOT
LOADB R11 0
GETGLOBAL R12 K48 ['d']
JUMPXEQKNIL R12 L47 NOT
GETGLOBAL R12 K49 ['e']
JUMPXEQKNIL R12 L46
LOADB R11 0 +1
L46: LOADB R11 1
L47: FASTCALL1 1 R11 L48
GETIMPORT R10 18 [assert]
CALL R10 1 0
REMARK allocation: table array 1
  110: a = {select(3, unpack{10,20,30,40})}
L48: NEWTABLE R10 0 1
GETIMPORT R11 52 [select]
LOADN R12 3
REMARK builtin table.unpack/1
REMARK allocation: table array 4
NEWTABLE R14 0 4
LOADN R15 10
LOADN R16 20
LOADN R17 30
LOADN R18 40
SETLIST R14 R15 4 [1]
FASTCALL1 53 R14 L49
MOVE R13 R0
CALL R13 1 -1
L49: CALL R11 -1 -1
SETLIST R10 R11 -1 [1]
MOVE R9 R10
REMARK builtin assert/1
  111: assert(table.getn(a) == 2 and a[1] == 30 and a[2] == 40)
LOADB R11 0
GETIMPORT R12 54 [table.getn]
MOVE R13 R9
CALL R12 1 1
JUMPXEQKN R12 K25 L51 NOT [2]
LOADB R11 0
GETTABLEN R12 R9 1
JUMPXEQKN R12 K55 L51 NOT [30]
GETTABLEN R12 R9 2
JUMPXEQKN R12 K56 L50 [40]
LOADB R11 0 +1
L50: LOADB R11 1
L51: FASTCALL1 1 R11 L52
GETIMPORT R10 18 [assert]
CALL R10 1 0
REMARK allocation: table array 1
  112: a = {select(1)}
L52: NEWTABLE R10 0 1
GETIMPORT R11 52 [select]
LOADN R12 1
CALL R11 1 -1
SETLIST R10 R11 -1 [1]
MOVE R9 R10
REMARK builtin assert/1
  113: assert(next(a) == nil)
GETIMPORT R12 32 [next]
MOVE R13 R9
CALL R12 1 1
JUMPXEQKNIL R12 L53
LOADB R11 0 +1
L53: LOADB R11 1
L54: FASTCALL1 1 R11 L55
GETIMPORT R10 18 [assert]
CALL R10 1 0
REMARK allocation: table array 1
  114: a = {select(-1, 3, 5, 7)}
L55: NEWTABLE R10 0 1
GETIMPORT R11 52 [select]
LOADN R12 -1
LOADN R13 3
LOADN R14 5
LOADN R15 7
CALL R11 4 -1
SETLIST R10 R11 -1 [1]
MOVE R9 R10
REMARK builtin assert/1
  115: assert(a[1] == 7 and a[2] == nil)
LOADB R11 0
GETTABLEN R12 R9 1
JUMPXEQKN R12 K57 L57 NOT [7]
GETTABLEN R12 R9 2
JUMPXEQKNIL R12 L56
LOADB R11 0 +1
L56: LOADB R11 1
L57: FASTCALL1 1 R11 L58
GETIMPORT R10 18 [assert]
CALL R10 1 0
REMARK allocation: table array 1
  116: a = {select(-2, 3, 5, 7)}
L58: NEWTABLE R10 0 1
GETIMPORT R11 52 [select]
LOADN R12 -2
LOADN R13 3
LOADN R14 5
LOADN R15 7
CALL R11 4 -1
SETLIST R10 R11 -1 [1]
MOVE R9 R10
REMARK builtin assert/1
  117: assert(a[1] == 5 and a[2] == 7 and a[3] == nil)
LOADB R11 0
GETTABLEN R12 R9 1
JUMPXEQKN R12 K21 L60 NOT [5]
LOADB R11 0
GETTABLEN R12 R9 2
JUMPXEQKN R12 K57 L60 NOT [7]
GETTABLEN R12 R9 3
JUMPXEQKNIL R12 L59
LOADB R11 0 +1
L59: LOADB R11 1
L60: FASTCALL1 1 R11 L61
GETIMPORT R10 18 [assert]
CALL R10 1 0
  118: pcall(select, 10000)
L61: GETIMPORT R10 59 [pcall]
GETIMPORT R11 52 [select]
LOADN R12 10000
CALL R10 2 0
  119: pcall(select, -10000)
GETIMPORT R10 59 [pcall]
GETIMPORT R11 52 [select]
LOADN R12 -10000
CALL R10 2 0
  122: function selectone(n, ...)
DUPCLOSURE R10 K60 ['selectone']
SETGLOBAL R10 K61 ['selectone']
  127: function selectmany(n, ...)
DUPCLOSURE R10 K62 ['selectmany']
SETGLOBAL R10 K63 ['selectmany']
REMARK builtin assert/1
  131: assert(selectone('#') == 0)
GETGLOBAL R12 K61 ['selectone']
LOADK R13 K64 ['#']
CALL R12 1 1
JUMPXEQKN R12 K16 L62 [0]
LOADB R11 0 +1
L62: LOADB R11 1
L63: FASTCALL1 1 R11 L64
GETIMPORT R10 18 [assert]
CALL R10 1 0
REMARK builtin assert/1
  132: assert(selectmany('#') == "0")
L64: GETGLOBAL R12 K63 ['selectmany']
LOADK R13 K64 ['#']
CALL R12 1 1
JUMPXEQKS R12 K65 L65 ['0']
LOADB R11 0 +1
L65: LOADB R11 1
L66: FASTCALL1 1 R11 L67
GETIMPORT R10 18 [assert]
CALL R10 1 0
REMARK builtin assert/1
  134: assert(selectone('#', 10, 20, 30) == 3)
L67: GETGLOBAL R12 K61 ['selectone']
LOADK R13 K64 ['#']
LOADN R14 10
LOADN R15 20
LOADN R16 30
CALL R12 4 1
JUMPXEQKN R12 K19 L68 [3]
LOADB R11 0 +1
L68: LOADB R11 1
L69: FASTCALL1 1 R11 L70
GETIMPORT R10 18 [assert]
CALL R10 1 0
REMARK builtin assert/1
  135: assert(selectmany('#', 10, 20, 30) == "3")
L70: GETGLOBAL R12 K63 ['selectmany']
LOADK R13 K64 ['#']
LOADN R14 10
LOADN R15 20
LOADN R16 30
CALL R12 4 1
JUMPXEQKS R12 K66 L71 ['3']
LOADB R11 0 +1
L71: LOADB R11 1
L72: FASTCALL1 1 R11 L73
GETIMPORT R10 18 [assert]
CALL R10 1 0
REMARK builtin assert/1
  137: assert(selectone(1, 10, 20, 30) == 10)
L73: GETGLOBAL R12 K61 ['selectone']
LOADN R13 1
LOADN R14 10
LOADN R15 20
LOADN R16 30
CALL R12 4 1
JUMPXEQKN R12 K67 L74 [10]
LOADB R11 0 +1
L74: LOADB R11 1
L75: FASTCALL1 1 R11 L76
GETIMPORT R10 18 [assert]
CALL R10 1 0
REMARK builtin assert/1
  138: assert(selectmany(1, 10, 20, 30) == "10,20,30")
L76: GETGLOBAL R12 K63 ['selectmany']
LOADN R13 1
LOADN R14 10
LOADN R15 20
LOADN R16 30
CALL R12 4 1
JUMPXEQKS R12 K68 L77 ['10,20,30']
LOADB R11 0 +1
L77: LOADB R11 1
L78: FASTCALL1 1 R11 L79
GETIMPORT R10 18 [assert]
CALL R10 1 0
REMARK builtin assert/1
  140: assert(selectone(2, 10, 20, 30) == 20)
L79: GETGLOBAL R12 K61 ['selectone']
LOADN R13 2
LOADN R14 10
LOADN R15 20
LOADN R16 30
CALL R12 4 1
JUMPXEQKN R12 K69 L80 [20]
LOADB R11 0 +1
L80: LOADB R11 1
L81: FASTCALL1 1 R11 L82
GETIMPORT R10 18 [assert]
CALL R10 1 0
REMARK builtin assert/1
  141: assert(selectmany(2, 10, 20, 30) == "20,30")
L82: GETGLOBAL R12 K63 ['selectmany']
LOADN R13 2
LOADN R14 10
LOADN R15 20
LOADN R16 30
CALL R12 4 1
JUMPXEQKS R12 K70 L83 ['20,30']
LOADB R11 0 +1
L83: LOADB R11 1
L84: FASTCALL1 1 R11 L85
GETIMPORT R10 18 [assert]
CALL R10 1 0
REMARK builtin assert/1
  143: assert(selectone(3, 10, 20, 30) == 30)
L85: GETGLOBAL R12 K61 ['selectone']
LOADN R13 3
LOADN R14 10
LOADN R15 20
LOADN R16 30
CALL R12 4 1
JUMPXEQKN R12 K55 L86 [30]
LOADB R11 0 +1
L86: LOADB R11 1
L87: FASTCALL1 1 R11 L88
GETIMPORT R10 18 [assert]
CALL R10 1 0
REMARK builtin assert/1
  144: assert(selectmany(3, 10, 20, 30) == "30")
L88: GETGLOBAL R12 K63 ['selectmany']
LOADN R13 3
LOADN R14 10
LOADN R15 20
LOADN R16 30
CALL R12 4 1
JUMPXEQKS R12 K71 L89 ['30']
LOADB R11 0 +1
L89: LOADB R11 1
L90: FASTCALL1 1 R11 L91
GETIMPORT R10 18 [assert]
CALL R10 1 0
REMARK builtin assert/1
  146: assert(selectone(4, 10, 20, 30) == nil)
L91: GETGLOBAL R12 K61 ['selectone']
LOADN R13 4
LOADN R14 10
LOADN R15 20
LOADN R16 30
CALL R12 4 1
JUMPXEQKNIL R12 L92
LOADB R11 0 +1
L92: LOADB R11 1
L93: FASTCALL1 1 R11 L94
GETIMPORT R10 18 [assert]
CALL R10 1 0
REMARK builtin assert/1
  147: assert(selectmany(4, 10, 20, 30) == "")
L94: GETGLOBAL R12 K63 ['selectmany']
LOADN R13 4
LOADN R14 10
LOADN R15 20
LOADN R16 30
CALL R12 4 1
JUMPXEQKS R12 K72 L95 ['']
LOADB R11 0 +1
L95: LOADB R11 1
L96: FASTCALL1 1 R11 L97
GETIMPORT R10 18 [assert]
CALL R10 1 0
REMARK builtin assert/1
  149: assert(selectone(-2, 10, 20, 30) == 20)
L97: GETGLOBAL R12 K61 ['selectone']
LOADN R13 -2
LOADN R14 10
LOADN R15 20
LOADN R16 30
CALL R12 4 1
JUMPXEQKN R12 K69 L98 [20]
LOADB R11 0 +1
L98: LOADB R11 1
L99: FASTCALL1 1 R11 L100
GETIMPORT R10 18 [assert]
CALL R10 1 0
REMARK builtin assert/1
  150: assert(selectmany(-2, 10, 20, 30) == "20,30")
L100: GETGLOBAL R12 K63 ['selectmany']
LOADN R13 -2
LOADN R14 10
LOADN R15 20
LOADN R16 30
CALL R12 4 1
JUMPXEQKS R12 K70 L101 ['20,30']
LOADB R11 0 +1
L101: LOADB R11 1
L102: FASTCALL1 1 R11 L103
GETIMPORT R10 18 [assert]
CALL R10 1 0
REMARK builtin assert/1
  152: assert(selectone('3', 10, 20, 30) == 30)
L103: GETGLOBAL R12 K61 ['selectone']
LOADK R13 K66 ['3']
LOADN R14 10
LOADN R15 20
LOADN R16 30
CALL R12 4 1
JUMPXEQKN R12 K55 L104 [30]
LOADB R11 0 +1
L104: LOADB R11 1
L105: FASTCALL1 1 R11 L106
GETIMPORT R10 18 [assert]
CALL R10 1 0
REMARK builtin assert/1
  153: assert(selectmany('3', 10, 20, 30) == "30")
L106: GETGLOBAL R12 K63 ['selectmany']
LOADK R13 K66 ['3']
LOADN R14 10
LOADN R15 20
LOADN R16 30
CALL R12 4 1
JUMPXEQKS R12 K71 L107 ['30']
LOADB R11 0 +1
L107: LOADB R11 1
L108: FASTCALL1 1 R11 L109
GETIMPORT R10 18 [assert]
CALL R10 1 0
  156: f = loadstring[[ return {...} ]]
L109: GETIMPORT R10 74 [loadstring]
LOADK R11 K75 [' return {...} ']
CALL R10 1 1
SETGLOBAL R10 K10 ['f']
  157: x = f(2,3)
GETGLOBAL R10 K10 ['f']
LOADN R11 2
LOADN R12 3
CALL R10 2 1
SETGLOBAL R10 K76 ['x']
REMARK builtin assert/1
  158: assert(x[1] == 2 and x[2] == 3 and x[3] == nil)
LOADB R11 0
GETGLOBAL R13 K76 ['x']
GETTABLEN R12 R13 1
JUMPXEQKN R12 K25 L111 NOT [2]
LOADB R11 0
GETGLOBAL R13 K76 ['x']
GETTABLEN R12 R13 2
JUMPXEQKN R12 K19 L111 NOT [3]
GETGLOBAL R13 K76 ['x']
GETTABLEN R12 R13 3
JUMPXEQKNIL R12 L110
LOADB R11 0 +1
L110: LOADB R11 1
L111: FASTCALL1 1 R11 L112
GETIMPORT R10 18 [assert]
CALL R10 1 0
  161: f = loadstring[[
L112: GETIMPORT R10 74 [loadstring]
LOADK R11 K77 []
CALL R10 1 1
SETGLOBAL R10 K10 ['f']
REMARK builtin assert/1+
  168: assert(f("a", "b", nil, {}, assert))
GETGLOBAL R11 K10 ['f']
LOADK R12 K23 ['a']
LOADK R13 K24 ['b']
LOADNIL R14
REMARK allocation: table hash 0
NEWTABLE R15 0 0
GETIMPORT R16 18 [assert]
CALL R11 5 -1
FASTCALL 1 L113
GETIMPORT R10 18 [assert]
CALL R10 -1 0
REMARK builtin assert/1+
  169: assert(f())
L113: GETGLOBAL R11 K10 ['f']
CALL R11 0 -1
FASTCALL 1 L114
GETIMPORT R10 18 [assert]
CALL R10 -1 0
  171: return('OK')
L114: LOADK R10 K78 ['OK']
RETURN R10 1

]====]
end