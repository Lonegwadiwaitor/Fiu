--[====[Generated by CreateTests.lua v2]====]
return function()
	return [====[Function 0 (??):
    6:   f = f or function (x,y) return x<y end;
JUMPIFLT R0 R1 L0
LOADB R2 0 +1
L0: LOADB R2 1
L1: RETURN R2 1

Function 1 (check):
    6:   f = f or function (x,y) return x<y end;
MOVE R2 R1
JUMPIF R2 L0
DUPCLOSURE R2 K0 []
L0: MOVE R1 R2
    7:   for n=table.getn(a),2,-1 do
GETIMPORT R4 3 [table.getn]
MOVE R5 R0
CALL R4 1 1
LOADN R2 2
LOADN R3 -1
FORNPREP R2 L3
REMARK builtin assert/1
    8:     assert(not f(a[n], a[n-1]))
L1: MOVE R7 R1
GETTABLE R8 R0 R4
SUBK R10 R4 K4 [1]
GETTABLE R9 R0 R10
CALL R7 2 1
NOT R6 R7
FASTCALL1 1 R6 L2
GETIMPORT R5 6 [assert]
CALL R5 1 0
    7:   for n=table.getn(a),2,-1 do
L2: FORNLOOP R2 L1
   10: end
L3: RETURN R0 0

Function 2 (??):
   42: table.sort(a, function(x,y) i=i+1; return y<x end)
GETGLOBAL R3 K1 ['i']
ADDK R2 R3 K0 [1]
SETGLOBAL R2 K1 ['i']
JUMPIFLT R1 R0 L0
LOADB R2 0 +1
L0: LOADB R2 1
L1: RETURN R2 1

Function 3 (??):
   45: check(a, function(x,y) return y<x end)
JUMPIFLT R1 R0 L0
LOADB R2 0 +1
L0: LOADB R2 1
L1: RETURN R2 1

Function 4 (??):
   52: table.sort(a, function(x,y) return nil end)
LOADNIL R2
RETURN R2 1

Function 5 (??):
   54: check(a, function(x,y) return nil end)
LOADNIL R2
RETURN R2 1

Function 6 (??):
   62:           loadstring(string.format("a[%q] = ''", x))()
GETIMPORT R2 1 [loadstring]
GETIMPORT R3 4 [string.format]
LOADK R4 K5 ['a[%q] = ''']
MOVE R5 R0
CALL R3 2 -1
CALL R2 -1 1
CALL R2 0 0
   63:           collectgarbage()
GETIMPORT R2 7 [collectgarbage]
CALL R2 0 0
   64:           return x<y
JUMPIFLT R0 R1 L0
LOADB R2 0 +1
L0: LOADB R2 1
L1: RETURN R2 1

Function 7 (__lt):
   68: tt = {__lt = function (a,b) return a.val < b.val end}
GETTABLEKS R3 R0 K0 ['val']
GETTABLEKS R4 R1 K0 ['val']
JUMPIFLT R3 R4 L0
LOADB R2 0 +1
L0: LOADB R2 1
L1: RETURN R2 1

Function 8 (??):
    3: print"testing sort"
GETIMPORT R0 1 [print]
LOADK R1 K2 ['testing sort']
CALL R0 1 0
    5: function check (a, f)
DUPCLOSURE R0 K3 ['check']
SETGLOBAL R0 K4 ['check']
REMARK allocation: table array 12
   12: a = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep",
NEWTABLE R0 0 12
LOADK R1 K5 ['Jan']
LOADK R2 K6 ['Feb']
LOADK R3 K7 ['Mar']
LOADK R4 K8 ['Apr']
LOADK R5 K9 ['May']
LOADK R6 K10 ['Jun']
LOADK R7 K11 ['Jul']
LOADK R8 K12 ['Aug']
LOADK R9 K13 ['Sep']
   13:      "Oct", "Nov", "Dec"}
LOADK R10 K14 ['Oct']
LOADK R11 K15 ['Nov']
LOADK R12 K16 ['Dec']
SETLIST R0 R1 12 [1]
   12: a = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep",
SETGLOBAL R0 K17 ['a']
   15: table.sort(a)
GETIMPORT R0 20 [table.sort]
GETGLOBAL R1 K17 ['a']
CALL R0 1 0
   16: check(a)
GETGLOBAL R0 K4 ['check']
GETGLOBAL R1 K17 ['a']
CALL R0 1 0
   18: limit = 30000
LOADN R0 30000
SETGLOBAL R0 K21 ['limit']
REMARK builtin rawget/2
   19: if rawget(_G, "_soft") then limit = 5000 end
GETIMPORT R1 23 [_G]
FASTCALL2K 50 R1 K24 L0 ['_soft']
LOADK R2 K24 ['_soft']
GETIMPORT R0 26 [rawget]
CALL R0 2 1
L0: JUMPIFNOT R0 L1
LOADN R0 5000
SETGLOBAL R0 K21 ['limit']
REMARK allocation: table hash 0
   21: a = {}
L1: NEWTABLE R0 0 0
SETGLOBAL R0 K17 ['a']
   22: for i=1,limit do
LOADN R2 1
GETGLOBAL R0 K21 ['limit']
LOADN R1 1
FORNPREP R0 L3
   23:   a[i] = math.random()
L2: GETGLOBAL R3 K17 ['a']
GETIMPORT R4 29 [math.random]
CALL R4 0 1
SETTABLE R4 R3 R2
   22: for i=1,limit do
FORNLOOP R0 L2
   26: local x = os.clock()
L3: GETIMPORT R0 32 [os.clock]
CALL R0 0 1
   27: table.sort(a)
GETIMPORT R1 20 [table.sort]
GETGLOBAL R2 K17 ['a']
CALL R1 1 0
   28: print(string.format("Sorting %d elements in %.2f sec.", limit, os.clock()-x))
GETIMPORT R1 1 [print]
GETIMPORT R2 35 [string.format]
LOADK R3 K36 ['Sorting %d elements in %.2f sec.'...]
GETGLOBAL R4 K21 ['limit']
GETIMPORT R6 32 [os.clock]
CALL R6 0 1
SUB R5 R6 R0
CALL R2 3 -1
CALL R1 -1 0
   29: check(a)
GETGLOBAL R1 K4 ['check']
GETGLOBAL R2 K17 ['a']
CALL R1 1 0
   31: x = os.clock()
GETIMPORT R1 32 [os.clock]
CALL R1 0 1
MOVE R0 R1
   32: table.sort(a)
GETIMPORT R1 20 [table.sort]
GETGLOBAL R2 K17 ['a']
CALL R1 1 0
   33: print(string.format("Re-sorting %d elements in %.2f sec.", limit, os.clock()-x))
GETIMPORT R1 1 [print]
GETIMPORT R2 35 [string.format]
LOADK R3 K37 ['Re-sorting %d elements in %.2f s'...]
GETGLOBAL R4 K21 ['limit']
GETIMPORT R6 32 [os.clock]
CALL R6 0 1
SUB R5 R6 R0
CALL R2 3 -1
CALL R1 -1 0
   34: check(a)
GETGLOBAL R1 K4 ['check']
GETGLOBAL R2 K17 ['a']
CALL R1 1 0
REMARK allocation: table hash 0
   36: a = {}
NEWTABLE R1 0 0
SETGLOBAL R1 K17 ['a']
   37: for i=1,limit do
LOADN R3 1
GETGLOBAL R1 K21 ['limit']
LOADN R2 1
FORNPREP R1 L5
   38:   a[i] = math.random()
L4: GETGLOBAL R4 K17 ['a']
GETIMPORT R5 29 [math.random]
CALL R5 0 1
SETTABLE R5 R4 R3
   37: for i=1,limit do
FORNLOOP R1 L4
   41: x = os.clock(); i=0
L5: GETIMPORT R1 32 [os.clock]
CALL R1 0 1
MOVE R0 R1
LOADN R1 0
SETGLOBAL R1 K38 ['i']
   42: table.sort(a, function(x,y) i=i+1; return y<x end)
GETIMPORT R1 20 [table.sort]
GETGLOBAL R2 K17 ['a']
DUPCLOSURE R3 K39 []
CALL R1 2 0
   43: print(string.format("Invert-sorting other %d elements in %.2f sec., with %i comparisons",
GETIMPORT R1 1 [print]
GETIMPORT R2 35 [string.format]
LOADK R3 K40 ['Invert-sorting other %d elements'...]
   44:       limit, os.clock()-x, i))
GETGLOBAL R4 K21 ['limit']
GETIMPORT R6 32 [os.clock]
CALL R6 0 1
SUB R5 R6 R0
GETGLOBAL R6 K38 ['i']
   43: print(string.format("Invert-sorting other %d elements in %.2f sec., with %i comparisons",
CALL R2 4 -1
CALL R1 -1 0
   45: check(a, function(x,y) return y<x end)
GETGLOBAL R1 K4 ['check']
GETGLOBAL R2 K17 ['a']
DUPCLOSURE R3 K41 []
CALL R1 2 0
   48: table.sort{}  -- empty array
GETIMPORT R1 20 [table.sort]
REMARK allocation: table hash 0
NEWTABLE R2 0 0
CALL R1 1 0
   50: for i=1,limit do a[i] = false end
LOADN R3 1
GETGLOBAL R1 K21 ['limit']
LOADN R2 1
FORNPREP R1 L7
L6: GETGLOBAL R4 K17 ['a']
LOADB R5 0
SETTABLE R5 R4 R3
FORNLOOP R1 L6
   51: x = os.clock();
L7: GETIMPORT R1 32 [os.clock]
CALL R1 0 1
MOVE R0 R1
   52: table.sort(a, function(x,y) return nil end)
GETIMPORT R1 20 [table.sort]
GETGLOBAL R2 K17 ['a']
DUPCLOSURE R3 K42 []
CALL R1 2 0
   53: print(string.format("Sorting %d equal elements in %.2f sec.", limit, os.clock()-x))
GETIMPORT R1 1 [print]
GETIMPORT R2 35 [string.format]
LOADK R3 K43 ['Sorting %d equal elements in %.2'...]
GETGLOBAL R4 K21 ['limit']
GETIMPORT R6 32 [os.clock]
CALL R6 0 1
SUB R5 R6 R0
CALL R2 3 -1
CALL R1 -1 0
   54: check(a, function(x,y) return nil end)
GETGLOBAL R1 K4 ['check']
GETGLOBAL R2 K17 ['a']
DUPCLOSURE R3 K44 []
CALL R1 2 0
   55: for i,v in pairs(a) do assert(not v or i=='n' and v==limit) end
GETIMPORT R1 46 [pairs]
GETGLOBAL R2 K17 ['a']
CALL R1 1 3
FORGPREP_NEXT R1 L11
REMARK builtin assert/1
L8: NOT R7 R5
JUMPIF R7 L10
LOADB R7 0
JUMPXEQKS R4 K47 L10 NOT ['n']
GETGLOBAL R8 K21 ['limit']
JUMPIFEQ R5 R8 L9
LOADB R7 0 +1
L9: LOADB R7 1
L10: FASTCALL1 1 R7 L11
GETIMPORT R6 49 [assert]
CALL R6 1 0
L11: FORGLOOP R1 L8 2
REMARK allocation: table array 6
   57: a = {"álo", "\0first :-)", "alo", "then this one", "45", "and a new"}
NEWTABLE R1 0 6
LOADK R2 K50 ['álo']
LOADK R3 K51 []
LOADK R4 K52 ['alo']
LOADK R5 K53 ['then this one']
LOADK R6 K54 ['45']
LOADK R7 K55 ['and a new']
SETLIST R1 R2 6 [1]
SETGLOBAL R1 K17 ['a']
   58: table.sort(a)
GETIMPORT R1 20 [table.sort]
GETGLOBAL R2 K17 ['a']
CALL R1 1 0
   59: check(a)
GETGLOBAL R1 K4 ['check']
GETGLOBAL R2 K17 ['a']
CALL R1 1 0
   61: table.sort(a, function (x, y)
GETIMPORT R1 20 [table.sort]
GETGLOBAL R2 K17 ['a']
DUPCLOSURE R3 K56 []
CALL R1 2 0
REMARK allocation: table template 1
   68: tt = {__lt = function (a,b) return a.val < b.val end}
DUPTABLE R1 58
DUPCLOSURE R2 K59 ['__lt']
SETTABLEKS R2 R1 K57 ['__lt']
SETGLOBAL R1 K60 ['tt']
REMARK allocation: table hash 0
   69: a = {}
NEWTABLE R1 0 0
SETGLOBAL R1 K17 ['a']
   70: for i=1,10 do  a[i] = {val=math.random(100)}; setmetatable(a[i], tt); end
LOADN R3 1
LOADN R1 10
LOADN R2 1
FORNPREP R1 L14
L12: GETGLOBAL R4 K17 ['a']
REMARK allocation: table template 1
DUPTABLE R5 62
GETIMPORT R6 29 [math.random]
LOADN R7 100
CALL R6 1 1
SETTABLEKS R6 R5 K61 ['val']
SETTABLE R5 R4 R3
REMARK builtin setmetatable/2
GETGLOBAL R6 K17 ['a']
GETTABLE R5 R6 R3
GETGLOBAL R6 K60 ['tt']
FASTCALL2 61 R5 R6 L13
GETIMPORT R4 64 [setmetatable]
CALL R4 2 0
L13: FORNLOOP R1 L12
   71: table.sort(a)
L14: GETIMPORT R1 20 [table.sort]
GETGLOBAL R2 K17 ['a']
CALL R1 1 0
   72: check(a, tt.__lt)
GETGLOBAL R1 K4 ['check']
GETGLOBAL R2 K17 ['a']
GETGLOBAL R4 K60 ['tt']
GETTABLEKS R3 R4 K57 ['__lt']
CALL R1 2 0
   73: check(a)
GETGLOBAL R1 K4 ['check']
GETGLOBAL R2 K17 ['a']
CALL R1 1 0
   75: print"OK"
GETIMPORT R1 1 [print]
LOADK R2 K65 ['OK']
CALL R1 1 0
   76: 
RETURN R0 0

]====]
end