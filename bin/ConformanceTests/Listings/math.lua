--[====[Generated by CreateTests.lua v2]====]
return function()
	return [====[Function 0 (f):
REMARK builtin select/2+
   22:   if select('#', ...) == 1 then
LOADK R1 K0 ['#']
FASTCALL1 57 R1 L0
GETIMPORT R0 2 [select]
GETVARARGS R2 -1
CALL R0 -1 1
L0: JUMPXEQKN R0 K3 L1 NOT [1]
   23:     return (...)
GETVARARGS R0 1
RETURN R0 1
   25:     return "***"
L1: LOADK R0 K4 ['***']
RETURN R0 1

Function 1 (eq):
   66:   if not limit then limit = 10E-10 end
JUMPIF R2 L0
LOADK R2 K0 [1.0000000000000001e-09]
REMARK builtin math.abs/1
   67:   return math.abs(a-b) <= limit
L0: SUB R5 R0 R1
FASTCALL1 2 R5 L1
GETIMPORT R4 3 [math.abs]
CALL R4 1 1
L1: JUMPIFLE R4 R2 L2
LOADB R3 0 +1
L2: LOADB R3 1
L3: RETURN R3 1

Function 2 (testbit):
  100:   return a/2^n % 2 >= 1
LOADN R6 2
POW R5 R6 R1
DIV R4 R0 R5
MODK R3 R4 K0 [2]
LOADN R4 1
JUMPIFLE R4 R3 L0
LOADB R2 0 +1
L0: LOADB R2 1
L1: RETURN R2 1

Function 3 (??):
  184:   assert(not pcall(function () a[NaN] = 1 end))
GETUPVAL R0 0
GETUPVAL R1 1
LOADN R2 1
SETTABLE R2 R0 R1
RETURN R0 0

Function 4 (??):
  187:   assert(not pcall(function () a[NaN] = 1 end))
GETUPVAL R0 0
GETUPVAL R1 1
LOADN R2 1
SETTABLE R2 R0 R1
RETURN R0 0

Function 5 (??):
    3: print("testing numbers and math lib")
GETIMPORT R0 1 [print]
LOADK R1 K2 ['testing numbers and math lib']
CALL R0 1 0
REMARK builtin assert/1
    7:   assert(a+b == 5 and -b == -3 and b+"2" == 5 and "10"-c == 0)
LOADB R1 0
LOADK R3 K3 ['2']
LOADK R4 K4 [' 3e0 ']
ADD R2 R3 R4
JUMPXEQKN R2 K5 L1 NOT [5]
LOADB R1 0
LOADK R3 K4 [' 3e0 ']
MINUS R2 R3
JUMPXEQKN R2 K6 L1 NOT [-3]
LOADB R1 0
LOADK R3 K4 [' 3e0 ']
LOADK R4 K3 ['2']
ADD R2 R3 R4
JUMPXEQKN R2 K5 L1 NOT [5]
LOADK R3 K7 ['10']
LOADK R4 K8 [' 10  ']
SUB R2 R3 R4
JUMPXEQKN R2 K9 L0 [0]
LOADB R1 0 +1
L0: LOADB R1 1
L1: FASTCALL1 1 R1 L2
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
    8:   assert(type(a) == 'string' and type(b) == 'string' and type(c) == 'string')
L2: LOADB R1 0
REMARK builtin type/1
LOADK R3 K3 ['2']
FASTCALL1 40 R3 L3
GETIMPORT R2 13 [type]
CALL R2 1 1
L3: JUMPXEQKS R2 K14 L7 NOT ['string']
LOADB R1 0
REMARK builtin type/1
LOADK R3 K4 [' 3e0 ']
FASTCALL1 40 R3 L4
GETIMPORT R2 13 [type]
CALL R2 1 1
L4: JUMPXEQKS R2 K14 L7 NOT ['string']
REMARK builtin type/1
LOADK R3 K8 [' 10  ']
FASTCALL1 40 R3 L5
GETIMPORT R2 13 [type]
CALL R2 1 1
L5: JUMPXEQKS R2 K14 L6 ['string']
LOADB R1 0 +1
L6: LOADB R1 1
L7: FASTCALL1 1 R1 L8
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
    9:   assert(a == "2" and b == " 3e0 " and c == " 10  " and -c == -"  10 ")
L8: LOADK R3 K8 [' 10  ']
MINUS R2 R3
LOADK R4 K15 ['  10 ']
MINUS R3 R4
JUMPIFEQ R2 R3 L9
LOADB R1 0 +1
L9: LOADB R1 1
L10: FASTCALL1 1 R1 L11
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   10:   assert(c%a == 0 and a^b == 8)
L11: LOADB R1 0
LOADK R3 K8 [' 10  ']
LOADK R4 K3 ['2']
MOD R2 R3 R4
JUMPXEQKN R2 K9 L13 NOT [0]
LOADK R3 K3 ['2']
LOADK R4 K4 [' 3e0 ']
POW R2 R3 R4
JUMPXEQKN R2 K16 L12 [8]
LOADB R1 0 +1
L12: LOADB R1 1
L13: FASTCALL1 1 R1 L14
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin math.modf/1
   15:   local a,b = math.modf(3.5)
L14: LOADK R1 K17 [3.5]
FASTCALL1 20 R1 L15
GETIMPORT R0 20 [math.modf]
CALL R0 1 2
REMARK builtin assert/1
   16:   assert(a == 3 and b == 0.5)
L15: LOADB R3 0
JUMPXEQKN R0 K21 L17 NOT [3]
JUMPXEQKN R1 K22 L16 [0.5]
LOADB R3 0 +1
L16: LOADB R3 1
L17: FASTCALL1 1 R3 L18
GETIMPORT R2 11 [assert]
CALL R2 1 0
REMARK builtin assert/1
   17:   assert(math.huge > 10e30)
L18: GETIMPORT R4 24 [math.huge]
LOADK R5 K25 [9.9999999999999996e+30]
JUMPIFLT R5 R4 L19
LOADB R3 0 +1
L19: LOADB R3 1
L20: FASTCALL1 1 R3 L21
GETIMPORT R2 11 [assert]
CALL R2 1 0
REMARK builtin assert/1
   18:   assert(-math.huge < -10e30)
L21: GETIMPORT R5 24 [math.huge]
MINUS R4 R5
LOADK R5 K26 [-9.9999999999999996e+30]
JUMPIFLT R4 R5 L22
LOADB R3 0 +1
L22: LOADB R3 1
L23: FASTCALL1 1 R3 L24
GETIMPORT R2 11 [assert]
CALL R2 1 0
   21: function f(...)
L24: DUPCLOSURE R0 K27 ['f']
SETGLOBAL R0 K28 ['f']
REMARK builtin assert/1
   29: assert(pcall(tonumber) == false)
GETIMPORT R2 30 [pcall]
GETIMPORT R3 32 [tonumber]
CALL R2 1 1
JUMPXEQKB R2 0 L25
LOADB R1 0 +1
L25: LOADB R1 1
L26: FASTCALL1 1 R1 L27
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
REMARK builtin tonumber/1
REMARK allocation: table hash 0
   30: assert(tonumber{} == nil)
L27: NEWTABLE R3 0 0
FASTCALL1 62 R3 L28
GETIMPORT R2 32 [tonumber]
CALL R2 1 1
L28: JUMPXEQKNIL R2 L29
LOADB R1 0 +1
L29: LOADB R1 1
L30: FASTCALL1 1 R1 L31
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   31: assert(tonumber'+0.01' == 1/100 and tonumber'+.01' == 0.01 and
L31: LOADB R1 0
REMARK builtin tonumber/1
LOADK R3 K33 ['+0.01']
FASTCALL1 62 R3 L32
GETIMPORT R2 32 [tonumber]
CALL R2 1 1
L32: JUMPXEQKN R2 K34 L38 NOT [0.01]
LOADB R1 0
REMARK builtin tonumber/1
LOADK R3 K35 ['+.01']
FASTCALL1 62 R3 L33
GETIMPORT R2 32 [tonumber]
CALL R2 1 1
L33: JUMPXEQKN R2 K34 L38 NOT [0.01]
LOADB R1 0
REMARK builtin tonumber/1
   32:        tonumber'.01' == 0.01    and tonumber'-1.' == -1 and
LOADK R3 K36 ['.01']
FASTCALL1 62 R3 L34
GETIMPORT R2 32 [tonumber]
CALL R2 1 1
L34: JUMPXEQKN R2 K34 L38 NOT [0.01]
LOADB R1 0
REMARK builtin tonumber/1
LOADK R3 K37 ['-1.']
FASTCALL1 62 R3 L35
GETIMPORT R2 32 [tonumber]
CALL R2 1 1
L35: JUMPXEQKN R2 K38 L38 NOT [-1]
REMARK builtin tonumber/1
   33:        tonumber'+1.' == 1)
LOADK R3 K39 ['+1.']
FASTCALL1 62 R3 L36
GETIMPORT R2 32 [tonumber]
CALL R2 1 1
L36: JUMPXEQKN R2 K40 L37 [1]
LOADB R1 0 +1
L37: LOADB R1 1
L38: FASTCALL1 1 R1 L39
   31: assert(tonumber'+0.01' == 1/100 and tonumber'+.01' == 0.01 and
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   34: assert(tonumber'+ 0.01' == nil and tonumber'+.e1' == nil and
L39: LOADB R1 0
REMARK builtin tonumber/1
LOADK R3 K41 ['+ 0.01']
FASTCALL1 62 R3 L40
GETIMPORT R2 32 [tonumber]
CALL R2 1 1
L40: JUMPXEQKNIL R2 L46 NOT
LOADB R1 0
REMARK builtin tonumber/1
LOADK R3 K42 ['+.e1']
FASTCALL1 62 R3 L41
GETIMPORT R2 32 [tonumber]
CALL R2 1 1
L41: JUMPXEQKNIL R2 L46 NOT
LOADB R1 0
REMARK builtin tonumber/1
   35:        tonumber'1e' == nil     and tonumber'1.0e+' == nil and
LOADK R3 K43 ['1e']
FASTCALL1 62 R3 L42
GETIMPORT R2 32 [tonumber]
CALL R2 1 1
L42: JUMPXEQKNIL R2 L46 NOT
LOADB R1 0
REMARK builtin tonumber/1
LOADK R3 K44 ['1.0e+']
FASTCALL1 62 R3 L43
GETIMPORT R2 32 [tonumber]
CALL R2 1 1
L43: JUMPXEQKNIL R2 L46 NOT
REMARK builtin tonumber/1
   36:        tonumber'.' == nil)
LOADK R3 K45 ['.']
FASTCALL1 62 R3 L44
GETIMPORT R2 32 [tonumber]
CALL R2 1 1
L44: JUMPXEQKNIL R2 L45
LOADB R1 0 +1
L45: LOADB R1 1
L46: FASTCALL1 1 R1 L47
   34: assert(tonumber'+ 0.01' == nil and tonumber'+.e1' == nil and
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
REMARK builtin tonumber/1
   37: assert(tonumber('-12') == -10-2)
L47: LOADK R3 K46 ['-12']
FASTCALL1 62 R3 L48
GETIMPORT R2 32 [tonumber]
CALL R2 1 1
L48: JUMPXEQKN R2 K47 L49 [-12]
LOADB R1 0 +1
L49: LOADB R1 1
L50: FASTCALL1 1 R1 L51
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
REMARK builtin tonumber/1
   38: assert(tonumber('-1.2e2') == - - -120)
L51: LOADK R3 K48 ['-1.2e2']
FASTCALL1 62 R3 L52
GETIMPORT R2 32 [tonumber]
CALL R2 1 1
L52: JUMPXEQKN R2 K49 L53 [-120]
LOADB R1 0 +1
L53: LOADB R1 1
L54: FASTCALL1 1 R1 L55
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   39: assert(f(tonumber('1  a')) == nil)
L55: GETGLOBAL R2 K28 ['f']
REMARK builtin tonumber/1
LOADK R4 K50 ['1  a']
FASTCALL1 62 R4 L56
GETIMPORT R3 32 [tonumber]
CALL R3 1 -1
L56: CALL R2 -1 1
JUMPXEQKNIL R2 L57
LOADB R1 0 +1
L57: LOADB R1 1
L58: FASTCALL1 1 R1 L59
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   40: assert(f(tonumber('e1')) == nil)
L59: GETGLOBAL R2 K28 ['f']
REMARK builtin tonumber/1
LOADK R4 K51 ['e1']
FASTCALL1 62 R4 L60
GETIMPORT R3 32 [tonumber]
CALL R3 1 -1
L60: CALL R2 -1 1
JUMPXEQKNIL R2 L61
LOADB R1 0 +1
L61: LOADB R1 1
L62: FASTCALL1 1 R1 L63
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   41: assert(f(tonumber('e  1')) == nil)
L63: GETGLOBAL R2 K28 ['f']
REMARK builtin tonumber/1
LOADK R4 K52 ['e  1']
FASTCALL1 62 R4 L64
GETIMPORT R3 32 [tonumber]
CALL R3 1 -1
L64: CALL R2 -1 1
JUMPXEQKNIL R2 L65
LOADB R1 0 +1
L65: LOADB R1 1
L66: FASTCALL1 1 R1 L67
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   42: assert(f(tonumber(' 3.4.5 ')) == nil)
L67: GETGLOBAL R2 K28 ['f']
REMARK builtin tonumber/1
LOADK R4 K53 [' 3.4.5 ']
FASTCALL1 62 R4 L68
GETIMPORT R3 32 [tonumber]
CALL R3 1 -1
L68: CALL R2 -1 1
JUMPXEQKNIL R2 L69
LOADB R1 0 +1
L69: LOADB R1 1
L70: FASTCALL1 1 R1 L71
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   43: assert(f(tonumber('')) == nil)
L71: GETGLOBAL R2 K28 ['f']
REMARK builtin tonumber/1
LOADK R4 K54 ['']
FASTCALL1 62 R4 L72
GETIMPORT R3 32 [tonumber]
CALL R3 1 -1
L72: CALL R2 -1 1
JUMPXEQKNIL R2 L73
LOADB R1 0 +1
L73: LOADB R1 1
L74: FASTCALL1 1 R1 L75
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   44: assert(f(tonumber('', 8)) == nil)
L75: GETGLOBAL R2 K28 ['f']
REMARK builtin tonumber/2
LOADK R4 K54 ['']
FASTCALL2K 62 R4 K16 L76 [8]
LOADK R5 K16 [8]
GETIMPORT R3 32 [tonumber]
CALL R3 2 -1
L76: CALL R2 -1 1
JUMPXEQKNIL R2 L77
LOADB R1 0 +1
L77: LOADB R1 1
L78: FASTCALL1 1 R1 L79
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   45: assert(f(tonumber('  ')) == nil)
L79: GETGLOBAL R2 K28 ['f']
REMARK builtin tonumber/1
LOADK R4 K55 ['  ']
FASTCALL1 62 R4 L80
GETIMPORT R3 32 [tonumber]
CALL R3 1 -1
L80: CALL R2 -1 1
JUMPXEQKNIL R2 L81
LOADB R1 0 +1
L81: LOADB R1 1
L82: FASTCALL1 1 R1 L83
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   46: assert(f(tonumber('  ', 9)) == nil)
L83: GETGLOBAL R2 K28 ['f']
REMARK builtin tonumber/2
LOADK R4 K55 ['  ']
FASTCALL2K 62 R4 K56 L84 [9]
LOADK R5 K56 [9]
GETIMPORT R3 32 [tonumber]
CALL R3 2 -1
L84: CALL R2 -1 1
JUMPXEQKNIL R2 L85
LOADB R1 0 +1
L85: LOADB R1 1
L86: FASTCALL1 1 R1 L87
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   47: assert(f(tonumber('99', 8)) == nil)
L87: GETGLOBAL R2 K28 ['f']
REMARK builtin tonumber/2
LOADK R4 K57 ['99']
FASTCALL2K 62 R4 K16 L88 [8]
LOADK R5 K16 [8]
GETIMPORT R3 32 [tonumber]
CALL R3 2 -1
L88: CALL R2 -1 1
JUMPXEQKNIL R2 L89
LOADB R1 0 +1
L89: LOADB R1 1
L90: FASTCALL1 1 R1 L91
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
REMARK builtin tonumber/2
   48: assert(tonumber('  1010  ', 2) == 10)
L91: LOADK R3 K58 ['  1010  ']
FASTCALL2K 62 R3 K59 L92 [2]
LOADK R4 K59 [2]
GETIMPORT R2 32 [tonumber]
CALL R2 2 1
L92: JUMPXEQKN R2 K60 L93 [10]
LOADB R1 0 +1
L93: LOADB R1 1
L94: FASTCALL1 1 R1 L95
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
REMARK builtin tonumber/2
   49: assert(tonumber('10', 36) == 36)
L95: LOADK R3 K7 ['10']
FASTCALL2K 62 R3 K61 L96 [36]
LOADK R4 K61 [36]
GETIMPORT R2 32 [tonumber]
CALL R2 2 1
L96: JUMPXEQKN R2 K61 L97 [36]
LOADB R1 0 +1
L97: LOADB R1 1
L98: FASTCALL1 1 R1 L99
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
REMARK builtin tonumber/2
   52: assert(tonumber('fFfa', 15) == nil)
L99: LOADK R3 K62 ['fFfa']
FASTCALL2K 62 R3 K63 L100 [15]
LOADK R4 K63 [15]
GETIMPORT R2 32 [tonumber]
CALL R2 2 1
L100: JUMPXEQKNIL R2 L101
LOADB R1 0 +1
L101: LOADB R1 1
L102: FASTCALL1 1 R1 L103
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
REMARK builtin tonumber/2
   54: assert(tonumber(string.rep('1', 32), 2) + 1 == 2^32)
L103: GETIMPORT R4 65 [string.rep]
LOADK R5 K66 ['1']
LOADN R6 32
CALL R4 2 1
FASTCALL2K 62 R4 K59 L104 [2]
LOADK R5 K59 [2]
GETIMPORT R3 32 [tonumber]
CALL R3 2 1
L104: ADDK R2 R3 K40 [1]
JUMPXEQKN R2 K67 L105 [4294967296]
LOADB R1 0 +1
L105: LOADB R1 1
L106: FASTCALL1 1 R1 L107
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
REMARK builtin tonumber/2
   56: assert(tonumber('ffffFFFF', 16)+1 == 2^32)
L107: LOADK R4 K68 ['ffffFFFF']
FASTCALL2K 62 R4 K69 L108 [16]
LOADK R5 K69 [16]
GETIMPORT R3 32 [tonumber]
CALL R3 2 1
L108: ADDK R2 R3 K40 [1]
JUMPXEQKN R2 K67 L109 [4294967296]
LOADB R1 0 +1
L109: LOADB R1 1
L110: FASTCALL1 1 R1 L111
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   58: assert(1.1 == 1.+.1)
L111: LOADB R1 1
FASTCALL1 1 R1 L112
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   59: assert(100.0 == 1E2 and .01 == 1e-2)
L112: LOADB R1 1
FASTCALL1 1 R1 L113
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   60: assert(1111111111111111-1111111111111110== 1000.00e-03)
L113: LOADB R1 1
FASTCALL1 1 R1 L114
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   62: assert(1.1 == '1.'+'.1')
L114: LOADK R3 K70 ['1.']
LOADK R4 K71 ['.1']
ADD R2 R3 R4
JUMPXEQKN R2 K72 L115 [1.1000000000000001]
LOADB R1 0 +1
L115: LOADB R1 1
L116: FASTCALL1 1 R1 L117
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   63: assert('1111111111111111'-'1111111111111110' == tonumber"  +0.001e+3 \n\t")
L117: LOADK R3 K73 ['1111111111111111']
LOADK R4 K74 ['1111111111111110']
SUB R2 R3 R4
REMARK builtin tonumber/1
LOADK R4 K75 []
FASTCALL1 62 R4 L118
GETIMPORT R3 32 [tonumber]
CALL R3 1 1
L118: JUMPIFEQ R2 R3 L119
LOADB R1 0 +1
L119: LOADB R1 1
L120: FASTCALL1 1 R1 L121
GETIMPORT R0 11 [assert]
CALL R0 1 0
   65: function eq (a,b,limit)
L121: DUPCLOSURE R0 K76 ['eq']
SETGLOBAL R0 K77 ['eq']
REMARK builtin assert/1
   70: assert(0.1e-30 > 0.9E-31 and 0.9E30 < 0.1e31)
LOADB R1 1
FASTCALL1 1 R1 L122
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   72: assert(0.123456 > 0.123455)
L122: LOADB R1 1
FASTCALL1 1 R1 L123
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
REMARK builtin tonumber/1
   74: assert(tonumber('+1.23E30') == 1.23*10^30)
L123: LOADK R3 K78 ['+1.23E30']
FASTCALL1 62 R3 L124
GETIMPORT R2 32 [tonumber]
CALL R2 1 1
L124: JUMPXEQKN R2 K79 L125 [1.23e+30]
LOADB R1 0 +1
L125: LOADB R1 1
L126: FASTCALL1 1 R1 L127
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   77: assert(not(1<1) and (1<2) and not(2<1))
L127: LOADB R1 1
FASTCALL1 1 R1 L128
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   78: assert(not('a'<'a') and ('a'<'b') and not('b'<'a'))
L128: LOADK R3 K80 ['a']
LOADK R4 K80 ['a']
JUMPIFLT R3 R4 L129
LOADB R2 0 +1
L129: LOADB R2 1
L130: NOT R1 R2
JUMPIFNOT R1 L133
LOADB R1 0
LOADK R2 K80 ['a']
LOADK R3 K81 ['b']
JUMPIFNOTLT R2 R3 L133
LOADK R3 K81 ['b']
LOADK R4 K80 ['a']
JUMPIFLT R3 R4 L131
LOADB R2 0 +1
L131: LOADB R2 1
L132: NOT R1 R2
L133: FASTCALL1 1 R1 L134
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   79: assert((1<=1) and (1<=2) and not(2<=1))
L134: LOADB R1 1
FASTCALL1 1 R1 L135
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   80: assert(('a'<='a') and ('a'<='b') and not('b'<='a'))
L135: LOADB R1 0
LOADK R2 K80 ['a']
LOADK R3 K80 ['a']
JUMPIFNOTLE R2 R3 L138
LOADB R1 0
LOADK R2 K80 ['a']
LOADK R3 K81 ['b']
JUMPIFNOTLE R2 R3 L138
LOADK R3 K81 ['b']
LOADK R4 K80 ['a']
JUMPIFLE R3 R4 L136
LOADB R2 0 +1
L136: LOADB R2 1
L137: NOT R1 R2
L138: FASTCALL1 1 R1 L139
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   81: assert(not(1>1) and not(1>2) and (2>1))
L139: LOADB R1 1
FASTCALL1 1 R1 L140
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   82: assert(not('a'>'a') and not('a'>'b') and ('b'>'a'))
L140: LOADK R3 K80 ['a']
LOADK R4 K80 ['a']
JUMPIFLT R4 R3 L141
LOADB R2 0 +1
L141: LOADB R2 1
L142: NOT R1 R2
JUMPIFNOT R1 L146
LOADK R3 K80 ['a']
LOADK R4 K81 ['b']
JUMPIFLT R4 R3 L143
LOADB R2 0 +1
L143: LOADB R2 1
L144: NOT R1 R2
JUMPIFNOT R1 L146
LOADK R2 K81 ['b']
LOADK R3 K80 ['a']
JUMPIFLT R3 R2 L145
LOADB R1 0 +1
L145: LOADB R1 1
L146: FASTCALL1 1 R1 L147
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   83: assert((1>=1) and not(1>=2) and (2>=1))
L147: LOADB R1 1
FASTCALL1 1 R1 L148
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   84: assert(('a'>='a') and not('a'>='b') and ('b'>='a'))
L148: LOADB R1 0
LOADK R2 K80 ['a']
LOADK R3 K80 ['a']
JUMPIFNOTLE R3 R2 L152
LOADK R3 K80 ['a']
LOADK R4 K81 ['b']
JUMPIFLE R4 R3 L149
LOADB R2 0 +1
L149: LOADB R2 1
L150: NOT R1 R2
JUMPIFNOT R1 L152
LOADK R2 K81 ['b']
LOADK R3 K80 ['a']
JUMPIFLE R3 R2 L151
LOADB R1 0 +1
L151: LOADB R1 1
L152: FASTCALL1 1 R1 L153
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   87: assert(-4%3 == 2)
L153: LOADB R1 1
FASTCALL1 1 R1 L154
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   88: assert(4%-3 == -2)
L154: LOADB R1 1
FASTCALL1 1 R1 L155
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   89: assert(math.pi - math.pi % 1 == 3)
L155: GETIMPORT R3 83 [math.pi]
GETIMPORT R5 83 [math.pi]
MODK R4 R5 K40 [1]
SUB R2 R3 R4
JUMPXEQKN R2 K21 L156 [3]
LOADB R1 0 +1
L156: LOADB R1 1
L157: FASTCALL1 1 R1 L158
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   90: assert(math.pi - math.pi % 0.001 == 3.141)
L158: GETIMPORT R3 83 [math.pi]
GETIMPORT R5 83 [math.pi]
MODK R4 R5 K84 [0.001]
SUB R2 R3 R4
JUMPXEQKN R2 K85 L159 [3.141]
LOADB R1 0 +1
L159: LOADB R1 1
L160: FASTCALL1 1 R1 L161
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   94:   assert(a ~= a) -- Expect NaN
L161: LOADB R1 1
FASTCALL1 1 R1 L162
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   95:   assert(((2^53+1) % 2) == 0)
L162: LOADB R1 1
FASTCALL1 1 R1 L163
GETIMPORT R0 11 [assert]
CALL R0 1 0
REMARK builtin assert/1
   96:   assert((1234 % (2^53+1)) == 1234)
L163: LOADB R1 1
FASTCALL1 1 R1 L164
GETIMPORT R0 11 [assert]
CALL R0 1 0
   99: local function testbit(a, n)
L164: DUPCLOSURE R0 K86 ['testbit']
REMARK builtin assert/1+
  103: assert(eq(math.sin(-9.8)^2 + math.cos(-9.8)^2, 1))
GETGLOBAL R2 K77 ['eq']
REMARK builtin math.sin/1
LOADK R6 K87 [-9.8000000000000007]
FASTCALL1 24 R6 L165
GETIMPORT R5 89 [math.sin]
CALL R5 1 1
L165: POWK R4 R5 K59 [2]
REMARK builtin math.cos/1
LOADK R7 K87 [-9.8000000000000007]
FASTCALL1 9 R7 L166
GETIMPORT R6 91 [math.cos]
CALL R6 1 1
L166: POWK R5 R6 K59 [2]
ADD R3 R4 R5
LOADN R4 1
CALL R2 2 -1
FASTCALL 1 L167
GETIMPORT R1 11 [assert]
CALL R1 -1 0
REMARK builtin assert/1+
  104: assert(eq(math.tan(math.pi/4), 1))
L167: GETGLOBAL R2 K77 ['eq']
REMARK builtin math.tan/1
GETIMPORT R5 83 [math.pi]
DIVK R4 R5 K92 [4]
FASTCALL1 27 R4 L168
GETIMPORT R3 94 [math.tan]
CALL R3 1 1
L168: LOADN R4 1
CALL R2 2 -1
FASTCALL 1 L169
GETIMPORT R1 11 [assert]
CALL R1 -1 0
REMARK builtin assert/1
  105: assert(eq(math.sin(math.pi/2), 1) and eq(math.cos(math.pi/2), 0))
L169: GETGLOBAL R2 K77 ['eq']
REMARK builtin math.sin/1
GETIMPORT R5 83 [math.pi]
DIVK R4 R5 K59 [2]
FASTCALL1 24 R4 L170
GETIMPORT R3 89 [math.sin]
CALL R3 1 1
L170: LOADN R4 1
CALL R2 2 1
JUMPIFNOT R2 L172
GETGLOBAL R2 K77 ['eq']
REMARK builtin math.cos/1
GETIMPORT R5 83 [math.pi]
DIVK R4 R5 K59 [2]
FASTCALL1 9 R4 L171
GETIMPORT R3 91 [math.cos]
CALL R3 1 1
L171: LOADN R4 0
CALL R2 2 1
L172: FASTCALL1 1 R2 L173
GETIMPORT R1 11 [assert]
CALL R1 1 0
REMARK builtin assert/1
  106: assert(eq(math.atan(1), math.pi/4) and eq(math.acos(0), math.pi/2) and
L173: GETGLOBAL R2 K77 ['eq']
REMARK builtin math.atan/1
LOADN R4 1
FASTCALL1 6 R4 L174
GETIMPORT R3 96 [math.atan]
CALL R3 1 1
L174: GETIMPORT R5 83 [math.pi]
DIVK R4 R5 K92 [4]
CALL R2 2 1
JUMPIFNOT R2 L177
GETGLOBAL R2 K77 ['eq']
REMARK builtin math.acos/1
LOADN R4 0
FASTCALL1 3 R4 L175
GETIMPORT R3 98 [math.acos]
CALL R3 1 1
L175: GETIMPORT R5 83 [math.pi]
DIVK R4 R5 K59 [2]
CALL R2 2 1
JUMPIFNOT R2 L177
  107:        eq(math.asin(1), math.pi/2))
GETGLOBAL R2 K77 ['eq']
REMARK builtin math.asin/1
LOADN R4 1
FASTCALL1 4 R4 L176
GETIMPORT R3 100 [math.asin]
CALL R3 1 1
L176: GETIMPORT R5 83 [math.pi]
DIVK R4 R5 K59 [2]
CALL R2 2 1
L177: FASTCALL1 1 R2 L178
  106: assert(eq(math.atan(1), math.pi/4) and eq(math.acos(0), math.pi/2) and
GETIMPORT R1 11 [assert]
CALL R1 1 0
REMARK builtin assert/1
  108: assert(eq(math.deg(math.pi/2), 90) and eq(math.rad(90), math.pi/2))
L178: GETGLOBAL R2 K77 ['eq']
REMARK builtin math.deg/1
GETIMPORT R5 83 [math.pi]
DIVK R4 R5 K59 [2]
FASTCALL1 10 R4 L179
GETIMPORT R3 102 [math.deg]
CALL R3 1 1
L179: LOADN R4 90
CALL R2 2 1
JUMPIFNOT R2 L181
GETGLOBAL R2 K77 ['eq']
REMARK builtin math.rad/1
LOADN R4 90
FASTCALL1 22 R4 L180
GETIMPORT R3 104 [math.rad]
CALL R3 1 1
L180: GETIMPORT R5 83 [math.pi]
DIVK R4 R5 K59 [2]
CALL R2 2 1
L181: FASTCALL1 1 R2 L182
GETIMPORT R1 11 [assert]
CALL R1 1 0
REMARK builtin assert/1
REMARK builtin math.abs/1
  109: assert(math.abs(-10) == 10)
L182: LOADN R4 -10
FASTCALL1 2 R4 L183
GETIMPORT R3 106 [math.abs]
CALL R3 1 1
L183: JUMPXEQKN R3 K60 L184 [10]
LOADB R2 0 +1
L184: LOADB R2 1
L185: FASTCALL1 1 R2 L186
GETIMPORT R1 11 [assert]
CALL R1 1 0
REMARK builtin assert/1+
  110: assert(eq(math.atan2(1,0), math.pi/2))
L186: GETGLOBAL R2 K77 ['eq']
REMARK builtin math.atan2/2
LOADN R4 1
FASTCALL2K 5 R4 K9 L187 [0]
LOADK R5 K9 [0]
GETIMPORT R3 108 [math.atan2]
CALL R3 2 1
L187: GETIMPORT R5 83 [math.pi]
DIVK R4 R5 K59 [2]
CALL R2 2 -1
FASTCALL 1 L188
GETIMPORT R1 11 [assert]
CALL R1 -1 0
REMARK builtin assert/1
REMARK builtin math.ceil/1
  111: assert(math.ceil(4.5) == 5.0)
L188: LOADK R4 K109 [4.5]
FASTCALL1 7 R4 L189
GETIMPORT R3 111 [math.ceil]
CALL R3 1 1
L189: JUMPXEQKN R3 K5 L190 [5]
LOADB R2 0 +1
L190: LOADB R2 1
L191: FASTCALL1 1 R2 L192
GETIMPORT R1 11 [assert]
CALL R1 1 0
REMARK builtin assert/1
REMARK builtin math.floor/1
  112: assert(math.floor(4.5) == 4.0)
L192: LOADK R4 K109 [4.5]
FASTCALL1 12 R4 L193
GETIMPORT R3 113 [math.floor]
CALL R3 1 1
L193: JUMPXEQKN R3 K92 L194 [4]
LOADB R2 0 +1
L194: LOADB R2 1
L195: FASTCALL1 1 R2 L196
GETIMPORT R1 11 [assert]
CALL R1 1 0
REMARK builtin assert/1
  113: assert(10 % 3 == 1)
L196: LOADB R2 1
FASTCALL1 1 R2 L197
GETIMPORT R1 11 [assert]
CALL R1 1 0
REMARK builtin assert/1+
  114: assert(eq(math.sqrt(10)^2, 10))
L197: GETGLOBAL R2 K77 ['eq']
REMARK builtin math.sqrt/1
LOADN R5 10
FASTCALL1 25 R5 L198
GETIMPORT R4 115 [math.sqrt]
CALL R4 1 1
L198: POWK R3 R4 K59 [2]
LOADN R4 10
CALL R2 2 -1
FASTCALL 1 L199
GETIMPORT R1 11 [assert]
CALL R1 -1 0
REMARK builtin assert/1+
  115: assert(eq(math.log10(2), math.log(2)/math.log(10)))
L199: GETGLOBAL R2 K77 ['eq']
REMARK builtin math.log10/1
LOADN R4 2
FASTCALL1 16 R4 L200
GETIMPORT R3 117 [math.log10]
CALL R3 1 1
REMARK builtin math.log/1
L200: LOADN R6 2
FASTCALL1 17 R6 L201
GETIMPORT R5 119 [math.log]
CALL R5 1 1
REMARK builtin math.log/1
L201: LOADN R7 10
FASTCALL1 17 R7 L202
GETIMPORT R6 119 [math.log]
CALL R6 1 1
L202: DIV R4 R5 R6
CALL R2 2 -1
FASTCALL 1 L203
GETIMPORT R1 11 [assert]
CALL R1 -1 0
REMARK builtin assert/1+
  116: assert(eq(math.log(2, 2), 1))
L203: GETGLOBAL R2 K77 ['eq']
REMARK builtin math.log/2
LOADN R4 2
FASTCALL2K 17 R4 K59 L204 [2]
LOADK R5 K59 [2]
GETIMPORT R3 119 [math.log]
CALL R3 2 1
L204: LOADN R4 1
CALL R2 2 -1
FASTCALL 1 L205
GETIMPORT R1 11 [assert]
CALL R1 -1 0
REMARK builtin assert/1+
  117: assert(eq(math.log(9, 3), 2))
L205: GETGLOBAL R2 K77 ['eq']
REMARK builtin math.log/2
LOADN R4 9
FASTCALL2K 17 R4 K21 L206 [3]
LOADK R5 K21 [3]
GETIMPORT R3 119 [math.log]
CALL R3 2 1
L206: LOADN R4 2
CALL R2 2 -1
FASTCALL 1 L207
GETIMPORT R1 11 [assert]
CALL R1 -1 0
REMARK builtin assert/1+
  118: assert(eq(math.log(100, 10), 2))
L207: GETGLOBAL R2 K77 ['eq']
REMARK builtin math.log/2
LOADN R4 100
FASTCALL2K 17 R4 K60 L208 [10]
LOADK R5 K60 [10]
GETIMPORT R3 119 [math.log]
CALL R3 2 1
L208: LOADN R4 2
CALL R2 2 -1
FASTCALL 1 L209
GETIMPORT R1 11 [assert]
CALL R1 -1 0
REMARK builtin assert/1+
  119: assert(eq(math.exp(0), 1))
L209: GETGLOBAL R2 K77 ['eq']
REMARK builtin math.exp/1
LOADN R4 0
FASTCALL1 11 R4 L210
GETIMPORT R3 121 [math.exp]
CALL R3 1 1
L210: LOADN R4 1
CALL R2 2 -1
FASTCALL 1 L211
GETIMPORT R1 11 [assert]
CALL R1 -1 0
REMARK builtin assert/1+
  120: assert(eq(math.sin(10), math.sin(10%(2*math.pi))))
L211: GETGLOBAL R2 K77 ['eq']
REMARK builtin math.sin/1
LOADN R4 10
FASTCALL1 24 R4 L212
GETIMPORT R3 89 [math.sin]
CALL R3 1 1
REMARK builtin math.sin/1
L212: LOADN R6 10
LOADN R8 2
GETIMPORT R9 83 [math.pi]
MUL R7 R8 R9
MOD R5 R6 R7
FASTCALL1 24 R5 L213
GETIMPORT R4 89 [math.sin]
CALL R4 1 -1
L213: CALL R2 -1 -1
FASTCALL 1 L214
GETIMPORT R1 11 [assert]
CALL R1 -1 0
REMARK builtin math.frexp/1
  121: local v,e = math.frexp(math.pi)
L214: GETIMPORT R2 83 [math.pi]
FASTCALL1 14 R2 L215
GETIMPORT R1 123 [math.frexp]
CALL R1 1 2
REMARK builtin assert/1+
  122: assert(eq(math.ldexp(v,e), math.pi))
L215: GETGLOBAL R4 K77 ['eq']
REMARK builtin math.ldexp/2
FASTCALL2 15 R1 R2 L216
MOVE R6 R1
MOVE R7 R2
GETIMPORT R5 125 [math.ldexp]
CALL R5 2 1
L216: GETIMPORT R6 83 [math.pi]
CALL R4 2 -1
FASTCALL 1 L217
GETIMPORT R3 11 [assert]
CALL R3 -1 0
REMARK builtin assert/1+
  124: assert(eq(math.tanh(3.5), math.sinh(3.5)/math.cosh(3.5)))
L217: GETGLOBAL R4 K77 ['eq']
REMARK builtin math.tanh/1
LOADK R6 K17 [3.5]
FASTCALL1 26 R6 L218
GETIMPORT R5 127 [math.tanh]
CALL R5 1 1
REMARK builtin math.sinh/1
L218: LOADK R8 K17 [3.5]
FASTCALL1 23 R8 L219
GETIMPORT R7 129 [math.sinh]
CALL R7 1 1
REMARK builtin math.cosh/1
L219: LOADK R9 K17 [3.5]
FASTCALL1 8 R9 L220
GETIMPORT R8 131 [math.cosh]
CALL R8 1 1
L220: DIV R6 R7 R8
CALL R4 2 -1
FASTCALL 1 L221
GETIMPORT R3 11 [assert]
CALL R3 -1 0
REMARK builtin assert/1
REMARK builtin tonumber/1
  126: assert(tonumber(' 1.3e-2 ') == 1.3e-2)
L221: LOADK R6 K132 [' 1.3e-2 ']
FASTCALL1 62 R6 L222
GETIMPORT R5 32 [tonumber]
CALL R5 1 1
L222: JUMPXEQKN R5 K133 L223 [0.012999999999999999]
LOADB R4 0 +1
L223: LOADB R4 1
L224: FASTCALL1 1 R4 L225
GETIMPORT R3 11 [assert]
CALL R3 1 0
REMARK builtin assert/1
REMARK builtin tonumber/1
  127: assert(tonumber(' -1.00000000000001 ') == -1.00000000000001)
L225: LOADK R6 K134 [' -1.00000000000001 ']
FASTCALL1 62 R6 L226
GETIMPORT R5 32 [tonumber]
CALL R5 1 1
L226: JUMPXEQKN R5 K135 L227 [-1.00000000000001]
LOADB R4 0 +1
L227: LOADB R4 1
L228: FASTCALL1 1 R4 L229
GETIMPORT R3 11 [assert]
CALL R3 1 0
REMARK builtin assert/1
  131: assert(8388609 + -8388609 == 0)
L229: LOADB R4 1
FASTCALL1 1 R4 L230
GETIMPORT R3 11 [assert]
CALL R3 1 0
REMARK builtin assert/1
  132: assert(8388608 + -8388608 == 0)
L230: LOADB R4 1
FASTCALL1 1 R4 L231
GETIMPORT R3 11 [assert]
CALL R3 1 0
REMARK builtin assert/1
  133: assert(8388607 + -8388607 == 0)
L231: LOADB R4 1
FASTCALL1 1 R4 L232
GETIMPORT R3 11 [assert]
CALL R3 1 0
REMARK builtin rawget/2
  135: if rawget(_G, "_soft") then return end
L232: GETIMPORT R4 137 [_G]
FASTCALL2K 50 R4 K138 L233 ['_soft']
LOADK R5 K138 ['_soft']
GETIMPORT R3 140 [rawget]
CALL R3 2 1
L233: JUMPIFNOT R3 L234
RETURN R0 0
  137: f = "a = {"
L234: LOADK R3 K141 ['a = {']
SETGLOBAL R3 K28 ['f']
  138: i = 1
LOADN R3 1
SETGLOBAL R3 K142 ['i']
  140:   f = f .. "{" .. math.sin(i) .. ", " .. math.cos(i) .. ", " .. (i/3) .. "},\n"
L235: GETGLOBAL R4 K28 ['f']
LOADK R5 K143 ['{']
REMARK builtin math.sin/1
GETGLOBAL R13 K142 ['i']
FASTCALL1 24 R13 L236
GETIMPORT R12 89 [math.sin]
CALL R12 1 1
L236: MOVE R6 R12
LOADK R7 K144 [', ']
REMARK builtin math.cos/1
GETGLOBAL R13 K142 ['i']
FASTCALL1 9 R13 L237
GETIMPORT R12 91 [math.cos]
CALL R12 1 1
L237: MOVE R8 R12
LOADK R9 K144 [', ']
GETGLOBAL R12 K142 ['i']
DIVK R10 R12 K21 [3]
LOADK R11 K145 []
CONCAT R3 R4 R11
SETGLOBAL R3 K28 ['f']
  141:   i=i+1
GETGLOBAL R4 K142 ['i']
ADDK R3 R4 K40 [1]
SETGLOBAL R3 K142 ['i']
  142: until i > 1000
GETGLOBAL R3 K142 ['i']
LOADN R4 1000
JUMPIFLT R4 R3 L238
JUMPBACK L235
  143: f = f .. "}"
L238: GETGLOBAL R4 K28 ['f']
LOADK R5 K146 ['}']
CONCAT R3 R4 R5
SETGLOBAL R3 K28 ['f']
REMARK builtin assert/1+
  144: assert(loadstring(f))()
GETIMPORT R4 148 [loadstring]
GETGLOBAL R5 K28 ['f']
CALL R4 1 -1
FASTCALL 1 L239
GETIMPORT R3 11 [assert]
CALL R3 -1 1
L239: CALL R3 0 0
REMARK builtin assert/1+
  146: assert(eq(a[300][1], math.sin(300)))
GETGLOBAL R4 K77 ['eq']
GETGLOBAL R7 K80 ['a']
LOADN R8 300
GETTABLE R6 R7 R8
GETTABLEN R5 R6 1
REMARK builtin math.sin/1
LOADN R7 300
FASTCALL1 24 R7 L240
GETIMPORT R6 89 [math.sin]
CALL R6 1 -1
L240: CALL R4 -1 -1
FASTCALL 1 L241
GETIMPORT R3 11 [assert]
CALL R3 -1 0
REMARK builtin assert/1+
  147: assert(eq(a[600][1], math.sin(600)))
L241: GETGLOBAL R4 K77 ['eq']
GETGLOBAL R7 K80 ['a']
LOADN R8 600
GETTABLE R6 R7 R8
GETTABLEN R5 R6 1
REMARK builtin math.sin/1
LOADN R7 600
FASTCALL1 24 R7 L242
GETIMPORT R6 89 [math.sin]
CALL R6 1 -1
L242: CALL R4 -1 -1
FASTCALL 1 L243
GETIMPORT R3 11 [assert]
CALL R3 -1 0
REMARK builtin assert/1+
  148: assert(eq(a[500][2], math.cos(500)))
L243: GETGLOBAL R4 K77 ['eq']
GETGLOBAL R7 K80 ['a']
LOADN R8 500
GETTABLE R6 R7 R8
GETTABLEN R5 R6 2
REMARK builtin math.cos/1
LOADN R7 500
FASTCALL1 9 R7 L244
GETIMPORT R6 91 [math.cos]
CALL R6 1 -1
L244: CALL R4 -1 -1
FASTCALL 1 L245
GETIMPORT R3 11 [assert]
CALL R3 -1 0
REMARK builtin assert/1+
  149: assert(eq(a[800][2], math.cos(800)))
L245: GETGLOBAL R4 K77 ['eq']
GETGLOBAL R7 K80 ['a']
LOADN R8 800
GETTABLE R6 R7 R8
GETTABLEN R5 R6 2
REMARK builtin math.cos/1
LOADN R7 800
FASTCALL1 9 R7 L246
GETIMPORT R6 91 [math.cos]
CALL R6 1 -1
L246: CALL R4 -1 -1
FASTCALL 1 L247
GETIMPORT R3 11 [assert]
CALL R3 -1 0
REMARK builtin assert/1+
  150: assert(eq(a[200][3], 200/3))
L247: GETGLOBAL R4 K77 ['eq']
GETGLOBAL R7 K80 ['a']
GETTABLEN R6 R7 200
GETTABLEN R5 R6 3
LOADK R6 K149 [66.666666666666671]
CALL R4 2 -1
FASTCALL 1 L248
GETIMPORT R3 11 [assert]
CALL R3 -1 0
REMARK builtin assert/1+
  151: assert(eq(a[1000][3], 1000/3, 0.001))
L248: GETGLOBAL R4 K77 ['eq']
GETGLOBAL R7 K80 ['a']
LOADN R8 1000
GETTABLE R6 R7 R8
GETTABLEN R5 R6 3
LOADK R6 K150 [333.33333333333331]
LOADK R7 K84 [0.001]
CALL R4 3 -1
FASTCALL 1 L249
GETIMPORT R3 11 [assert]
CALL R3 -1 0
  152: print('+')
L249: GETIMPORT R3 1 [print]
LOADK R4 K151 ['+']
CALL R3 1 0
  155:   local NaN -- to avoid constant folding
LOADNIL R3
  156:   NaN = 10e500 - 10e400
LOADK R3 K152 [-nan(ind)]
REMARK builtin assert/1
  158:   assert(NaN ~= NaN)
JUMPIFNOTEQ R3 R3 L250
LOADB R5 0 +1
L250: LOADB R5 1
L251: FASTCALL1 1 R5 L252
GETIMPORT R4 11 [assert]
CALL R4 1 0
REMARK builtin assert/1
  159:   assert(not (NaN == NaN))
L252: JUMPIFEQ R3 R3 L253
LOADB R6 0 +1
L253: LOADB R6 1
L254: NOT R5 R6
FASTCALL1 1 R5 L255
GETIMPORT R4 11 [assert]
CALL R4 1 0
REMARK builtin assert/1
  161:   assert(not (NaN < NaN))
L255: JUMPIFLT R3 R3 L256
LOADB R6 0 +1
L256: LOADB R6 1
L257: NOT R5 R6
FASTCALL1 1 R5 L258
GETIMPORT R4 11 [assert]
CALL R4 1 0
REMARK builtin assert/1
  162:   assert(not (NaN <= NaN))
L258: JUMPIFLE R3 R3 L259
LOADB R6 0 +1
L259: LOADB R6 1
L260: NOT R5 R6
FASTCALL1 1 R5 L261
GETIMPORT R4 11 [assert]
CALL R4 1 0
REMARK builtin assert/1
  163:   assert(not (NaN > NaN))
L261: JUMPIFLT R3 R3 L262
LOADB R6 0 +1
L262: LOADB R6 1
L263: NOT R5 R6
FASTCALL1 1 R5 L264
GETIMPORT R4 11 [assert]
CALL R4 1 0
REMARK builtin assert/1
  164:   assert(not (NaN >= NaN))
L264: JUMPIFLE R3 R3 L265
LOADB R6 0 +1
L265: LOADB R6 1
L266: NOT R5 R6
FASTCALL1 1 R5 L267
GETIMPORT R4 11 [assert]
CALL R4 1 0
REMARK builtin assert/1
  166:   assert(not (0 == NaN))
L267: JUMPXEQKN R3 K9 L268 [0]
LOADB R6 0 +1
L268: LOADB R6 1
L269: NOT R5 R6
FASTCALL1 1 R5 L270
GETIMPORT R4 11 [assert]
CALL R4 1 0
REMARK builtin assert/1
  167:   assert(not (0 < NaN))
L270: LOADN R7 0
JUMPIFLT R7 R3 L271
LOADB R6 0 +1
L271: LOADB R6 1
L272: NOT R5 R6
FASTCALL1 1 R5 L273
GETIMPORT R4 11 [assert]
CALL R4 1 0
REMARK builtin assert/1
  168:   assert(not (0 <= NaN))
L273: LOADN R7 0
JUMPIFLE R7 R3 L274
LOADB R6 0 +1
L274: LOADB R6 1
L275: NOT R5 R6
FASTCALL1 1 R5 L276
GETIMPORT R4 11 [assert]
CALL R4 1 0
REMARK builtin assert/1
  169:   assert(not (0 > NaN))
L276: LOADN R7 0
JUMPIFLT R3 R7 L277
LOADB R6 0 +1
L277: LOADB R6 1
L278: NOT R5 R6
FASTCALL1 1 R5 L279
GETIMPORT R4 11 [assert]
CALL R4 1 0
REMARK builtin assert/1
  170:   assert(not (0 >= NaN))
L279: LOADN R7 0
JUMPIFLE R3 R7 L280
LOADB R6 0 +1
L280: LOADB R6 1
L281: NOT R5 R6
FASTCALL1 1 R5 L282
GETIMPORT R4 11 [assert]
CALL R4 1 0
REMARK builtin assert/1
  172:   assert(not (NaN == 0))
L282: JUMPXEQKN R3 K9 L283 [0]
LOADB R6 0 +1
L283: LOADB R6 1
L284: NOT R5 R6
FASTCALL1 1 R5 L285
GETIMPORT R4 11 [assert]
CALL R4 1 0
REMARK builtin assert/1
  173:   assert(not (NaN < 0))
L285: LOADN R7 0
JUMPIFLT R3 R7 L286
LOADB R6 0 +1
L286: LOADB R6 1
L287: NOT R5 R6
FASTCALL1 1 R5 L288
GETIMPORT R4 11 [assert]
CALL R4 1 0
REMARK builtin assert/1
  174:   assert(not (NaN <= 0))
L288: LOADN R7 0
JUMPIFLE R3 R7 L289
LOADB R6 0 +1
L289: LOADB R6 1
L290: NOT R5 R6
FASTCALL1 1 R5 L291
GETIMPORT R4 11 [assert]
CALL R4 1 0
REMARK builtin assert/1
  175:   assert(not (NaN > 0))
L291: LOADN R7 0
JUMPIFLT R7 R3 L292
LOADB R6 0 +1
L292: LOADB R6 1
L293: NOT R5 R6
FASTCALL1 1 R5 L294
GETIMPORT R4 11 [assert]
CALL R4 1 0
REMARK builtin assert/1
  176:   assert(not (NaN >= 0))
L294: LOADN R7 0
JUMPIFLE R7 R3 L295
LOADB R6 0 +1
L295: LOADB R6 1
L296: NOT R5 R6
FASTCALL1 1 R5 L297
GETIMPORT R4 11 [assert]
CALL R4 1 0
REMARK builtin assert/1
  178:   assert(if NaN < 0 then false else true)
L297: LOADN R6 0
JUMPIFNOTLT R3 R6 L298
LOADB R5 0
JUMP L299
L298: LOADB R5 1
L299: FASTCALL1 1 R5 L300
GETIMPORT R4 11 [assert]
CALL R4 1 0
REMARK builtin assert/1
  179:   assert(if NaN <= 0 then false else true)
L300: LOADN R6 0
JUMPIFNOTLE R3 R6 L301
LOADB R5 0
JUMP L302
L301: LOADB R5 1
L302: FASTCALL1 1 R5 L303
GETIMPORT R4 11 [assert]
CALL R4 1 0
REMARK builtin assert/1
  180:   assert(if NaN > 0 then false else true)
L303: LOADN R6 0
JUMPIFNOTLT R6 R3 L304
LOADB R5 0
JUMP L305
L304: LOADB R5 1
L305: FASTCALL1 1 R5 L306
GETIMPORT R4 11 [assert]
CALL R4 1 0
REMARK builtin assert/1
  181:   assert(if NaN >= 0 then false else true)
L306: LOADN R6 0
JUMPIFNOTLE R6 R3 L307
LOADB R5 0
JUMP L308
L307: LOADB R5 1
L308: FASTCALL1 1 R5 L309
GETIMPORT R4 11 [assert]
CALL R4 1 0
REMARK allocation: table hash 0
  183:   local a = {}
L309: NEWTABLE R4 0 1
REMARK builtin assert/1
  184:   assert(not pcall(function () a[NaN] = 1 end))
GETIMPORT R7 30 [pcall]
REMARK allocation: closure with 2 upvalues
NEWCLOSURE R8 P3
CAPTURE VAL R4
CAPTURE REF R3
CALL R7 1 1
NOT R6 R7
FASTCALL1 1 R6 L310
GETIMPORT R5 11 [assert]
CALL R5 1 0
REMARK builtin assert/1
  185:   assert(a[NaN] == nil)
L310: GETTABLE R7 R4 R3
JUMPXEQKNIL R7 L311
LOADB R6 0 +1
L311: LOADB R6 1
L312: FASTCALL1 1 R6 L313
GETIMPORT R5 11 [assert]
CALL R5 1 0
  186:   a[1] = 1
L313: LOADN R5 1
SETTABLEN R5 R4 1
REMARK builtin assert/1
  187:   assert(not pcall(function () a[NaN] = 1 end))
GETIMPORT R7 30 [pcall]
REMARK allocation: closure with 2 upvalues
NEWCLOSURE R8 P4
CAPTURE VAL R4
CAPTURE REF R3
CALL R7 1 1
NOT R6 R7
FASTCALL1 1 R6 L314
GETIMPORT R5 11 [assert]
CALL R5 1 0
REMARK builtin assert/1
  188:   assert(a[NaN] == nil)
L314: GETTABLE R7 R4 R3
JUMPXEQKNIL R7 L315
LOADB R6 0 +1
L315: LOADB R6 1
L316: FASTCALL1 1 R6 L317
GETIMPORT R5 11 [assert]
CALL R5 1 0
L317: CLOSEUPVALS R3
  194: a = nil
LOADNIL R3
SETGLOBAL R3 K80 ['a']
REMARK builtin assert/1
  199: assert(a*b == 200 and a+b == 30 and a-b == -10 and a/b == 0.5 and -b == -20)
LOADB R4 0
LOADK R6 K7 ['10']
LOADK R7 K153 ['20']
MUL R5 R6 R7
JUMPXEQKN R5 K154 L319 NOT [200]
LOADB R4 0
LOADK R6 K7 ['10']
LOADK R7 K153 ['20']
ADD R5 R6 R7
JUMPXEQKN R5 K155 L319 NOT [30]
LOADB R4 0
LOADK R6 K7 ['10']
LOADK R7 K153 ['20']
SUB R5 R6 R7
JUMPXEQKN R5 K156 L319 NOT [-10]
LOADB R4 0
LOADK R6 K7 ['10']
LOADK R7 K153 ['20']
DIV R5 R6 R7
JUMPXEQKN R5 K22 L319 NOT [0.5]
LOADK R6 K153 ['20']
MINUS R5 R6
JUMPXEQKN R5 K157 L318 [-20]
LOADB R4 0 +1
L318: LOADB R4 1
L319: FASTCALL1 1 R4 L320
GETIMPORT R3 11 [assert]
CALL R3 1 0
REMARK builtin assert/1
  200: assert(a == '10' and b == '20')
L320: LOADB R4 1
FASTCALL1 1 R4 L321
GETIMPORT R3 11 [assert]
CALL R3 1 0
  203: math.randomseed(0)
L321: GETIMPORT R3 159 [math.randomseed]
LOADN R4 0
CALL R3 1 0
  205: local i = 0
LOADN R3 0
  206: local Max = 0
LOADN R4 0
  207: local Min = 2
LOADN R5 2
  209:   local t = math.random()
L322: GETIMPORT R6 161 [math.random]
CALL R6 0 1
REMARK builtin math.max/2
  210:   Max = math.max(Max, t)
FASTCALL2 18 R4 R6 L323
MOVE R8 R4
MOVE R9 R6
GETIMPORT R7 163 [math.max]
CALL R7 2 1
L323: MOVE R4 R7
REMARK builtin math.min/2
  211:   Min = math.min(Min, t)
FASTCALL2 19 R5 R6 L324
MOVE R8 R5
MOVE R9 R6
GETIMPORT R7 165 [math.min]
CALL R7 2 1
L324: MOVE R5 R7
  212:   i=i+1
ADDK R3 R3 K40 [1]
  213:   flag = eq(Max, 1, 0.001) and eq(Min, 0, 0.001)
GETGLOBAL R7 K77 ['eq']
MOVE R8 R4
LOADN R9 1
LOADK R10 K84 [0.001]
CALL R7 3 1
JUMPIFNOT R7 L325
GETGLOBAL R7 K77 ['eq']
MOVE R8 R5
LOADN R9 0
LOADK R10 K84 [0.001]
CALL R7 3 1
L325: SETGLOBAL R7 K166 ['flag']
  214: until flag or i>10000
GETGLOBAL R7 K166 ['flag']
JUMPIF R7 L326
LOADN R7 10000
JUMPIFLT R7 R3 L326
JUMPBACK L322
REMARK builtin assert/1
  215: assert(0 <= Min and Max<1)
L326: LOADB R7 0
LOADN R8 0
JUMPIFNOTLE R8 R5 L328
LOADN R8 1
JUMPIFLT R4 R8 L327
LOADB R7 0 +1
L327: LOADB R7 1
L328: FASTCALL1 1 R7 L329
GETIMPORT R6 11 [assert]
CALL R6 1 0
REMARK builtin assert/1
  216: assert(flag);
L329: GETGLOBAL R7 K166 ['flag']
FASTCALL1 1 R7 L330
GETIMPORT R6 11 [assert]
CALL R6 1 0
  218: for i=1,10 do
L330: LOADN R8 1
LOADN R6 10
LOADN R7 1
FORNPREP R6 L335
  219:   local t = math.random(5)
L331: GETIMPORT R9 161 [math.random]
LOADN R10 5
CALL R9 1 1
REMARK builtin assert/1
  220:   assert(1 <= t and t <= 5)
LOADB R11 0
LOADN R12 1
JUMPIFNOTLE R12 R9 L333
LOADN R12 5
JUMPIFLE R9 R12 L332
LOADB R11 0 +1
L332: LOADB R11 1
L333: FASTCALL1 1 R11 L334
GETIMPORT R10 11 [assert]
CALL R10 1 0
  218: for i=1,10 do
L334: FORNLOOP R6 L331
  223: i = 0
L335: LOADN R3 0
  224: Max = -200
LOADN R4 -200
  225: Min = 200
LOADN R5 200
  227:   local t = math.random(-10,0)
L336: GETIMPORT R6 161 [math.random]
LOADN R7 -10
LOADN R8 0
CALL R6 2 1
REMARK builtin math.max/2
  228:   Max = math.max(Max, t)
FASTCALL2 18 R4 R6 L337
MOVE R8 R4
MOVE R9 R6
GETIMPORT R7 163 [math.max]
CALL R7 2 1
L337: MOVE R4 R7
REMARK builtin math.min/2
  229:   Min = math.min(Min, t)
FASTCALL2 19 R5 R6 L338
MOVE R8 R5
MOVE R9 R6
GETIMPORT R7 165 [math.min]
CALL R7 2 1
L338: MOVE R5 R7
  230:   i=i+1
ADDK R3 R3 K40 [1]
  231:   flag = (Max == 0 and Min == -10)
LOADB R7 0
JUMPXEQKN R4 K9 L340 NOT [0]
JUMPXEQKN R5 K156 L339 [-10]
LOADB R7 0 +1
L339: LOADB R7 1
L340: SETGLOBAL R7 K166 ['flag']
  232: until flag or i>10000
GETGLOBAL R7 K166 ['flag']
JUMPIF R7 L341
LOADN R7 10000
JUMPIFLT R7 R3 L341
JUMPBACK L336
REMARK builtin assert/1
  233: assert(-10 <= Min and Max<=0)
L341: LOADB R7 0
LOADN R8 -10
JUMPIFNOTLE R8 R5 L343
LOADN R8 0
JUMPIFLE R4 R8 L342
LOADB R7 0 +1
L342: LOADB R7 1
L343: FASTCALL1 1 R7 L344
GETIMPORT R6 11 [assert]
CALL R6 1 0
REMARK builtin assert/1
  234: assert(flag);
L344: GETGLOBAL R7 K166 ['flag']
FASTCALL1 1 R7 L345
GETIMPORT R6 11 [assert]
CALL R6 1 0
REMARK builtin assert/1+
  236: assert(select(2, pcall(math.random, 1, 2, 3)):match("wrong number of arguments"))
L345: GETIMPORT R7 168 [select]
LOADN R8 2
GETIMPORT R9 30 [pcall]
GETIMPORT R10 161 [math.random]
LOADN R11 1
LOADN R12 2
LOADN R13 3
CALL R9 4 -1
CALL R7 -1 1
LOADK R9 K169 ['wrong number of arguments']
NAMECALL R7 R7 K170 ['match']
CALL R7 2 -1
FASTCALL 1 L346
GETIMPORT R6 11 [assert]
CALL R6 -1 0
REMARK builtin assert/1
REMARK builtin math.min/1
  239: assert(math.min(1) == 1)
L346: LOADN R9 1
FASTCALL1 19 R9 L347
GETIMPORT R8 165 [math.min]
CALL R8 1 1
L347: JUMPXEQKN R8 K40 L348 [1]
LOADB R7 0 +1
L348: LOADB R7 1
L349: FASTCALL1 1 R7 L350
GETIMPORT R6 11 [assert]
CALL R6 1 0
REMARK builtin assert/1
REMARK builtin math.min/2
  240: assert(math.min(1, 2) == 1)
L350: LOADN R9 1
FASTCALL2K 19 R9 K59 L351 [2]
LOADK R10 K59 [2]
GETIMPORT R8 165 [math.min]
CALL R8 2 1
L351: JUMPXEQKN R8 K40 L352 [1]
LOADB R7 0 +1
L352: LOADB R7 1
L353: FASTCALL1 1 R7 L354
GETIMPORT R6 11 [assert]
CALL R6 1 0
REMARK builtin assert/1
REMARK builtin math.min/3
  241: assert(math.min(1, 2, -1) == -1)
L354: LOADN R9 1
LOADN R10 2
LOADN R11 -1
FASTCALL 19 L355
GETIMPORT R8 165 [math.min]
CALL R8 3 1
L355: JUMPXEQKN R8 K38 L356 [-1]
LOADB R7 0 +1
L356: LOADB R7 1
L357: FASTCALL1 1 R7 L358
GETIMPORT R6 11 [assert]
CALL R6 1 0
REMARK builtin assert/1
REMARK builtin math.min/3
  242: assert(math.min(1, -1, 2) == -1)
L358: LOADN R9 1
LOADN R10 -1
LOADN R11 2
FASTCALL 19 L359
GETIMPORT R8 165 [math.min]
CALL R8 3 1
L359: JUMPXEQKN R8 K38 L360 [-1]
LOADB R7 0 +1
L360: LOADB R7 1
L361: FASTCALL1 1 R7 L362
GETIMPORT R6 11 [assert]
CALL R6 1 0
REMARK builtin assert/1
REMARK builtin math.max/1
  243: assert(math.max(1) == 1)
L362: LOADN R9 1
FASTCALL1 18 R9 L363
GETIMPORT R8 163 [math.max]
CALL R8 1 1
L363: JUMPXEQKN R8 K40 L364 [1]
LOADB R7 0 +1
L364: LOADB R7 1
L365: FASTCALL1 1 R7 L366
GETIMPORT R6 11 [assert]
CALL R6 1 0
REMARK builtin assert/1
REMARK builtin math.max/2
  244: assert(math.max(1, 2) == 2)
L366: LOADN R9 1
FASTCALL2K 18 R9 K59 L367 [2]
LOADK R10 K59 [2]
GETIMPORT R8 163 [math.max]
CALL R8 2 1
L367: JUMPXEQKN R8 K59 L368 [2]
LOADB R7 0 +1
L368: LOADB R7 1
L369: FASTCALL1 1 R7 L370
GETIMPORT R6 11 [assert]
CALL R6 1 0
REMARK builtin assert/1
REMARK builtin math.max/3
  245: assert(math.max(1, 2, -1) == 2)
L370: LOADN R9 1
LOADN R10 2
LOADN R11 -1
FASTCALL 18 L371
GETIMPORT R8 163 [math.max]
CALL R8 3 1
L371: JUMPXEQKN R8 K59 L372 [2]
LOADB R7 0 +1
L372: LOADB R7 1
L373: FASTCALL1 1 R7 L374
GETIMPORT R6 11 [assert]
CALL R6 1 0
REMARK builtin assert/1
REMARK builtin math.max/3
  246: assert(math.max(1, -1, 2) == 2)
L374: LOADN R9 1
LOADN R10 -1
LOADN R11 2
FASTCALL 18 L375
GETIMPORT R8 163 [math.max]
CALL R8 3 1
L375: JUMPXEQKN R8 K59 L376 [2]
LOADB R7 0 +1
L376: LOADB R7 1
L377: FASTCALL1 1 R7 L378
GETIMPORT R6 11 [assert]
CALL R6 1 0
REMARK builtin assert/1
  249: assert(math.noise(0.5) == 0)
L378: GETIMPORT R8 172 [math.noise]
LOADK R9 K22 [0.5]
CALL R8 1 1
JUMPXEQKN R8 K9 L379 [0]
LOADB R7 0 +1
L379: LOADB R7 1
L380: FASTCALL1 1 R7 L381
GETIMPORT R6 11 [assert]
CALL R6 1 0
REMARK builtin assert/1
  250: assert(math.noise(0.5, 0.5) == -0.25)
L381: GETIMPORT R8 172 [math.noise]
LOADK R9 K22 [0.5]
LOADK R10 K22 [0.5]
CALL R8 2 1
JUMPXEQKN R8 K173 L382 [-0.25]
LOADB R7 0 +1
L382: LOADB R7 1
L383: FASTCALL1 1 R7 L384
GETIMPORT R6 11 [assert]
CALL R6 1 0
REMARK builtin assert/1
  251: assert(math.noise(0.5, 0.5, -0.5) == 0.125)
L384: GETIMPORT R8 172 [math.noise]
LOADK R9 K22 [0.5]
LOADK R10 K22 [0.5]
LOADK R11 K174 [-0.5]
CALL R8 3 1
JUMPXEQKN R8 K175 L385 [0.125]
LOADB R7 0 +1
L385: LOADB R7 1
L386: FASTCALL1 1 R7 L387
GETIMPORT R6 11 [assert]
CALL R6 1 0
  253: local inf = math.huge * 2
L387: GETIMPORT R7 24 [math.huge]
MULK R6 R7 K59 [2]
REMARK builtin assert/1
REMARK builtin math.sign/1
  257: assert(math.sign(0) == 0)
LOADN R10 0
FASTCALL1 47 R10 L388
GETIMPORT R9 177 [math.sign]
CALL R9 1 1
L388: JUMPXEQKN R9 K9 L389 [0]
LOADB R8 0 +1
L389: LOADB R8 1
L390: FASTCALL1 1 R8 L391
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.sign/1
  258: assert(math.sign(42) == 1)
L391: LOADN R10 42
FASTCALL1 47 R10 L392
GETIMPORT R9 177 [math.sign]
CALL R9 1 1
L392: JUMPXEQKN R9 K40 L393 [1]
LOADB R8 0 +1
L393: LOADB R8 1
L394: FASTCALL1 1 R8 L395
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.sign/1
  259: assert(math.sign(-42) == -1)
L395: LOADN R10 -42
FASTCALL1 47 R10 L396
GETIMPORT R9 177 [math.sign]
CALL R9 1 1
L396: JUMPXEQKN R9 K38 L397 [-1]
LOADB R8 0 +1
L397: LOADB R8 1
L398: FASTCALL1 1 R8 L399
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.sign/1
  260: assert(math.sign(inf) == 1)
L399: FASTCALL1 47 R6 L400
MOVE R10 R6
GETIMPORT R9 177 [math.sign]
CALL R9 1 1
L400: JUMPXEQKN R9 K40 L401 [1]
LOADB R8 0 +1
L401: LOADB R8 1
L402: FASTCALL1 1 R8 L403
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.sign/1
  261: assert(math.sign(-inf) == -1)
L403: MINUS R10 R6
FASTCALL1 47 R10 L404
GETIMPORT R9 177 [math.sign]
CALL R9 1 1
L404: JUMPXEQKN R9 K38 L405 [-1]
LOADB R8 0 +1
L405: LOADB R8 1
L406: FASTCALL1 1 R8 L407
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.sign/1
  262: assert(math.sign(nan) == 0)
L407: LOADK R10 K152 [-nan(ind)]
FASTCALL1 47 R10 L408
GETIMPORT R9 177 [math.sign]
CALL R9 1 1
L408: JUMPXEQKN R9 K9 L409 [0]
LOADB R8 0 +1
L409: LOADB R8 1
L410: FASTCALL1 1 R8 L411
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.clamp/3
  265: assert(math.clamp(-1, 0, 1) == 0)
L411: LOADN R10 -1
LOADN R11 0
LOADN R12 1
FASTCALL 46 L412
GETIMPORT R9 179 [math.clamp]
CALL R9 3 1
L412: JUMPXEQKN R9 K9 L413 [0]
LOADB R8 0 +1
L413: LOADB R8 1
L414: FASTCALL1 1 R8 L415
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.clamp/3
  266: assert(math.clamp(0.5, 0, 1) == 0.5)
L415: LOADK R10 K22 [0.5]
LOADN R11 0
LOADN R12 1
FASTCALL 46 L416
GETIMPORT R9 179 [math.clamp]
CALL R9 3 1
L416: JUMPXEQKN R9 K22 L417 [0.5]
LOADB R8 0 +1
L417: LOADB R8 1
L418: FASTCALL1 1 R8 L419
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.clamp/3
  267: assert(math.clamp(2, 0, 1) == 1)
L419: LOADN R10 2
LOADN R11 0
LOADN R12 1
FASTCALL 46 L420
GETIMPORT R9 179 [math.clamp]
CALL R9 3 1
L420: JUMPXEQKN R9 K40 L421 [1]
LOADB R8 0 +1
L421: LOADB R8 1
L422: FASTCALL1 1 R8 L423
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.clamp/3
  268: assert(math.clamp(4, 0, 0) == 0)
L423: LOADN R10 4
LOADN R11 0
LOADN R12 0
FASTCALL 46 L424
GETIMPORT R9 179 [math.clamp]
CALL R9 3 1
L424: JUMPXEQKN R9 K9 L425 [0]
LOADB R8 0 +1
L425: LOADB R8 1
L426: FASTCALL1 1 R8 L427
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.round/1
  271: assert(math.round(0) == 0)
L427: LOADN R10 0
FASTCALL1 48 R10 L428
GETIMPORT R9 181 [math.round]
CALL R9 1 1
L428: JUMPXEQKN R9 K9 L429 [0]
LOADB R8 0 +1
L429: LOADB R8 1
L430: FASTCALL1 1 R8 L431
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.round/1
  272: assert(math.round(0.4) == 0)
L431: LOADK R10 K182 [0.40000000000000002]
FASTCALL1 48 R10 L432
GETIMPORT R9 181 [math.round]
CALL R9 1 1
L432: JUMPXEQKN R9 K9 L433 [0]
LOADB R8 0 +1
L433: LOADB R8 1
L434: FASTCALL1 1 R8 L435
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.round/1
  273: assert(math.round(0.5) == 1)
L435: LOADK R10 K22 [0.5]
FASTCALL1 48 R10 L436
GETIMPORT R9 181 [math.round]
CALL R9 1 1
L436: JUMPXEQKN R9 K40 L437 [1]
LOADB R8 0 +1
L437: LOADB R8 1
L438: FASTCALL1 1 R8 L439
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.round/1
  274: assert(math.round(3.5) == 4)
L439: LOADK R10 K17 [3.5]
FASTCALL1 48 R10 L440
GETIMPORT R9 181 [math.round]
CALL R9 1 1
L440: JUMPXEQKN R9 K92 L441 [4]
LOADB R8 0 +1
L441: LOADB R8 1
L442: FASTCALL1 1 R8 L443
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.round/1
  275: assert(math.round(-0.4) == 0)
L443: LOADK R10 K183 [-0.40000000000000002]
FASTCALL1 48 R10 L444
GETIMPORT R9 181 [math.round]
CALL R9 1 1
L444: JUMPXEQKN R9 K9 L445 [0]
LOADB R8 0 +1
L445: LOADB R8 1
L446: FASTCALL1 1 R8 L447
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.round/1
  276: assert(math.round(-0.5) == -1)
L447: LOADK R10 K174 [-0.5]
FASTCALL1 48 R10 L448
GETIMPORT R9 181 [math.round]
CALL R9 1 1
L448: JUMPXEQKN R9 K38 L449 [-1]
LOADB R8 0 +1
L449: LOADB R8 1
L450: FASTCALL1 1 R8 L451
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.round/1
  277: assert(math.round(-3.5) == -4)
L451: LOADK R10 K184 [-3.5]
FASTCALL1 48 R10 L452
GETIMPORT R9 181 [math.round]
CALL R9 1 1
L452: JUMPXEQKN R9 K185 L453 [-4]
LOADB R8 0 +1
L453: LOADB R8 1
L454: FASTCALL1 1 R8 L455
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.round/1
  278: assert(math.round(math.huge) == math.huge)
L455: GETIMPORT R10 24 [math.huge]
FASTCALL1 48 R10 L456
GETIMPORT R9 181 [math.round]
CALL R9 1 1
L456: GETIMPORT R10 24 [math.huge]
JUMPIFEQ R9 R10 L457
LOADB R8 0 +1
L457: LOADB R8 1
L458: FASTCALL1 1 R8 L459
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.fmod/2
  281: assert(math.fmod(3, 2) == 1)
L459: LOADN R10 3
FASTCALL2K 13 R10 K59 L460 [2]
LOADK R11 K59 [2]
GETIMPORT R9 187 [math.fmod]
CALL R9 2 1
L460: JUMPXEQKN R9 K40 L461 [1]
LOADB R8 0 +1
L461: LOADB R8 1
L462: FASTCALL1 1 R8 L463
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.fmod/2
  282: assert(math.fmod(-3, 2) == -1)
L463: LOADN R10 -3
FASTCALL2K 13 R10 K59 L464 [2]
LOADK R11 K59 [2]
GETIMPORT R9 187 [math.fmod]
CALL R9 2 1
L464: JUMPXEQKN R9 K38 L465 [-1]
LOADB R8 0 +1
L465: LOADB R8 1
L466: FASTCALL1 1 R8 L467
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.fmod/2
  283: assert(math.fmod(3, -2) == 1)
L467: LOADN R10 3
FASTCALL2K 13 R10 K188 L468 [-2]
LOADK R11 K188 [-2]
GETIMPORT R9 187 [math.fmod]
CALL R9 2 1
L468: JUMPXEQKN R9 K40 L469 [1]
LOADB R8 0 +1
L469: LOADB R8 1
L470: FASTCALL1 1 R8 L471
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.fmod/2
  284: assert(math.fmod(-3, -2) == -1)
L471: LOADN R10 -3
FASTCALL2K 13 R10 K188 L472 [-2]
LOADK R11 K188 [-2]
GETIMPORT R9 187 [math.fmod]
CALL R9 2 1
L472: JUMPXEQKN R9 K38 L473 [-1]
LOADB R8 0 +1
L473: LOADB R8 1
L474: FASTCALL1 1 R8 L475
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.pow/2
  287: assert(math.pow(2, 0) == 1)
L475: LOADN R10 2
FASTCALL2K 21 R10 K9 L476 [0]
LOADK R11 K9 [0]
GETIMPORT R9 190 [math.pow]
CALL R9 2 1
L476: JUMPXEQKN R9 K40 L477 [1]
LOADB R8 0 +1
L477: LOADB R8 1
L478: FASTCALL1 1 R8 L479
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.pow/2
  288: assert(math.pow(2, 2) == 4)
L479: LOADN R10 2
FASTCALL2K 21 R10 K59 L480 [2]
LOADK R11 K59 [2]
GETIMPORT R9 190 [math.pow]
CALL R9 2 1
L480: JUMPXEQKN R9 K92 L481 [4]
LOADB R8 0 +1
L481: LOADB R8 1
L482: FASTCALL1 1 R8 L483
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.pow/2
  289: assert(math.pow(4, 0.5) == 2)
L483: LOADN R10 4
FASTCALL2K 21 R10 K22 L484 [0.5]
LOADK R11 K22 [0.5]
GETIMPORT R9 190 [math.pow]
CALL R9 2 1
L484: JUMPXEQKN R9 K59 L485 [2]
LOADB R8 0 +1
L485: LOADB R8 1
L486: FASTCALL1 1 R8 L487
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.pow/2
  290: assert(math.pow(-2, 2) == 4)
L487: LOADN R10 -2
FASTCALL2K 21 R10 K59 L488 [2]
LOADK R11 K59 [2]
GETIMPORT R9 190 [math.pow]
CALL R9 2 1
L488: JUMPXEQKN R9 K92 L489 [4]
LOADB R8 0 +1
L489: LOADB R8 1
L490: FASTCALL1 1 R8 L491
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin tostring/1+
REMARK builtin math.pow/2
  291: assert(tostring(math.pow(-2, 0.5)) == "nan")
L491: LOADN R11 -2
FASTCALL2K 21 R11 K22 L492 [0.5]
LOADK R12 K22 [0.5]
GETIMPORT R10 190 [math.pow]
CALL R10 2 -1
L492: FASTCALL 63 L493
GETIMPORT R9 192 [tostring]
CALL R9 -1 1
L493: JUMPXEQKS R9 K193 L494 ['nan']
LOADB R8 0 +1
L494: LOADB R8 1
L495: FASTCALL1 1 R8 L496
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.abs/1
  295: assert(math.abs("-4") == 4)
L496: LOADK R10 K194 ['-4']
FASTCALL1 2 R10 L497
GETIMPORT R9 106 [math.abs]
CALL R9 1 1
L497: JUMPXEQKN R9 K92 L498 [4]
LOADB R8 0 +1
L498: LOADB R8 1
L499: FASTCALL1 1 R8 L500
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.acos/1
  296: assert(math.acos("1") == 0)
L500: LOADK R10 K66 ['1']
FASTCALL1 3 R10 L501
GETIMPORT R9 98 [math.acos]
CALL R9 1 1
L501: JUMPXEQKN R9 K9 L502 [0]
LOADB R8 0 +1
L502: LOADB R8 1
L503: FASTCALL1 1 R8 L504
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.asin/1
  297: assert(math.asin("0") == 0)
L504: LOADK R10 K195 ['0']
FASTCALL1 4 R10 L505
GETIMPORT R9 100 [math.asin]
CALL R9 1 1
L505: JUMPXEQKN R9 K9 L506 [0]
LOADB R8 0 +1
L506: LOADB R8 1
L507: FASTCALL1 1 R8 L508
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.atan2/2
  298: assert(math.atan2("0", "0") == 0)
L508: LOADK R10 K195 ['0']
FASTCALL2K 5 R10 K195 L509 ['0']
LOADK R11 K195 ['0']
GETIMPORT R9 108 [math.atan2]
CALL R9 2 1
L509: JUMPXEQKN R9 K9 L510 [0]
LOADB R8 0 +1
L510: LOADB R8 1
L511: FASTCALL1 1 R8 L512
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.atan/1
  299: assert(math.atan("0") == 0)
L512: LOADK R10 K195 ['0']
FASTCALL1 6 R10 L513
GETIMPORT R9 96 [math.atan]
CALL R9 1 1
L513: JUMPXEQKN R9 K9 L514 [0]
LOADB R8 0 +1
L514: LOADB R8 1
L515: FASTCALL1 1 R8 L516
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.ceil/1
  300: assert(math.ceil("1.5") == 2)
L516: LOADK R10 K196 ['1.5']
FASTCALL1 7 R10 L517
GETIMPORT R9 111 [math.ceil]
CALL R9 1 1
L517: JUMPXEQKN R9 K59 L518 [2]
LOADB R8 0 +1
L518: LOADB R8 1
L519: FASTCALL1 1 R8 L520
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.cosh/1
  301: assert(math.cosh("0") == 1)
L520: LOADK R10 K195 ['0']
FASTCALL1 8 R10 L521
GETIMPORT R9 131 [math.cosh]
CALL R9 1 1
L521: JUMPXEQKN R9 K40 L522 [1]
LOADB R8 0 +1
L522: LOADB R8 1
L523: FASTCALL1 1 R8 L524
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.cos/1
  302: assert(math.cos("0") == 1)
L524: LOADK R10 K195 ['0']
FASTCALL1 9 R10 L525
GETIMPORT R9 91 [math.cos]
CALL R9 1 1
L525: JUMPXEQKN R9 K40 L526 [1]
LOADB R8 0 +1
L526: LOADB R8 1
L527: FASTCALL1 1 R8 L528
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.deg/1
  303: assert(math.deg("0") == 0)
L528: LOADK R10 K195 ['0']
FASTCALL1 10 R10 L529
GETIMPORT R9 102 [math.deg]
CALL R9 1 1
L529: JUMPXEQKN R9 K9 L530 [0]
LOADB R8 0 +1
L530: LOADB R8 1
L531: FASTCALL1 1 R8 L532
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.exp/1
  304: assert(math.exp("0") == 1)
L532: LOADK R10 K195 ['0']
FASTCALL1 11 R10 L533
GETIMPORT R9 121 [math.exp]
CALL R9 1 1
L533: JUMPXEQKN R9 K40 L534 [1]
LOADB R8 0 +1
L534: LOADB R8 1
L535: FASTCALL1 1 R8 L536
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.floor/1
  305: assert(math.floor("1.5") == 1)
L536: LOADK R10 K196 ['1.5']
FASTCALL1 12 R10 L537
GETIMPORT R9 113 [math.floor]
CALL R9 1 1
L537: JUMPXEQKN R9 K40 L538 [1]
LOADB R8 0 +1
L538: LOADB R8 1
L539: FASTCALL1 1 R8 L540
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin assert/1
REMARK builtin math.fmod/2
  306: assert(math.fmod("1.5", 1) == 0.5)
L540: LOADK R10 K196 ['1.5']
FASTCALL2K 13 R10 K40 L541 [1]
LOADK R11 K40 [1]
GETIMPORT R9 187 [math.fmod]
CALL R9 2 1
L541: JUMPXEQKN R9 K22 L542 [0.5]
LOADB R8 0 +1
L542: LOADB R8 1
L543: FASTCALL1 1 R8 L544
GETIMPORT R7 11 [assert]
CALL R7 1 0
REMARK builtin math.frexp/1
  307: local v,e = math.frexp("1.5")
L544: LOADK R8 K196 ['1.5']
FASTCALL1 14 R8 L545
GETIMPORT R7 123 [math.frexp]
CALL R7 1 2
REMARK builtin assert/1
  308: assert(v == 0.75 and e == 1)
L545: LOADB R10 0
JUMPXEQKN R7 K197 L547 NOT [0.75]
JUMPXEQKN R8 K40 L546 [1]
LOADB R10 0 +1
L546: LOADB R10 1
L547: FASTCALL1 1 R10 L548
GETIMPORT R9 11 [assert]
CALL R9 1 0
REMARK builtin assert/1
REMARK builtin math.ldexp/2
  309: assert(math.ldexp("0.75", 1) == 1.5)
L548: LOADK R12 K198 ['0.75']
FASTCALL2K 15 R12 K40 L549 [1]
LOADK R13 K40 [1]
GETIMPORT R11 125 [math.ldexp]
CALL R11 2 1
L549: JUMPXEQKN R11 K199 L550 [1.5]
LOADB R10 0 +1
L550: LOADB R10 1
L551: FASTCALL1 1 R10 L552
GETIMPORT R9 11 [assert]
CALL R9 1 0
REMARK builtin assert/1
REMARK builtin math.log10/1
  310: assert(math.log10("10") == 1)
L552: LOADK R12 K7 ['10']
FASTCALL1 16 R12 L553
GETIMPORT R11 117 [math.log10]
CALL R11 1 1
L553: JUMPXEQKN R11 K40 L554 [1]
LOADB R10 0 +1
L554: LOADB R10 1
L555: FASTCALL1 1 R10 L556
GETIMPORT R9 11 [assert]
CALL R9 1 0
REMARK builtin assert/1
REMARK builtin math.log/1
  311: assert(math.log("0") == -inf)
L556: LOADK R12 K195 ['0']
FASTCALL1 17 R12 L557
GETIMPORT R11 119 [math.log]
CALL R11 1 1
L557: MINUS R12 R6
JUMPIFEQ R11 R12 L558
LOADB R10 0 +1
L558: LOADB R10 1
L559: FASTCALL1 1 R10 L560
GETIMPORT R9 11 [assert]
CALL R9 1 0
REMARK builtin assert/1
REMARK builtin math.log/2
  312: assert(math.log("8", 2) == 3)
L560: LOADK R12 K200 ['8']
FASTCALL2K 17 R12 K59 L561 [2]
LOADK R13 K59 [2]
GETIMPORT R11 119 [math.log]
CALL R11 2 1
L561: JUMPXEQKN R11 K21 L562 [3]
LOADB R10 0 +1
L562: LOADB R10 1
L563: FASTCALL1 1 R10 L564
GETIMPORT R9 11 [assert]
CALL R9 1 0
REMARK builtin assert/1
REMARK builtin math.log/2
  313: assert(math.log("10", 10) == 1)
L564: LOADK R12 K7 ['10']
FASTCALL2K 17 R12 K60 L565 [10]
LOADK R13 K60 [10]
GETIMPORT R11 119 [math.log]
CALL R11 2 1
L565: JUMPXEQKN R11 K40 L566 [1]
LOADB R10 0 +1
L566: LOADB R10 1
L567: FASTCALL1 1 R10 L568
GETIMPORT R9 11 [assert]
CALL R9 1 0
REMARK builtin assert/1
REMARK builtin math.log/2
  314: assert(math.log("9", 3) == 2)
L568: LOADK R12 K201 ['9']
FASTCALL2K 17 R12 K21 L569 [3]
LOADK R13 K21 [3]
GETIMPORT R11 119 [math.log]
CALL R11 2 1
L569: JUMPXEQKN R11 K59 L570 [2]
LOADB R10 0 +1
L570: LOADB R10 1
L571: FASTCALL1 1 R10 L572
GETIMPORT R9 11 [assert]
CALL R9 1 0
REMARK builtin assert/1
REMARK builtin math.max/2
  315: assert(math.max("1", 2) == 2)
L572: LOADK R12 K66 ['1']
FASTCALL2K 18 R12 K59 L573 [2]
LOADK R13 K59 [2]
GETIMPORT R11 163 [math.max]
CALL R11 2 1
L573: JUMPXEQKN R11 K59 L574 [2]
LOADB R10 0 +1
L574: LOADB R10 1
L575: FASTCALL1 1 R10 L576
GETIMPORT R9 11 [assert]
CALL R9 1 0
REMARK builtin assert/1
REMARK builtin math.max/2
  316: assert(math.max(2, "1") == 2)
L576: LOADN R12 2
FASTCALL2K 18 R12 K66 L577 ['1']
LOADK R13 K66 ['1']
GETIMPORT R11 163 [math.max]
CALL R11 2 1
L577: JUMPXEQKN R11 K59 L578 [2]
LOADB R10 0 +1
L578: LOADB R10 1
L579: FASTCALL1 1 R10 L580
GETIMPORT R9 11 [assert]
CALL R9 1 0
REMARK builtin assert/1
REMARK builtin math.max/3
  317: assert(math.max(1, 2, "3") == 3)
L580: LOADN R12 1
LOADN R13 2
LOADK R14 K202 ['3']
FASTCALL 18 L581
GETIMPORT R11 163 [math.max]
CALL R11 3 1
L581: JUMPXEQKN R11 K21 L582 [3]
LOADB R10 0 +1
L582: LOADB R10 1
L583: FASTCALL1 1 R10 L584
GETIMPORT R9 11 [assert]
CALL R9 1 0
REMARK builtin assert/1
REMARK builtin math.min/2
  318: assert(math.min("1", 2) == 1)
L584: LOADK R12 K66 ['1']
FASTCALL2K 19 R12 K59 L585 [2]
LOADK R13 K59 [2]
GETIMPORT R11 165 [math.min]
CALL R11 2 1
L585: JUMPXEQKN R11 K40 L586 [1]
LOADB R10 0 +1
L586: LOADB R10 1
L587: FASTCALL1 1 R10 L588
GETIMPORT R9 11 [assert]
CALL R9 1 0
REMARK builtin assert/1
REMARK builtin math.min/2
  319: assert(math.min(2, "1") == 1)
L588: LOADN R12 2
FASTCALL2K 19 R12 K66 L589 ['1']
LOADK R13 K66 ['1']
GETIMPORT R11 165 [math.min]
CALL R11 2 1
L589: JUMPXEQKN R11 K40 L590 [1]
LOADB R10 0 +1
L590: LOADB R10 1
L591: FASTCALL1 1 R10 L592
GETIMPORT R9 11 [assert]
CALL R9 1 0
REMARK builtin assert/1
REMARK builtin math.min/3
  320: assert(math.min(1, 2, "3") == 1)
L592: LOADN R12 1
LOADN R13 2
LOADK R14 K202 ['3']
FASTCALL 19 L593
GETIMPORT R11 165 [math.min]
CALL R11 3 1
L593: JUMPXEQKN R11 K40 L594 [1]
LOADB R10 0 +1
L594: LOADB R10 1
L595: FASTCALL1 1 R10 L596
GETIMPORT R9 11 [assert]
CALL R9 1 0
REMARK builtin math.modf/1
  321: local v,f = math.modf("1.5")
L596: LOADK R10 K196 ['1.5']
FASTCALL1 20 R10 L597
GETIMPORT R9 20 [math.modf]
CALL R9 1 2
REMARK builtin assert/1
  322: assert(v == 1 and f == 0.5)
L597: LOADB R12 0
JUMPXEQKN R9 K40 L599 NOT [1]
JUMPXEQKN R10 K22 L598 [0.5]
LOADB R12 0 +1
L598: LOADB R12 1
L599: FASTCALL1 1 R12 L600
GETIMPORT R11 11 [assert]
CALL R11 1 0
REMARK builtin assert/1
REMARK builtin math.pow/2
  323: assert(math.pow("2", 2) == 4)
L600: LOADK R14 K3 ['2']
FASTCALL2K 21 R14 K59 L601 [2]
LOADK R15 K59 [2]
GETIMPORT R13 190 [math.pow]
CALL R13 2 1
L601: JUMPXEQKN R13 K92 L602 [4]
LOADB R12 0 +1
L602: LOADB R12 1
L603: FASTCALL1 1 R12 L604
GETIMPORT R11 11 [assert]
CALL R11 1 0
REMARK builtin assert/1
REMARK builtin math.rad/1
  324: assert(math.rad("0") == 0)
L604: LOADK R14 K195 ['0']
FASTCALL1 22 R14 L605
GETIMPORT R13 104 [math.rad]
CALL R13 1 1
L605: JUMPXEQKN R13 K9 L606 [0]
LOADB R12 0 +1
L606: LOADB R12 1
L607: FASTCALL1 1 R12 L608
GETIMPORT R11 11 [assert]
CALL R11 1 0
REMARK builtin assert/1
REMARK builtin math.sinh/1
  325: assert(math.sinh("0") == 0)
L608: LOADK R14 K195 ['0']
FASTCALL1 23 R14 L609
GETIMPORT R13 129 [math.sinh]
CALL R13 1 1
L609: JUMPXEQKN R13 K9 L610 [0]
LOADB R12 0 +1
L610: LOADB R12 1
L611: FASTCALL1 1 R12 L612
GETIMPORT R11 11 [assert]
CALL R11 1 0
REMARK builtin assert/1
REMARK builtin math.sin/1
  326: assert(math.sin("0") == 0)
L612: LOADK R14 K195 ['0']
FASTCALL1 24 R14 L613
GETIMPORT R13 89 [math.sin]
CALL R13 1 1
L613: JUMPXEQKN R13 K9 L614 [0]
LOADB R12 0 +1
L614: LOADB R12 1
L615: FASTCALL1 1 R12 L616
GETIMPORT R11 11 [assert]
CALL R11 1 0
REMARK builtin assert/1
REMARK builtin math.sqrt/1
  327: assert(math.sqrt("4") == 2)
L616: LOADK R14 K203 ['4']
FASTCALL1 25 R14 L617
GETIMPORT R13 115 [math.sqrt]
CALL R13 1 1
L617: JUMPXEQKN R13 K59 L618 [2]
LOADB R12 0 +1
L618: LOADB R12 1
L619: FASTCALL1 1 R12 L620
GETIMPORT R11 11 [assert]
CALL R11 1 0
REMARK builtin assert/1
REMARK builtin math.tanh/1
  328: assert(math.tanh("0") == 0)
L620: LOADK R14 K195 ['0']
FASTCALL1 26 R14 L621
GETIMPORT R13 127 [math.tanh]
CALL R13 1 1
L621: JUMPXEQKN R13 K9 L622 [0]
LOADB R12 0 +1
L622: LOADB R12 1
L623: FASTCALL1 1 R12 L624
GETIMPORT R11 11 [assert]
CALL R11 1 0
REMARK builtin assert/1
REMARK builtin math.tan/1
  329: assert(math.tan("0") == 0)
L624: LOADK R14 K195 ['0']
FASTCALL1 27 R14 L625
GETIMPORT R13 94 [math.tan]
CALL R13 1 1
L625: JUMPXEQKN R13 K9 L626 [0]
LOADB R12 0 +1
L626: LOADB R12 1
L627: FASTCALL1 1 R12 L628
GETIMPORT R11 11 [assert]
CALL R11 1 0
REMARK builtin assert/1
REMARK builtin math.clamp/3
  330: assert(math.clamp("0", 2, 3) == 2)
L628: LOADK R14 K195 ['0']
LOADN R15 2
LOADN R16 3
FASTCALL 46 L629
GETIMPORT R13 179 [math.clamp]
CALL R13 3 1
L629: JUMPXEQKN R13 K59 L630 [2]
LOADB R12 0 +1
L630: LOADB R12 1
L631: FASTCALL1 1 R12 L632
GETIMPORT R11 11 [assert]
CALL R11 1 0
REMARK builtin assert/1
REMARK builtin math.clamp/3
  331: assert(math.clamp("4", 2, 3) == 3)
L632: LOADK R14 K203 ['4']
LOADN R15 2
LOADN R16 3
FASTCALL 46 L633
GETIMPORT R13 179 [math.clamp]
CALL R13 3 1
L633: JUMPXEQKN R13 K21 L634 [3]
LOADB R12 0 +1
L634: LOADB R12 1
L635: FASTCALL1 1 R12 L636
GETIMPORT R11 11 [assert]
CALL R11 1 0
REMARK builtin assert/1
REMARK builtin math.sign/1
  332: assert(math.sign("2") == 1)
L636: LOADK R14 K3 ['2']
FASTCALL1 47 R14 L637
GETIMPORT R13 177 [math.sign]
CALL R13 1 1
L637: JUMPXEQKN R13 K40 L638 [1]
LOADB R12 0 +1
L638: LOADB R12 1
L639: FASTCALL1 1 R12 L640
GETIMPORT R11 11 [assert]
CALL R11 1 0
REMARK builtin assert/1
REMARK builtin math.sign/1
  333: assert(math.sign("-2") == -1)
L640: LOADK R14 K204 ['-2']
FASTCALL1 47 R14 L641
GETIMPORT R13 177 [math.sign]
CALL R13 1 1
L641: JUMPXEQKN R13 K38 L642 [-1]
LOADB R12 0 +1
L642: LOADB R12 1
L643: FASTCALL1 1 R12 L644
GETIMPORT R11 11 [assert]
CALL R11 1 0
REMARK builtin assert/1
REMARK builtin math.sign/1
  334: assert(math.sign("0") == 0)
L644: LOADK R14 K195 ['0']
FASTCALL1 47 R14 L645
GETIMPORT R13 177 [math.sign]
CALL R13 1 1
L645: JUMPXEQKN R13 K9 L646 [0]
LOADB R12 0 +1
L646: LOADB R12 1
L647: FASTCALL1 1 R12 L648
GETIMPORT R11 11 [assert]
CALL R11 1 0
REMARK builtin assert/1
REMARK builtin math.round/1
  335: assert(math.round("1.8") == 2)
L648: LOADK R14 K205 ['1.8']
FASTCALL1 48 R14 L649
GETIMPORT R13 181 [math.round]
CALL R13 1 1
L649: JUMPXEQKN R13 K59 L650 [2]
LOADB R12 0 +1
L650: LOADB R12 1
L651: FASTCALL1 1 R12 L652
GETIMPORT R11 11 [assert]
CALL R11 1 0
REMARK builtin assert/1
  338: assert(select('#', math.floor(1.4)) == 1)
L652: GETIMPORT R13 168 [select]
LOADK R14 K206 ['#']
REMARK builtin math.floor/1
LOADK R16 K207 [1.3999999999999999]
FASTCALL1 12 R16 L653
GETIMPORT R15 113 [math.floor]
CALL R15 1 -1
L653: CALL R13 -1 1
JUMPXEQKN R13 K40 L654 [1]
LOADB R12 0 +1
L654: LOADB R12 1
L655: FASTCALL1 1 R12 L656
GETIMPORT R11 11 [assert]
CALL R11 1 0
REMARK builtin assert/1
  339: assert(select('#', math.ceil(1.6)) == 1)
L656: GETIMPORT R13 168 [select]
LOADK R14 K206 ['#']
REMARK builtin math.ceil/1
LOADK R16 K208 [1.6000000000000001]
FASTCALL1 7 R16 L657
GETIMPORT R15 111 [math.ceil]
CALL R15 1 -1
L657: CALL R13 -1 1
JUMPXEQKN R13 K40 L658 [1]
LOADB R12 0 +1
L658: LOADB R12 1
L659: FASTCALL1 1 R12 L660
GETIMPORT R11 11 [assert]
CALL R11 1 0
REMARK builtin assert/1
  340: assert(select('#', math.sqrt(9)) == 1)
L660: GETIMPORT R13 168 [select]
LOADK R14 K206 ['#']
REMARK builtin math.sqrt/1
LOADN R16 9
FASTCALL1 25 R16 L661
GETIMPORT R15 115 [math.sqrt]
CALL R15 1 -1
L661: CALL R13 -1 1
JUMPXEQKN R13 K40 L662 [1]
LOADB R12 0 +1
L662: LOADB R12 1
L663: FASTCALL1 1 R12 L664
GETIMPORT R11 11 [assert]
CALL R11 1 0
  342: print('OK')
L664: GETIMPORT R11 1 [print]
LOADK R12 K209 ['OK']
CALL R11 1 0
  343: 
RETURN R0 0

]====]
end