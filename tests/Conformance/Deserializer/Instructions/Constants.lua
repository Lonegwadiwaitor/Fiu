--!ctx Luau

local ok, compileResult = Luau.compile([[
-- tests: LOP_LOADNIL, LOP_LOADK, LOP_LOADN, LOP_LOADB, LOP_NEWTABLE, LOP_NEWCLOSURE/LOP_DUPCLOSURE

-- LOADNIL
local n = nil
-- LOADK
local string = "STRING"
-- LOADN
local number = 123
-- LOADB
local boolean = true
-- NEWTABLE
local table = {1, 2, 3}
-- NEWCLOSURE/DUPCLOSURE
local function func() end
-- extra uncontrolled datatypes
local userdata = newproxy(true)
local thread = coroutine.create(func)

-- assert types
assert(type(n) == "nil")
assert(type(string) == "string" and string == "STRING")
assert(type(number) == "number" and number == 123)
assert(type(boolean) == "boolean" and boolean == true)
assert(type(table) == "table" and #table == 3 and table[1] == 1 and table[2] == 2 and table[3] == 3)
assert(type(func) == "function")
assert(type(userdata) == "userdata")
assert(type(thread) == "thread")

OK()
]], {
	optmizationLevel = 2,
	debugLevel = 2,
	coverageLevel = 0,
	vectorLib = nil,
	vectorCtor = nil,
	vectorType = nil,
})

if not ok then
	error(`Failed to compile, error: {compileResult}`)
end

local encodedModule, constantList, stringList = [[
	1; 2; 0 0 0 0 0 14 1 1 0 0 [] {
		22 2 0 ? 0 1 ? ? ? ? ? ? ? ? ? ?
	}
	1 12 0 0 1 1 ? 145 24 1 [1,] {
		65 1 0 ? 0 ? ? ? ? ? ? ? ? ? ? ?; 2 1 0 ? 0 ? ? ? ? ? ? ? ? ? ? ?; 5 4 3 ? 1 ? ? 0 ? 1 ? ? ? ? ? ?; 4 4 0 ? 2 ? ? 123 ? ? ? ? ? ? ? ?
		3 3 0 ? 3 1 0 ? ? ? ? ? ? ? ? ?; 53 2 0 3 4 0 ? ? ? ? ? ? ? ? ? 1; ~ 3; 4 4 0 ? 5 ? ? 1 ? ? ? ? ? ? ? ?
		4 4 0 ? 6 ? ? 2 ? ? ? ? ? ? ? ?; 4 4 0 ? 7 ? ? 3 ? ? ? ? ? ? ? ?; 55 3 0 1 4 5 4 ? ? ? ? ? ? ? ? 1; ~ 1
		64 4 3 ? 5 ? ? 1 ? 2 ? ? ? ? ? ?; 12 4 4 1075838976 6 ? ? 3 ? ? 3 ? ? ? 1 1; ~ 1075838976; 3 3 0 ? 7 1 0 ? ? ? ? ? ? ? ? ?
		21 3 0 ? 6 2 2 ? ? ? ? ? ? ? ? ?; 12 4 4 2151683072 7 ? ? 6 ? ? 5 6 ? ? 2 1; ~ 2151683072; 6 2 0 ? 8 5 ? ? ? ? ? ? ? ? ? ?
		21 3 0 ? 7 2 2 ? ? ? ? ? ? ? ? ?; 73 3 0 ? 40 0 3 ? ? ? ? ? ? ? ? ?; 6 2 0 ? 11 0 ? ? ? ? ? ? ? ? ? ?; 12 4 4 1081081856 10 ? ? 8 ? ? 8 ? ? ? 1 1     
		~ 1081081856; 21 3 0 ? 10 2 2 ? ? ? ? ? ? ? ? ?; 80 4 6 9 10 ? ? 2 ? 10 ? ? ? 0 ? 1; ~ 9
		3 3 0 ? 9 0 1 ? ? ? ? ? ? ? ? ?; 3 3 0 ? 9 1 0 ? ? ? ? ? ? ? ? ?; 73 3 0 ? 1 9 2 ? ? ? ? ? ? ? ? ?; 12 4 4 1084227584 8 ? ? 11 ? ? 11 ? ? ? 1 1       
		~ 1084227584; 21 3 0 ? 8 2 1 ? ? ? ? ? ? ? ? ?; 3 3 0 ? 9 0 0 ? ? ? ? ? ? ? ? ?; 73 3 0 ? 40 1 3 ? ? ? ? ? ? ? ? ?
		6 2 0 ? 11 1 ? ? ? ? ? ? ? ? ? ?; 12 4 4 1081081856 10 ? ? 8 ? ? 8 ? ? ? 1 1; ~ 1081081856; 21 3 0 ? 10 2 2 ? ? ? ? ? ? ? ? ?
		80 4 6 2147483660 10 ? ? 2 ? 13 ? ? ? 1 ? 1; ~ 2147483660; 3 3 0 ? 9 1 0 ? ? ? ? ? ? ? ? ?; 73 3 0 ? 1 9 2 ? ? ? ? ? ? ? ? ?
		12 4 4 1084227584 8 ? ? 11 ? ? 11 ? ? ? 1 1; ~ 1084227584; 21 3 0 ? 8 2 1 ? ? ? ? ? ? ? ? ?; 3 3 0 ? 9 0 0 ? ? ? ? ? ? ? ? ?
		73 3 0 ? 40 2 3 ? ? ? ? ? ? ? ? ?; 6 2 0 ? 11 2 ? ? ? ? ? ? ? ? ? ?; 12 4 4 1081081856 10 ? ? 8 ? ? 8 ? ? ? 1 1; ~ 1081081856
		21 3 0 ? 10 2 2 ? ? ? ? ? ? ? ? ?; 80 4 6 2147483661 10 ? ? 2 ? 14 ? ? ? 1 ? 1; ~ 2147483661; 3 3 0 ? 9 1 0 ? ? ? ? ? ? ? ? ?
		73 3 0 ? 1 9 2 ? ? ? ? ? ? ? ? ?; 12 4 4 1084227584 8 ? ? 11 ? ? 11 ? ? ? 1 1; ~ 1084227584; 21 3 0 ? 8 2 1 ? ? ? ? ? ? ? ? ?
		3 3 0 ? 9 0 0 ? ? ? ? ? ? ? ? ?; 73 3 0 ? 40 3 3 ? ? ? ? ? ? ? ? ?; 6 2 0 ? 11 3 ? ? ? ? ? ? ? ? ? ?; 12 4 4 1081081856 10 ? ? 8 ? ? 8 ? ? ? 1 1      
		~ 1081081856; 21 3 0 ? 10 2 2 ? ? ? ? ? ? ? ? ?; 80 4 6 2147483662 10 ? ? 2 ? 15 ? ? ? 1 ? 1; ~ 2147483662
		3 3 0 ? 9 1 0 ? ? ? ? ? ? ? ? ?; 73 3 0 ? 1 9 2 ? ? ? ? ? ? ? ? ?; 12 4 4 1084227584 8 ? ? 11 ? ? 11 ? ? ? 1 1; ~ 1084227584
		21 3 0 ? 8 2 1 ? ? ? ? ? ? ? ? ?; 3 3 0 ? 9 0 0 ? ? ? ? ? ? ? ? ?; 73 3 0 ? 40 4 3 ? ? ? ? ? ? ? ? ?; 6 2 0 ? 11 4 ? ? ? ? ? ? ? ? ? ?
		12 4 4 1081081856 10 ? ? 8 ? ? 8 ? ? ? 1 1; ~ 1081081856; 21 3 0 ? 10 2 2 ? ? ? ? ? ? ? ? ?; 80 4 6 2147483663 10 ? ? 18 ? 16 ? ? ? 1 ? 1
		~ 2147483663; 3 3 0 ? 9 0 0 ? ? ? ? ? ? ? ? ?; 52 2 0 ? 10 4 ? ? ? ? ? ? ? ? ? ?; 79 4 6 2147483664 10 ? ? 14 ? 17 ? ? ? 1 ? 1
		~ 2147483664; 3 3 0 ? 9 0 0 ? ? ? ? ? ? ? ? ?; 17 3 0 ? 10 4 0 ? ? ? ? ? ? ? ? ?; 79 4 6 2147483665 10 ? ? 10 ? 18 ? ? ? 1 ? 1
		~ 2147483665; 3 3 0 ? 9 0 0 ? ? ? ? ? ? ? ? ?; 17 3 0 ? 10 4 1 ? ? ? ? ? ? ? ? ?; 79 4 6 2147483666 10 ? ? 6 ? 19 ? ? ? 1 ? 1
		~ 2147483666; 17 3 0 ? 10 4 2 ? ? ? ? ? ? ? ? ?; 79 4 6 16 10 ? ? 2 ? 17 ? ? ? 0 ? 1; ~ 16
		3 3 0 ? 9 0 1 ? ? ? ? ? ? ? ? ?; 3 3 0 ? 9 1 0 ? ? ? ? ? ? ? ? ?; 73 3 0 ? 1 9 2 ? ? ? ? ? ? ? ? ?; 12 4 4 1084227584 8 ? ? 11 ? ? 11 ? ? ? 1 1       
		~ 1084227584; 21 3 0 ? 8 2 1 ? ? ? ? ? ? ? ? ?; 73 3 0 ? 40 5 3 ? ? ? ? ? ? ? ? ?; 6 2 0 ? 11 5 ? ? ? ? ? ? ? ? ? ?
		12 4 4 1081081856 10 ? ? 8 ? ? 8 ? ? ? 1 1; ~ 1081081856; 21 3 0 ? 10 2 2 ? ? ? ? ? ? ? ? ?; 80 4 6 19 10 ? ? 2 ? 20 ? ? ? 0 ? 1
		~ 19; 3 3 0 ? 9 0 1 ? ? ? ? ? ? ? ? ?; 3 3 0 ? 9 1 0 ? ? ? ? ? ? ? ? ?; 73 3 0 ? 1 9 2 ? ? ? ? ? ? ? ? ?
		12 4 4 1084227584 8 ? ? 11 ? ? 11 ? ? ? 1 1; ~ 1084227584; 21 3 0 ? 8 2 1 ? ? ? ? ? ? ? ? ?; 73 3 0 ? 40 6 3 ? ? ? ? ? ? ? ? ?
		6 2 0 ? 11 6 ? ? ? ? ? ? ? ? ? ?; 12 4 4 1081081856 10 ? ? 8 ? ? 8 ? ? ? 1 1; ~ 1081081856; 21 3 0 ? 10 2 2 ? ? ? ? ? ? ? ? ?
		80 4 6 20 10 ? ? 2 ? 21 ? ? ? 0 ? 1; ~ 20; 3 3 0 ? 9 0 1 ? ? ? ? ? ? ? ? ?; 3 3 0 ? 9 1 0 ? ? ? ? ? ? ? ? ?
		73 3 0 ? 1 9 2 ? ? ? ? ? ? ? ? ?; 12 4 4 1084227584 8 ? ? 11 ? ? 11 ? ? ? 1 1; ~ 1084227584; 21 3 0 ? 8 2 1 ? ? ? ? ? ? ? ? ?
		73 3 0 ? 40 7 3 ? ? ? ? ? ? ? ? ?; 6 2 0 ? 11 7 ? ? ? ? ? ? ? ? ? ?; 12 4 4 1081081856 10 ? ? 8 ? ? 8 ? ? ? 1 1; ~ 1081081856
		21 3 0 ? 10 2 2 ? ? ? ? ? ? ? ? ?; 80 4 6 21 10 ? ? 2 ? 22 ? ? ? 0 ? 1; ~ 21; 3 3 0 ? 9 0 1 ? ? ? ? ? ? ? ? ?
		3 3 0 ? 9 1 0 ? ? ? ? ? ? ? ? ?; 73 3 0 ? 1 9 2 ? ? ? ? ? ? ? ? ?; 12 4 4 1084227584 8 ? ? 11 ? ? 11 ? ? ? 1 1; ~ 1084227584
		21 3 0 ? 8 2 1 ? ? ? ? ? ? ? ? ?; 12 4 4 1096810496 8 ? ? 23 ? ? 23 ? ? ? 1 1; ~ 1096810496; 21 3 0 ? 8 1 1 ? ? ? ? ? ? ? ? ?
		22 2 0 ? 0 1 ? ? ? ? ? ? ? ? ? ?
	}]], {
		{ },{ "2",0,"3",1075838976,"4","5",2151683072,"6",1081081856,
				"7","8",1084227584,"9","10","11","12",3,1,2,"13","14","15","16",1096810496,
		},
	}, {
		"\102\117\110\99","\83\84\82\73\78\71","\110\101\119\112\114\111\120\121","\99\111\114\111\117\116\105\110\101",
		"\99\114\101\97\116\101","\116\121\112\101","\110\105\108","\97\115\115\101\114\116","\115\116\114\105\110\103",
		"\110\117\109\98\101\114","\98\111\111\108\101\97\110","\116\97\98\108\101","\102\117\110\99\116\105\111\110",
		"\117\115\101\114\100\97\116\97","\116\104\114\101\97\100","\79\75","\110",
	}

assert(MATCH(
	Fiu.luau_deserialize(compileResult),
	FiuUtils.decodeModule(encodedModule, constantList, stringList)
))

OK()
